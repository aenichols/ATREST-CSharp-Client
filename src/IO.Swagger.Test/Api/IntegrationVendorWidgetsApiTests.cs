/*
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;using Object = IO.Swagger.Model.Object;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing IntegrationVendorWidgetsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class IntegrationVendorWidgetsApiTests
    {
        private IntegrationVendorWidgetsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new IntegrationVendorWidgetsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of IntegrationVendorWidgetsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' IntegrationVendorWidgetsApi
            //Assert.IsInstanceOfType(typeof(IntegrationVendorWidgetsApi), instance, "instance is a IntegrationVendorWidgetsApi");
        }


        /// <summary>
        /// Test IntegrationVendorWidgetsCreateEntity
        /// </summary>
        [Test]
        public void IntegrationVendorWidgetsCreateEntityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //IntegrationVendorWidgetModel restModelInput = null;
            //string apiIntegrationCode = null;
            //string userName = null;
            //string secret = null;
            //string impersonationResourceId = null;
            //var response = instance.IntegrationVendorWidgetsCreateEntity(restModelInput, apiIntegrationCode, userName, secret, impersonationResourceId);
            //Assert.IsInstanceOf<OperationResultModel> (response, "response is OperationResultModel");
        }

        /// <summary>
        /// Test IntegrationVendorWidgetsDeleteEntity
        /// </summary>
        [Test]
        public void IntegrationVendorWidgetsDeleteEntityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //string apiIntegrationCode = null;
            //string userName = null;
            //string secret = null;
            //string impersonationResourceId = null;
            //var response = instance.IntegrationVendorWidgetsDeleteEntity(id, apiIntegrationCode, userName, secret, impersonationResourceId);
            //Assert.IsInstanceOf<OperationResultModel> (response, "response is OperationResultModel");
        }

        /// <summary>
        /// Test IntegrationVendorWidgetsPatchEntity
        /// </summary>
        [Test]
        public void IntegrationVendorWidgetsPatchEntityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //IntegrationVendorWidgetModel restModelInput = null;
            //string apiIntegrationCode = null;
            //string userName = null;
            //string secret = null;
            //string impersonationResourceId = null;
            //var response = instance.IntegrationVendorWidgetsPatchEntity(restModelInput, apiIntegrationCode, userName, secret, impersonationResourceId);
            //Assert.IsInstanceOf<OperationResultModel> (response, "response is OperationResultModel");
        }

        /// <summary>
        /// Test IntegrationVendorWidgetsQuery
        /// </summary>
        [Test]
        public void IntegrationVendorWidgetsQueryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //QueryModel queryModel = null;
            //string apiIntegrationCode = null;
            //string userName = null;
            //string secret = null;
            //string impersonationResourceId = null;
            //var response = instance.IntegrationVendorWidgetsQuery(queryModel, apiIntegrationCode, userName, secret, impersonationResourceId);
            //Assert.IsInstanceOf<QueryActionResultIntegrationVendorWidgetModelIntegrationVendorWidget> (response, "response is QueryActionResultIntegrationVendorWidgetModelIntegrationVendorWidget");
        }

        /// <summary>
        /// Test IntegrationVendorWidgetsQueryCount
        /// </summary>
        [Test]
        public void IntegrationVendorWidgetsQueryCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //QueryModel queryModel = null;
            //string apiIntegrationCode = null;
            //string userName = null;
            //string secret = null;
            //string impersonationResourceId = null;
            //var response = instance.IntegrationVendorWidgetsQueryCount(queryModel, apiIntegrationCode, userName, secret, impersonationResourceId);
            //Assert.IsInstanceOf<QueryCountResultModel> (response, "response is QueryCountResultModel");
        }

        /// <summary>
        /// Test IntegrationVendorWidgetsQueryEntityInformation
        /// </summary>
        [Test]
        public void IntegrationVendorWidgetsQueryEntityInformationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiIntegrationCode = null;
            //string userName = null;
            //string secret = null;
            //string impersonationResourceId = null;
            //var response = instance.IntegrationVendorWidgetsQueryEntityInformation(apiIntegrationCode, userName, secret, impersonationResourceId);
            //Assert.IsInstanceOf<EntityInformationResultModel> (response, "response is EntityInformationResultModel");
        }

        /// <summary>
        /// Test IntegrationVendorWidgetsQueryFieldDefinitions
        /// </summary>
        [Test]
        public void IntegrationVendorWidgetsQueryFieldDefinitionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiIntegrationCode = null;
            //string userName = null;
            //string secret = null;
            //string impersonationResourceId = null;
            //var response = instance.IntegrationVendorWidgetsQueryFieldDefinitions(apiIntegrationCode, userName, secret, impersonationResourceId);
            //Assert.IsInstanceOf<FieldInformationResultModel> (response, "response is FieldInformationResultModel");
        }

        /// <summary>
        /// Test IntegrationVendorWidgetsQueryItem
        /// </summary>
        [Test]
        public void IntegrationVendorWidgetsQueryItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //string apiIntegrationCode = null;
            //string userName = null;
            //string secret = null;
            //string impersonationResourceId = null;
            //var response = instance.IntegrationVendorWidgetsQueryItem(id, apiIntegrationCode, userName, secret, impersonationResourceId);
            //Assert.IsInstanceOf<ItemQueryResultModelIntegrationVendorWidgetModelIntegrationVendorWidget> (response, "response is ItemQueryResultModelIntegrationVendorWidgetModelIntegrationVendorWidget");
        }

        /// <summary>
        /// Test IntegrationVendorWidgetsQueryUserDefinedFieldDefinitions
        /// </summary>
        [Test]
        public void IntegrationVendorWidgetsQueryUserDefinedFieldDefinitionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiIntegrationCode = null;
            //string userName = null;
            //string secret = null;
            //string impersonationResourceId = null;
            //var response = instance.IntegrationVendorWidgetsQueryUserDefinedFieldDefinitions(apiIntegrationCode, userName, secret, impersonationResourceId);
            //Assert.IsInstanceOf<UserDefinedFieldInformationResultModel> (response, "response is UserDefinedFieldInformationResultModel");
        }

        /// <summary>
        /// Test IntegrationVendorWidgetsUpdateEntity
        /// </summary>
        [Test]
        public void IntegrationVendorWidgetsUpdateEntityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //IntegrationVendorWidgetModel restModelInput = null;
            //string apiIntegrationCode = null;
            //string userName = null;
            //string secret = null;
            //string impersonationResourceId = null;
            //var response = instance.IntegrationVendorWidgetsUpdateEntity(restModelInput, apiIntegrationCode, userName, secret, impersonationResourceId);
            //Assert.IsInstanceOf<OperationResultModel> (response, "response is OperationResultModel");
        }

        /// <summary>
        /// Test IntegrationVendorWidgetsUrlParameterQuery
        /// </summary>
        [Test]
        public void IntegrationVendorWidgetsUrlParameterQueryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string search = null;
            //string apiIntegrationCode = null;
            //string userName = null;
            //string secret = null;
            //string impersonationResourceId = null;
            //var response = instance.IntegrationVendorWidgetsUrlParameterQuery(search, apiIntegrationCode, userName, secret, impersonationResourceId);
            //Assert.IsInstanceOf<QueryActionResultIntegrationVendorWidgetModelIntegrationVendorWidget> (response, "response is QueryActionResultIntegrationVendorWidgetModelIntegrationVendorWidget");
        }

        /// <summary>
        /// Test IntegrationVendorWidgetsUrlParameterQueryCount
        /// </summary>
        [Test]
        public void IntegrationVendorWidgetsUrlParameterQueryCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string search = null;
            //string apiIntegrationCode = null;
            //string userName = null;
            //string secret = null;
            //string impersonationResourceId = null;
            //var response = instance.IntegrationVendorWidgetsUrlParameterQueryCount(search, apiIntegrationCode, userName, secret, impersonationResourceId);
            //Assert.IsInstanceOf<QueryCountResultModel> (response, "response is QueryCountResultModel");
        }

    }

}
