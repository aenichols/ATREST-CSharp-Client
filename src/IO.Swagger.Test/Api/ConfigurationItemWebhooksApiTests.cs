/*
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;using Object = IO.Swagger.Model.Object;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing ConfigurationItemWebhooksApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ConfigurationItemWebhooksApiTests
    {
        private ConfigurationItemWebhooksApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ConfigurationItemWebhooksApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ConfigurationItemWebhooksApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ConfigurationItemWebhooksApi
            //Assert.IsInstanceOfType(typeof(ConfigurationItemWebhooksApi), instance, "instance is a ConfigurationItemWebhooksApi");
        }


        /// <summary>
        /// Test ConfigurationItemWebhooksCreateEntity
        /// </summary>
        [Test]
        public void ConfigurationItemWebhooksCreateEntityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ConfigurationItemWebhookModel restModelInput = null;
            //string apiIntegrationCode = null;
            //string userName = null;
            //string secret = null;
            //string impersonationResourceId = null;
            //var response = instance.ConfigurationItemWebhooksCreateEntity(restModelInput, apiIntegrationCode, userName, secret, impersonationResourceId);
            //Assert.IsInstanceOf<OperationResultModel> (response, "response is OperationResultModel");
        }

        /// <summary>
        /// Test ConfigurationItemWebhooksDeleteEntity
        /// </summary>
        [Test]
        public void ConfigurationItemWebhooksDeleteEntityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //string apiIntegrationCode = null;
            //string userName = null;
            //string secret = null;
            //string impersonationResourceId = null;
            //var response = instance.ConfigurationItemWebhooksDeleteEntity(id, apiIntegrationCode, userName, secret, impersonationResourceId);
            //Assert.IsInstanceOf<OperationResultModel> (response, "response is OperationResultModel");
        }

        /// <summary>
        /// Test ConfigurationItemWebhooksPatchEntity
        /// </summary>
        [Test]
        public void ConfigurationItemWebhooksPatchEntityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ConfigurationItemWebhookModel restModelInput = null;
            //string apiIntegrationCode = null;
            //string userName = null;
            //string secret = null;
            //string impersonationResourceId = null;
            //var response = instance.ConfigurationItemWebhooksPatchEntity(restModelInput, apiIntegrationCode, userName, secret, impersonationResourceId);
            //Assert.IsInstanceOf<OperationResultModel> (response, "response is OperationResultModel");
        }

        /// <summary>
        /// Test ConfigurationItemWebhooksQuery
        /// </summary>
        [Test]
        public void ConfigurationItemWebhooksQueryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //QueryModel queryModel = null;
            //string apiIntegrationCode = null;
            //string userName = null;
            //string secret = null;
            //string impersonationResourceId = null;
            //var response = instance.ConfigurationItemWebhooksQuery(queryModel, apiIntegrationCode, userName, secret, impersonationResourceId);
            //Assert.IsInstanceOf<QueryActionResultConfigurationItemWebhookModelInstalledProductWebhook> (response, "response is QueryActionResultConfigurationItemWebhookModelInstalledProductWebhook");
        }

        /// <summary>
        /// Test ConfigurationItemWebhooksQueryCount
        /// </summary>
        [Test]
        public void ConfigurationItemWebhooksQueryCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //QueryModel queryModel = null;
            //string apiIntegrationCode = null;
            //string userName = null;
            //string secret = null;
            //string impersonationResourceId = null;
            //var response = instance.ConfigurationItemWebhooksQueryCount(queryModel, apiIntegrationCode, userName, secret, impersonationResourceId);
            //Assert.IsInstanceOf<QueryCountResultModel> (response, "response is QueryCountResultModel");
        }

        /// <summary>
        /// Test ConfigurationItemWebhooksQueryEntityInformation
        /// </summary>
        [Test]
        public void ConfigurationItemWebhooksQueryEntityInformationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiIntegrationCode = null;
            //string userName = null;
            //string secret = null;
            //string impersonationResourceId = null;
            //var response = instance.ConfigurationItemWebhooksQueryEntityInformation(apiIntegrationCode, userName, secret, impersonationResourceId);
            //Assert.IsInstanceOf<EntityInformationResultModel> (response, "response is EntityInformationResultModel");
        }

        /// <summary>
        /// Test ConfigurationItemWebhooksQueryFieldDefinitions
        /// </summary>
        [Test]
        public void ConfigurationItemWebhooksQueryFieldDefinitionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiIntegrationCode = null;
            //string userName = null;
            //string secret = null;
            //string impersonationResourceId = null;
            //var response = instance.ConfigurationItemWebhooksQueryFieldDefinitions(apiIntegrationCode, userName, secret, impersonationResourceId);
            //Assert.IsInstanceOf<FieldInformationResultModel> (response, "response is FieldInformationResultModel");
        }

        /// <summary>
        /// Test ConfigurationItemWebhooksQueryItem
        /// </summary>
        [Test]
        public void ConfigurationItemWebhooksQueryItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //string apiIntegrationCode = null;
            //string userName = null;
            //string secret = null;
            //string impersonationResourceId = null;
            //var response = instance.ConfigurationItemWebhooksQueryItem(id, apiIntegrationCode, userName, secret, impersonationResourceId);
            //Assert.IsInstanceOf<ItemQueryResultModelConfigurationItemWebhookModelInstalledProductWebhook> (response, "response is ItemQueryResultModelConfigurationItemWebhookModelInstalledProductWebhook");
        }

        /// <summary>
        /// Test ConfigurationItemWebhooksQueryUserDefinedFieldDefinitions
        /// </summary>
        [Test]
        public void ConfigurationItemWebhooksQueryUserDefinedFieldDefinitionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiIntegrationCode = null;
            //string userName = null;
            //string secret = null;
            //string impersonationResourceId = null;
            //var response = instance.ConfigurationItemWebhooksQueryUserDefinedFieldDefinitions(apiIntegrationCode, userName, secret, impersonationResourceId);
            //Assert.IsInstanceOf<UserDefinedFieldInformationResultModel> (response, "response is UserDefinedFieldInformationResultModel");
        }

        /// <summary>
        /// Test ConfigurationItemWebhooksUpdateEntity
        /// </summary>
        [Test]
        public void ConfigurationItemWebhooksUpdateEntityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ConfigurationItemWebhookModel restModelInput = null;
            //string apiIntegrationCode = null;
            //string userName = null;
            //string secret = null;
            //string impersonationResourceId = null;
            //var response = instance.ConfigurationItemWebhooksUpdateEntity(restModelInput, apiIntegrationCode, userName, secret, impersonationResourceId);
            //Assert.IsInstanceOf<OperationResultModel> (response, "response is OperationResultModel");
        }

        /// <summary>
        /// Test ConfigurationItemWebhooksUrlParameterQuery
        /// </summary>
        [Test]
        public void ConfigurationItemWebhooksUrlParameterQueryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string search = null;
            //string apiIntegrationCode = null;
            //string userName = null;
            //string secret = null;
            //string impersonationResourceId = null;
            //var response = instance.ConfigurationItemWebhooksUrlParameterQuery(search, apiIntegrationCode, userName, secret, impersonationResourceId);
            //Assert.IsInstanceOf<QueryActionResultConfigurationItemWebhookModelInstalledProductWebhook> (response, "response is QueryActionResultConfigurationItemWebhookModelInstalledProductWebhook");
        }

        /// <summary>
        /// Test ConfigurationItemWebhooksUrlParameterQueryCount
        /// </summary>
        [Test]
        public void ConfigurationItemWebhooksUrlParameterQueryCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string search = null;
            //string apiIntegrationCode = null;
            //string userName = null;
            //string secret = null;
            //string impersonationResourceId = null;
            //var response = instance.ConfigurationItemWebhooksUrlParameterQueryCount(search, apiIntegrationCode, userName, secret, impersonationResourceId);
            //Assert.IsInstanceOf<QueryCountResultModel> (response, "response is QueryCountResultModel");
        }

    }

}
