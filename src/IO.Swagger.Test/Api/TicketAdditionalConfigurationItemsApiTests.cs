/*
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;using Object = IO.Swagger.Model.Object;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing TicketAdditionalConfigurationItemsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TicketAdditionalConfigurationItemsApiTests
    {
        private TicketAdditionalConfigurationItemsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TicketAdditionalConfigurationItemsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TicketAdditionalConfigurationItemsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TicketAdditionalConfigurationItemsApi
            //Assert.IsInstanceOfType(typeof(TicketAdditionalConfigurationItemsApi), instance, "instance is a TicketAdditionalConfigurationItemsApi");
        }


        /// <summary>
        /// Test TicketAdditionalConfigurationItemsQuery
        /// </summary>
        [Test]
        public void TicketAdditionalConfigurationItemsQueryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //QueryModel queryModel = null;
            //string apiIntegrationCode = null;
            //string userName = null;
            //string secret = null;
            //string impersonationResourceId = null;
            //var response = instance.TicketAdditionalConfigurationItemsQuery(queryModel, apiIntegrationCode, userName, secret, impersonationResourceId);
            //Assert.IsInstanceOf<QueryActionResultTicketAdditionalConfigurationItemModelTicketAdditionalInstalledProduct> (response, "response is QueryActionResultTicketAdditionalConfigurationItemModelTicketAdditionalInstalledProduct");
        }

        /// <summary>
        /// Test TicketAdditionalConfigurationItemsQueryCount
        /// </summary>
        [Test]
        public void TicketAdditionalConfigurationItemsQueryCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //QueryModel queryModel = null;
            //string apiIntegrationCode = null;
            //string userName = null;
            //string secret = null;
            //string impersonationResourceId = null;
            //var response = instance.TicketAdditionalConfigurationItemsQueryCount(queryModel, apiIntegrationCode, userName, secret, impersonationResourceId);
            //Assert.IsInstanceOf<QueryCountResultModel> (response, "response is QueryCountResultModel");
        }

        /// <summary>
        /// Test TicketAdditionalConfigurationItemsQueryEntityInformation
        /// </summary>
        [Test]
        public void TicketAdditionalConfigurationItemsQueryEntityInformationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiIntegrationCode = null;
            //string userName = null;
            //string secret = null;
            //string impersonationResourceId = null;
            //var response = instance.TicketAdditionalConfigurationItemsQueryEntityInformation(apiIntegrationCode, userName, secret, impersonationResourceId);
            //Assert.IsInstanceOf<EntityInformationResultModel> (response, "response is EntityInformationResultModel");
        }

        /// <summary>
        /// Test TicketAdditionalConfigurationItemsQueryFieldDefinitions
        /// </summary>
        [Test]
        public void TicketAdditionalConfigurationItemsQueryFieldDefinitionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiIntegrationCode = null;
            //string userName = null;
            //string secret = null;
            //string impersonationResourceId = null;
            //var response = instance.TicketAdditionalConfigurationItemsQueryFieldDefinitions(apiIntegrationCode, userName, secret, impersonationResourceId);
            //Assert.IsInstanceOf<FieldInformationResultModel> (response, "response is FieldInformationResultModel");
        }

        /// <summary>
        /// Test TicketAdditionalConfigurationItemsQueryItem
        /// </summary>
        [Test]
        public void TicketAdditionalConfigurationItemsQueryItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //string apiIntegrationCode = null;
            //string userName = null;
            //string secret = null;
            //string impersonationResourceId = null;
            //var response = instance.TicketAdditionalConfigurationItemsQueryItem(id, apiIntegrationCode, userName, secret, impersonationResourceId);
            //Assert.IsInstanceOf<ItemQueryResultModelTicketAdditionalConfigurationItemModelTicketAdditionalInstalledProduct> (response, "response is ItemQueryResultModelTicketAdditionalConfigurationItemModelTicketAdditionalInstalledProduct");
        }

        /// <summary>
        /// Test TicketAdditionalConfigurationItemsQueryUserDefinedFieldDefinitions
        /// </summary>
        [Test]
        public void TicketAdditionalConfigurationItemsQueryUserDefinedFieldDefinitionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiIntegrationCode = null;
            //string userName = null;
            //string secret = null;
            //string impersonationResourceId = null;
            //var response = instance.TicketAdditionalConfigurationItemsQueryUserDefinedFieldDefinitions(apiIntegrationCode, userName, secret, impersonationResourceId);
            //Assert.IsInstanceOf<UserDefinedFieldInformationResultModel> (response, "response is UserDefinedFieldInformationResultModel");
        }

        /// <summary>
        /// Test TicketAdditionalConfigurationItemsUrlParameterQuery
        /// </summary>
        [Test]
        public void TicketAdditionalConfigurationItemsUrlParameterQueryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string search = null;
            //string apiIntegrationCode = null;
            //string userName = null;
            //string secret = null;
            //string impersonationResourceId = null;
            //var response = instance.TicketAdditionalConfigurationItemsUrlParameterQuery(search, apiIntegrationCode, userName, secret, impersonationResourceId);
            //Assert.IsInstanceOf<QueryActionResultTicketAdditionalConfigurationItemModelTicketAdditionalInstalledProduct> (response, "response is QueryActionResultTicketAdditionalConfigurationItemModelTicketAdditionalInstalledProduct");
        }

        /// <summary>
        /// Test TicketAdditionalConfigurationItemsUrlParameterQueryCount
        /// </summary>
        [Test]
        public void TicketAdditionalConfigurationItemsUrlParameterQueryCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string search = null;
            //string apiIntegrationCode = null;
            //string userName = null;
            //string secret = null;
            //string impersonationResourceId = null;
            //var response = instance.TicketAdditionalConfigurationItemsUrlParameterQueryCount(search, apiIntegrationCode, userName, secret, impersonationResourceId);
            //Assert.IsInstanceOf<QueryCountResultModel> (response, "response is QueryCountResultModel");
        }

    }

}
