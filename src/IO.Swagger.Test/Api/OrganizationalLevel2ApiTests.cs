/*
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;using Object = IO.Swagger.Model.Object;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing OrganizationalLevel2Api
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class OrganizationalLevel2ApiTests
    {
        private OrganizationalLevel2Api instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new OrganizationalLevel2Api();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of OrganizationalLevel2Api
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' OrganizationalLevel2Api
            //Assert.IsInstanceOfType(typeof(OrganizationalLevel2Api), instance, "instance is a OrganizationalLevel2Api");
        }


        /// <summary>
        /// Test OrganizationalLevel2CreateEntity
        /// </summary>
        [Test]
        public void OrganizationalLevel2CreateEntityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //OrganizationalLevel2Model restModelInput = null;
            //string apiIntegrationCode = null;
            //string userName = null;
            //string secret = null;
            //string impersonationResourceId = null;
            //var response = instance.OrganizationalLevel2CreateEntity(restModelInput, apiIntegrationCode, userName, secret, impersonationResourceId);
            //Assert.IsInstanceOf<OperationResultModel> (response, "response is OperationResultModel");
        }

        /// <summary>
        /// Test OrganizationalLevel2PatchEntity
        /// </summary>
        [Test]
        public void OrganizationalLevel2PatchEntityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //OrganizationalLevel2Model restModelInput = null;
            //string apiIntegrationCode = null;
            //string userName = null;
            //string secret = null;
            //string impersonationResourceId = null;
            //var response = instance.OrganizationalLevel2PatchEntity(restModelInput, apiIntegrationCode, userName, secret, impersonationResourceId);
            //Assert.IsInstanceOf<OperationResultModel> (response, "response is OperationResultModel");
        }

        /// <summary>
        /// Test OrganizationalLevel2Query
        /// </summary>
        [Test]
        public void OrganizationalLevel2QueryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //QueryModel queryModel = null;
            //string apiIntegrationCode = null;
            //string userName = null;
            //string secret = null;
            //string impersonationResourceId = null;
            //var response = instance.OrganizationalLevel2Query(queryModel, apiIntegrationCode, userName, secret, impersonationResourceId);
            //Assert.IsInstanceOf<QueryActionResultOrganizationalLevel2ModelBusinessSubdivision> (response, "response is QueryActionResultOrganizationalLevel2ModelBusinessSubdivision");
        }

        /// <summary>
        /// Test OrganizationalLevel2QueryCount
        /// </summary>
        [Test]
        public void OrganizationalLevel2QueryCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //QueryModel queryModel = null;
            //string apiIntegrationCode = null;
            //string userName = null;
            //string secret = null;
            //string impersonationResourceId = null;
            //var response = instance.OrganizationalLevel2QueryCount(queryModel, apiIntegrationCode, userName, secret, impersonationResourceId);
            //Assert.IsInstanceOf<QueryCountResultModel> (response, "response is QueryCountResultModel");
        }

        /// <summary>
        /// Test OrganizationalLevel2QueryEntityInformation
        /// </summary>
        [Test]
        public void OrganizationalLevel2QueryEntityInformationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiIntegrationCode = null;
            //string userName = null;
            //string secret = null;
            //string impersonationResourceId = null;
            //var response = instance.OrganizationalLevel2QueryEntityInformation(apiIntegrationCode, userName, secret, impersonationResourceId);
            //Assert.IsInstanceOf<EntityInformationResultModel> (response, "response is EntityInformationResultModel");
        }

        /// <summary>
        /// Test OrganizationalLevel2QueryFieldDefinitions
        /// </summary>
        [Test]
        public void OrganizationalLevel2QueryFieldDefinitionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiIntegrationCode = null;
            //string userName = null;
            //string secret = null;
            //string impersonationResourceId = null;
            //var response = instance.OrganizationalLevel2QueryFieldDefinitions(apiIntegrationCode, userName, secret, impersonationResourceId);
            //Assert.IsInstanceOf<FieldInformationResultModel> (response, "response is FieldInformationResultModel");
        }

        /// <summary>
        /// Test OrganizationalLevel2QueryItem
        /// </summary>
        [Test]
        public void OrganizationalLevel2QueryItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //string apiIntegrationCode = null;
            //string userName = null;
            //string secret = null;
            //string impersonationResourceId = null;
            //var response = instance.OrganizationalLevel2QueryItem(id, apiIntegrationCode, userName, secret, impersonationResourceId);
            //Assert.IsInstanceOf<ItemQueryResultModelOrganizationalLevel2ModelBusinessSubdivision> (response, "response is ItemQueryResultModelOrganizationalLevel2ModelBusinessSubdivision");
        }

        /// <summary>
        /// Test OrganizationalLevel2QueryUserDefinedFieldDefinitions
        /// </summary>
        [Test]
        public void OrganizationalLevel2QueryUserDefinedFieldDefinitionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiIntegrationCode = null;
            //string userName = null;
            //string secret = null;
            //string impersonationResourceId = null;
            //var response = instance.OrganizationalLevel2QueryUserDefinedFieldDefinitions(apiIntegrationCode, userName, secret, impersonationResourceId);
            //Assert.IsInstanceOf<UserDefinedFieldInformationResultModel> (response, "response is UserDefinedFieldInformationResultModel");
        }

        /// <summary>
        /// Test OrganizationalLevel2UpdateEntity
        /// </summary>
        [Test]
        public void OrganizationalLevel2UpdateEntityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //OrganizationalLevel2Model restModelInput = null;
            //string apiIntegrationCode = null;
            //string userName = null;
            //string secret = null;
            //string impersonationResourceId = null;
            //var response = instance.OrganizationalLevel2UpdateEntity(restModelInput, apiIntegrationCode, userName, secret, impersonationResourceId);
            //Assert.IsInstanceOf<OperationResultModel> (response, "response is OperationResultModel");
        }

        /// <summary>
        /// Test OrganizationalLevel2UrlParameterQuery
        /// </summary>
        [Test]
        public void OrganizationalLevel2UrlParameterQueryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string search = null;
            //string apiIntegrationCode = null;
            //string userName = null;
            //string secret = null;
            //string impersonationResourceId = null;
            //var response = instance.OrganizationalLevel2UrlParameterQuery(search, apiIntegrationCode, userName, secret, impersonationResourceId);
            //Assert.IsInstanceOf<QueryActionResultOrganizationalLevel2ModelBusinessSubdivision> (response, "response is QueryActionResultOrganizationalLevel2ModelBusinessSubdivision");
        }

        /// <summary>
        /// Test OrganizationalLevel2UrlParameterQueryCount
        /// </summary>
        [Test]
        public void OrganizationalLevel2UrlParameterQueryCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string search = null;
            //string apiIntegrationCode = null;
            //string userName = null;
            //string secret = null;
            //string impersonationResourceId = null;
            //var response = instance.OrganizationalLevel2UrlParameterQueryCount(search, apiIntegrationCode, userName, secret, impersonationResourceId);
            //Assert.IsInstanceOf<QueryCountResultModel> (response, "response is QueryCountResultModel");
        }

    }

}
