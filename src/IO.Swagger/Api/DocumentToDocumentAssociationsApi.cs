/*
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;using Object = IO.Swagger.Model.Object;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDocumentToDocumentAssociationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryModel"></param>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation</returns>
        QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation DocumentToDocumentAssociationsQuery (QueryModel queryModel, string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryModel"></param>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>ApiResponse of QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation</returns>
        ApiResponse<QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation> DocumentToDocumentAssociationsQueryWithHttpInfo (QueryModel queryModel, string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null);
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryModel"></param>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>QueryCountResultModel</returns>
        QueryCountResultModel DocumentToDocumentAssociationsQueryCount (QueryModel queryModel, string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryModel"></param>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>ApiResponse of QueryCountResultModel</returns>
        ApiResponse<QueryCountResultModel> DocumentToDocumentAssociationsQueryCountWithHttpInfo (QueryModel queryModel, string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null);
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>EntityInformationResultModel</returns>
        EntityInformationResultModel DocumentToDocumentAssociationsQueryEntityInformation (string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>ApiResponse of EntityInformationResultModel</returns>
        ApiResponse<EntityInformationResultModel> DocumentToDocumentAssociationsQueryEntityInformationWithHttpInfo (string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null);
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>FieldInformationResultModel</returns>
        FieldInformationResultModel DocumentToDocumentAssociationsQueryFieldDefinitions (string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>ApiResponse of FieldInformationResultModel</returns>
        ApiResponse<FieldInformationResultModel> DocumentToDocumentAssociationsQueryFieldDefinitionsWithHttpInfo (string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null);
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>ItemQueryResultModelDocumentToDocumentAssociationModelDocumentToDocumentAssociation</returns>
        ItemQueryResultModelDocumentToDocumentAssociationModelDocumentToDocumentAssociation DocumentToDocumentAssociationsQueryItem (long? id, string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>ApiResponse of ItemQueryResultModelDocumentToDocumentAssociationModelDocumentToDocumentAssociation</returns>
        ApiResponse<ItemQueryResultModelDocumentToDocumentAssociationModelDocumentToDocumentAssociation> DocumentToDocumentAssociationsQueryItemWithHttpInfo (long? id, string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null);
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>UserDefinedFieldInformationResultModel</returns>
        UserDefinedFieldInformationResultModel DocumentToDocumentAssociationsQueryUserDefinedFieldDefinitions (string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>ApiResponse of UserDefinedFieldInformationResultModel</returns>
        ApiResponse<UserDefinedFieldInformationResultModel> DocumentToDocumentAssociationsQueryUserDefinedFieldDefinitionsWithHttpInfo (string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null);
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"></param>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation</returns>
        QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation DocumentToDocumentAssociationsUrlParameterQuery (string search, string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"></param>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>ApiResponse of QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation</returns>
        ApiResponse<QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation> DocumentToDocumentAssociationsUrlParameterQueryWithHttpInfo (string search, string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null);
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"></param>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>QueryCountResultModel</returns>
        QueryCountResultModel DocumentToDocumentAssociationsUrlParameterQueryCount (string search, string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"></param>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>ApiResponse of QueryCountResultModel</returns>
        ApiResponse<QueryCountResultModel> DocumentToDocumentAssociationsUrlParameterQueryCountWithHttpInfo (string search, string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryModel"></param>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>Task of QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation</returns>
        System.Threading.Tasks.Task<QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation> DocumentToDocumentAssociationsQueryAsync (QueryModel queryModel, string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryModel"></param>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>Task of ApiResponse (QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation>> DocumentToDocumentAssociationsQueryAsyncWithHttpInfo (QueryModel queryModel, string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null);
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryModel"></param>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>Task of QueryCountResultModel</returns>
        System.Threading.Tasks.Task<QueryCountResultModel> DocumentToDocumentAssociationsQueryCountAsync (QueryModel queryModel, string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryModel"></param>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>Task of ApiResponse (QueryCountResultModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueryCountResultModel>> DocumentToDocumentAssociationsQueryCountAsyncWithHttpInfo (QueryModel queryModel, string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null);
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>Task of EntityInformationResultModel</returns>
        System.Threading.Tasks.Task<EntityInformationResultModel> DocumentToDocumentAssociationsQueryEntityInformationAsync (string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>Task of ApiResponse (EntityInformationResultModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityInformationResultModel>> DocumentToDocumentAssociationsQueryEntityInformationAsyncWithHttpInfo (string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null);
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>Task of FieldInformationResultModel</returns>
        System.Threading.Tasks.Task<FieldInformationResultModel> DocumentToDocumentAssociationsQueryFieldDefinitionsAsync (string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>Task of ApiResponse (FieldInformationResultModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldInformationResultModel>> DocumentToDocumentAssociationsQueryFieldDefinitionsAsyncWithHttpInfo (string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null);
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>Task of ItemQueryResultModelDocumentToDocumentAssociationModelDocumentToDocumentAssociation</returns>
        System.Threading.Tasks.Task<ItemQueryResultModelDocumentToDocumentAssociationModelDocumentToDocumentAssociation> DocumentToDocumentAssociationsQueryItemAsync (long? id, string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>Task of ApiResponse (ItemQueryResultModelDocumentToDocumentAssociationModelDocumentToDocumentAssociation)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemQueryResultModelDocumentToDocumentAssociationModelDocumentToDocumentAssociation>> DocumentToDocumentAssociationsQueryItemAsyncWithHttpInfo (long? id, string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null);
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>Task of UserDefinedFieldInformationResultModel</returns>
        System.Threading.Tasks.Task<UserDefinedFieldInformationResultModel> DocumentToDocumentAssociationsQueryUserDefinedFieldDefinitionsAsync (string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>Task of ApiResponse (UserDefinedFieldInformationResultModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserDefinedFieldInformationResultModel>> DocumentToDocumentAssociationsQueryUserDefinedFieldDefinitionsAsyncWithHttpInfo (string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null);
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"></param>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>Task of QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation</returns>
        System.Threading.Tasks.Task<QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation> DocumentToDocumentAssociationsUrlParameterQueryAsync (string search, string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"></param>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>Task of ApiResponse (QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation>> DocumentToDocumentAssociationsUrlParameterQueryAsyncWithHttpInfo (string search, string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null);
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"></param>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>Task of QueryCountResultModel</returns>
        System.Threading.Tasks.Task<QueryCountResultModel> DocumentToDocumentAssociationsUrlParameterQueryCountAsync (string search, string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"></param>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>Task of ApiResponse (QueryCountResultModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueryCountResultModel>> DocumentToDocumentAssociationsUrlParameterQueryCountAsyncWithHttpInfo (string search, string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DocumentToDocumentAssociationsApi : IDocumentToDocumentAssociationsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentToDocumentAssociationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DocumentToDocumentAssociationsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentToDocumentAssociationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DocumentToDocumentAssociationsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryModel"></param>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation</returns>
        public QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation DocumentToDocumentAssociationsQuery (QueryModel queryModel, string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null)
        {
             ApiResponse<QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation> localVarResponse = DocumentToDocumentAssociationsQueryWithHttpInfo(queryModel, apiIntegrationCode, userName, secret, impersonationResourceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryModel"></param>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>ApiResponse of QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation</returns>
        public ApiResponse< QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation > DocumentToDocumentAssociationsQueryWithHttpInfo (QueryModel queryModel, string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null)
        {
            // verify the required parameter 'queryModel' is set
            if (queryModel == null)
                throw new ApiException(400, "Missing required parameter 'queryModel' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsQuery");
            // verify the required parameter 'apiIntegrationCode' is set
            if (apiIntegrationCode == null)
                throw new ApiException(400, "Missing required parameter 'apiIntegrationCode' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsQuery");
            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new ApiException(400, "Missing required parameter 'userName' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsQuery");
            // verify the required parameter 'secret' is set
            if (secret == null)
                throw new ApiException(400, "Missing required parameter 'secret' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsQuery");

            var localVarPath = "/V1.0/DocumentToDocumentAssociations/query";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiIntegrationCode != null) localVarHeaderParams.Add("ApiIntegrationCode", this.Configuration.ApiClient.ParameterToString(apiIntegrationCode)); // header parameter
            if (userName != null) localVarHeaderParams.Add("UserName", this.Configuration.ApiClient.ParameterToString(userName)); // header parameter
            if (secret != null) localVarHeaderParams.Add("Secret", this.Configuration.ApiClient.ParameterToString(secret)); // header parameter
            if (impersonationResourceId != null) localVarHeaderParams.Add("ImpersonationResourceId", this.Configuration.ApiClient.ParameterToString(impersonationResourceId)); // header parameter
            if (queryModel != null && queryModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(queryModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = queryModel; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentToDocumentAssociationsQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryModel"></param>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>Task of QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation</returns>
        public async System.Threading.Tasks.Task<QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation> DocumentToDocumentAssociationsQueryAsync (QueryModel queryModel, string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null)
        {
             ApiResponse<QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation> localVarResponse = await DocumentToDocumentAssociationsQueryAsyncWithHttpInfo(queryModel, apiIntegrationCode, userName, secret, impersonationResourceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryModel"></param>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>Task of ApiResponse (QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation>> DocumentToDocumentAssociationsQueryAsyncWithHttpInfo (QueryModel queryModel, string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null)
        {
            // verify the required parameter 'queryModel' is set
            if (queryModel == null)
                throw new ApiException(400, "Missing required parameter 'queryModel' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsQuery");
            // verify the required parameter 'apiIntegrationCode' is set
            if (apiIntegrationCode == null)
                throw new ApiException(400, "Missing required parameter 'apiIntegrationCode' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsQuery");
            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new ApiException(400, "Missing required parameter 'userName' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsQuery");
            // verify the required parameter 'secret' is set
            if (secret == null)
                throw new ApiException(400, "Missing required parameter 'secret' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsQuery");

            var localVarPath = "/V1.0/DocumentToDocumentAssociations/query";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiIntegrationCode != null) localVarHeaderParams.Add("ApiIntegrationCode", this.Configuration.ApiClient.ParameterToString(apiIntegrationCode)); // header parameter
            if (userName != null) localVarHeaderParams.Add("UserName", this.Configuration.ApiClient.ParameterToString(userName)); // header parameter
            if (secret != null) localVarHeaderParams.Add("Secret", this.Configuration.ApiClient.ParameterToString(secret)); // header parameter
            if (impersonationResourceId != null) localVarHeaderParams.Add("ImpersonationResourceId", this.Configuration.ApiClient.ParameterToString(impersonationResourceId)); // header parameter
            if (queryModel != null && queryModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(queryModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = queryModel; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentToDocumentAssociationsQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryModel"></param>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>QueryCountResultModel</returns>
        public QueryCountResultModel DocumentToDocumentAssociationsQueryCount (QueryModel queryModel, string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null)
        {
             ApiResponse<QueryCountResultModel> localVarResponse = DocumentToDocumentAssociationsQueryCountWithHttpInfo(queryModel, apiIntegrationCode, userName, secret, impersonationResourceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryModel"></param>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>ApiResponse of QueryCountResultModel</returns>
        public ApiResponse< QueryCountResultModel > DocumentToDocumentAssociationsQueryCountWithHttpInfo (QueryModel queryModel, string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null)
        {
            // verify the required parameter 'queryModel' is set
            if (queryModel == null)
                throw new ApiException(400, "Missing required parameter 'queryModel' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsQueryCount");
            // verify the required parameter 'apiIntegrationCode' is set
            if (apiIntegrationCode == null)
                throw new ApiException(400, "Missing required parameter 'apiIntegrationCode' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsQueryCount");
            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new ApiException(400, "Missing required parameter 'userName' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsQueryCount");
            // verify the required parameter 'secret' is set
            if (secret == null)
                throw new ApiException(400, "Missing required parameter 'secret' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsQueryCount");

            var localVarPath = "/V1.0/DocumentToDocumentAssociations/query/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiIntegrationCode != null) localVarHeaderParams.Add("ApiIntegrationCode", this.Configuration.ApiClient.ParameterToString(apiIntegrationCode)); // header parameter
            if (userName != null) localVarHeaderParams.Add("UserName", this.Configuration.ApiClient.ParameterToString(userName)); // header parameter
            if (secret != null) localVarHeaderParams.Add("Secret", this.Configuration.ApiClient.ParameterToString(secret)); // header parameter
            if (impersonationResourceId != null) localVarHeaderParams.Add("ImpersonationResourceId", this.Configuration.ApiClient.ParameterToString(impersonationResourceId)); // header parameter
            if (queryModel != null && queryModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(queryModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = queryModel; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentToDocumentAssociationsQueryCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueryCountResultModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QueryCountResultModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueryCountResultModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryModel"></param>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>Task of QueryCountResultModel</returns>
        public async System.Threading.Tasks.Task<QueryCountResultModel> DocumentToDocumentAssociationsQueryCountAsync (QueryModel queryModel, string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null)
        {
             ApiResponse<QueryCountResultModel> localVarResponse = await DocumentToDocumentAssociationsQueryCountAsyncWithHttpInfo(queryModel, apiIntegrationCode, userName, secret, impersonationResourceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryModel"></param>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>Task of ApiResponse (QueryCountResultModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QueryCountResultModel>> DocumentToDocumentAssociationsQueryCountAsyncWithHttpInfo (QueryModel queryModel, string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null)
        {
            // verify the required parameter 'queryModel' is set
            if (queryModel == null)
                throw new ApiException(400, "Missing required parameter 'queryModel' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsQueryCount");
            // verify the required parameter 'apiIntegrationCode' is set
            if (apiIntegrationCode == null)
                throw new ApiException(400, "Missing required parameter 'apiIntegrationCode' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsQueryCount");
            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new ApiException(400, "Missing required parameter 'userName' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsQueryCount");
            // verify the required parameter 'secret' is set
            if (secret == null)
                throw new ApiException(400, "Missing required parameter 'secret' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsQueryCount");

            var localVarPath = "/V1.0/DocumentToDocumentAssociations/query/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiIntegrationCode != null) localVarHeaderParams.Add("ApiIntegrationCode", this.Configuration.ApiClient.ParameterToString(apiIntegrationCode)); // header parameter
            if (userName != null) localVarHeaderParams.Add("UserName", this.Configuration.ApiClient.ParameterToString(userName)); // header parameter
            if (secret != null) localVarHeaderParams.Add("Secret", this.Configuration.ApiClient.ParameterToString(secret)); // header parameter
            if (impersonationResourceId != null) localVarHeaderParams.Add("ImpersonationResourceId", this.Configuration.ApiClient.ParameterToString(impersonationResourceId)); // header parameter
            if (queryModel != null && queryModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(queryModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = queryModel; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentToDocumentAssociationsQueryCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueryCountResultModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QueryCountResultModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueryCountResultModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>EntityInformationResultModel</returns>
        public EntityInformationResultModel DocumentToDocumentAssociationsQueryEntityInformation (string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null)
        {
             ApiResponse<EntityInformationResultModel> localVarResponse = DocumentToDocumentAssociationsQueryEntityInformationWithHttpInfo(apiIntegrationCode, userName, secret, impersonationResourceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>ApiResponse of EntityInformationResultModel</returns>
        public ApiResponse< EntityInformationResultModel > DocumentToDocumentAssociationsQueryEntityInformationWithHttpInfo (string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null)
        {
            // verify the required parameter 'apiIntegrationCode' is set
            if (apiIntegrationCode == null)
                throw new ApiException(400, "Missing required parameter 'apiIntegrationCode' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsQueryEntityInformation");
            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new ApiException(400, "Missing required parameter 'userName' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsQueryEntityInformation");
            // verify the required parameter 'secret' is set
            if (secret == null)
                throw new ApiException(400, "Missing required parameter 'secret' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsQueryEntityInformation");

            var localVarPath = "/V1.0/DocumentToDocumentAssociations/entityInformation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiIntegrationCode != null) localVarHeaderParams.Add("ApiIntegrationCode", this.Configuration.ApiClient.ParameterToString(apiIntegrationCode)); // header parameter
            if (userName != null) localVarHeaderParams.Add("UserName", this.Configuration.ApiClient.ParameterToString(userName)); // header parameter
            if (secret != null) localVarHeaderParams.Add("Secret", this.Configuration.ApiClient.ParameterToString(secret)); // header parameter
            if (impersonationResourceId != null) localVarHeaderParams.Add("ImpersonationResourceId", this.Configuration.ApiClient.ParameterToString(impersonationResourceId)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentToDocumentAssociationsQueryEntityInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityInformationResultModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityInformationResultModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityInformationResultModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>Task of EntityInformationResultModel</returns>
        public async System.Threading.Tasks.Task<EntityInformationResultModel> DocumentToDocumentAssociationsQueryEntityInformationAsync (string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null)
        {
             ApiResponse<EntityInformationResultModel> localVarResponse = await DocumentToDocumentAssociationsQueryEntityInformationAsyncWithHttpInfo(apiIntegrationCode, userName, secret, impersonationResourceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>Task of ApiResponse (EntityInformationResultModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntityInformationResultModel>> DocumentToDocumentAssociationsQueryEntityInformationAsyncWithHttpInfo (string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null)
        {
            // verify the required parameter 'apiIntegrationCode' is set
            if (apiIntegrationCode == null)
                throw new ApiException(400, "Missing required parameter 'apiIntegrationCode' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsQueryEntityInformation");
            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new ApiException(400, "Missing required parameter 'userName' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsQueryEntityInformation");
            // verify the required parameter 'secret' is set
            if (secret == null)
                throw new ApiException(400, "Missing required parameter 'secret' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsQueryEntityInformation");

            var localVarPath = "/V1.0/DocumentToDocumentAssociations/entityInformation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiIntegrationCode != null) localVarHeaderParams.Add("ApiIntegrationCode", this.Configuration.ApiClient.ParameterToString(apiIntegrationCode)); // header parameter
            if (userName != null) localVarHeaderParams.Add("UserName", this.Configuration.ApiClient.ParameterToString(userName)); // header parameter
            if (secret != null) localVarHeaderParams.Add("Secret", this.Configuration.ApiClient.ParameterToString(secret)); // header parameter
            if (impersonationResourceId != null) localVarHeaderParams.Add("ImpersonationResourceId", this.Configuration.ApiClient.ParameterToString(impersonationResourceId)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentToDocumentAssociationsQueryEntityInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityInformationResultModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityInformationResultModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityInformationResultModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>FieldInformationResultModel</returns>
        public FieldInformationResultModel DocumentToDocumentAssociationsQueryFieldDefinitions (string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null)
        {
             ApiResponse<FieldInformationResultModel> localVarResponse = DocumentToDocumentAssociationsQueryFieldDefinitionsWithHttpInfo(apiIntegrationCode, userName, secret, impersonationResourceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>ApiResponse of FieldInformationResultModel</returns>
        public ApiResponse< FieldInformationResultModel > DocumentToDocumentAssociationsQueryFieldDefinitionsWithHttpInfo (string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null)
        {
            // verify the required parameter 'apiIntegrationCode' is set
            if (apiIntegrationCode == null)
                throw new ApiException(400, "Missing required parameter 'apiIntegrationCode' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsQueryFieldDefinitions");
            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new ApiException(400, "Missing required parameter 'userName' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsQueryFieldDefinitions");
            // verify the required parameter 'secret' is set
            if (secret == null)
                throw new ApiException(400, "Missing required parameter 'secret' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsQueryFieldDefinitions");

            var localVarPath = "/V1.0/DocumentToDocumentAssociations/entityInformation/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiIntegrationCode != null) localVarHeaderParams.Add("ApiIntegrationCode", this.Configuration.ApiClient.ParameterToString(apiIntegrationCode)); // header parameter
            if (userName != null) localVarHeaderParams.Add("UserName", this.Configuration.ApiClient.ParameterToString(userName)); // header parameter
            if (secret != null) localVarHeaderParams.Add("Secret", this.Configuration.ApiClient.ParameterToString(secret)); // header parameter
            if (impersonationResourceId != null) localVarHeaderParams.Add("ImpersonationResourceId", this.Configuration.ApiClient.ParameterToString(impersonationResourceId)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentToDocumentAssociationsQueryFieldDefinitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldInformationResultModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldInformationResultModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldInformationResultModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>Task of FieldInformationResultModel</returns>
        public async System.Threading.Tasks.Task<FieldInformationResultModel> DocumentToDocumentAssociationsQueryFieldDefinitionsAsync (string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null)
        {
             ApiResponse<FieldInformationResultModel> localVarResponse = await DocumentToDocumentAssociationsQueryFieldDefinitionsAsyncWithHttpInfo(apiIntegrationCode, userName, secret, impersonationResourceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>Task of ApiResponse (FieldInformationResultModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldInformationResultModel>> DocumentToDocumentAssociationsQueryFieldDefinitionsAsyncWithHttpInfo (string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null)
        {
            // verify the required parameter 'apiIntegrationCode' is set
            if (apiIntegrationCode == null)
                throw new ApiException(400, "Missing required parameter 'apiIntegrationCode' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsQueryFieldDefinitions");
            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new ApiException(400, "Missing required parameter 'userName' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsQueryFieldDefinitions");
            // verify the required parameter 'secret' is set
            if (secret == null)
                throw new ApiException(400, "Missing required parameter 'secret' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsQueryFieldDefinitions");

            var localVarPath = "/V1.0/DocumentToDocumentAssociations/entityInformation/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiIntegrationCode != null) localVarHeaderParams.Add("ApiIntegrationCode", this.Configuration.ApiClient.ParameterToString(apiIntegrationCode)); // header parameter
            if (userName != null) localVarHeaderParams.Add("UserName", this.Configuration.ApiClient.ParameterToString(userName)); // header parameter
            if (secret != null) localVarHeaderParams.Add("Secret", this.Configuration.ApiClient.ParameterToString(secret)); // header parameter
            if (impersonationResourceId != null) localVarHeaderParams.Add("ImpersonationResourceId", this.Configuration.ApiClient.ParameterToString(impersonationResourceId)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentToDocumentAssociationsQueryFieldDefinitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldInformationResultModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldInformationResultModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldInformationResultModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>ItemQueryResultModelDocumentToDocumentAssociationModelDocumentToDocumentAssociation</returns>
        public ItemQueryResultModelDocumentToDocumentAssociationModelDocumentToDocumentAssociation DocumentToDocumentAssociationsQueryItem (long? id, string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null)
        {
             ApiResponse<ItemQueryResultModelDocumentToDocumentAssociationModelDocumentToDocumentAssociation> localVarResponse = DocumentToDocumentAssociationsQueryItemWithHttpInfo(id, apiIntegrationCode, userName, secret, impersonationResourceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>ApiResponse of ItemQueryResultModelDocumentToDocumentAssociationModelDocumentToDocumentAssociation</returns>
        public ApiResponse< ItemQueryResultModelDocumentToDocumentAssociationModelDocumentToDocumentAssociation > DocumentToDocumentAssociationsQueryItemWithHttpInfo (long? id, string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsQueryItem");
            // verify the required parameter 'apiIntegrationCode' is set
            if (apiIntegrationCode == null)
                throw new ApiException(400, "Missing required parameter 'apiIntegrationCode' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsQueryItem");
            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new ApiException(400, "Missing required parameter 'userName' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsQueryItem");
            // verify the required parameter 'secret' is set
            if (secret == null)
                throw new ApiException(400, "Missing required parameter 'secret' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsQueryItem");

            var localVarPath = "/V1.0/DocumentToDocumentAssociations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiIntegrationCode != null) localVarHeaderParams.Add("ApiIntegrationCode", this.Configuration.ApiClient.ParameterToString(apiIntegrationCode)); // header parameter
            if (userName != null) localVarHeaderParams.Add("UserName", this.Configuration.ApiClient.ParameterToString(userName)); // header parameter
            if (secret != null) localVarHeaderParams.Add("Secret", this.Configuration.ApiClient.ParameterToString(secret)); // header parameter
            if (impersonationResourceId != null) localVarHeaderParams.Add("ImpersonationResourceId", this.Configuration.ApiClient.ParameterToString(impersonationResourceId)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentToDocumentAssociationsQueryItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemQueryResultModelDocumentToDocumentAssociationModelDocumentToDocumentAssociation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemQueryResultModelDocumentToDocumentAssociationModelDocumentToDocumentAssociation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemQueryResultModelDocumentToDocumentAssociationModelDocumentToDocumentAssociation)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>Task of ItemQueryResultModelDocumentToDocumentAssociationModelDocumentToDocumentAssociation</returns>
        public async System.Threading.Tasks.Task<ItemQueryResultModelDocumentToDocumentAssociationModelDocumentToDocumentAssociation> DocumentToDocumentAssociationsQueryItemAsync (long? id, string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null)
        {
             ApiResponse<ItemQueryResultModelDocumentToDocumentAssociationModelDocumentToDocumentAssociation> localVarResponse = await DocumentToDocumentAssociationsQueryItemAsyncWithHttpInfo(id, apiIntegrationCode, userName, secret, impersonationResourceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>Task of ApiResponse (ItemQueryResultModelDocumentToDocumentAssociationModelDocumentToDocumentAssociation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemQueryResultModelDocumentToDocumentAssociationModelDocumentToDocumentAssociation>> DocumentToDocumentAssociationsQueryItemAsyncWithHttpInfo (long? id, string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsQueryItem");
            // verify the required parameter 'apiIntegrationCode' is set
            if (apiIntegrationCode == null)
                throw new ApiException(400, "Missing required parameter 'apiIntegrationCode' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsQueryItem");
            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new ApiException(400, "Missing required parameter 'userName' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsQueryItem");
            // verify the required parameter 'secret' is set
            if (secret == null)
                throw new ApiException(400, "Missing required parameter 'secret' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsQueryItem");

            var localVarPath = "/V1.0/DocumentToDocumentAssociations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiIntegrationCode != null) localVarHeaderParams.Add("ApiIntegrationCode", this.Configuration.ApiClient.ParameterToString(apiIntegrationCode)); // header parameter
            if (userName != null) localVarHeaderParams.Add("UserName", this.Configuration.ApiClient.ParameterToString(userName)); // header parameter
            if (secret != null) localVarHeaderParams.Add("Secret", this.Configuration.ApiClient.ParameterToString(secret)); // header parameter
            if (impersonationResourceId != null) localVarHeaderParams.Add("ImpersonationResourceId", this.Configuration.ApiClient.ParameterToString(impersonationResourceId)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentToDocumentAssociationsQueryItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemQueryResultModelDocumentToDocumentAssociationModelDocumentToDocumentAssociation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemQueryResultModelDocumentToDocumentAssociationModelDocumentToDocumentAssociation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemQueryResultModelDocumentToDocumentAssociationModelDocumentToDocumentAssociation)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>UserDefinedFieldInformationResultModel</returns>
        public UserDefinedFieldInformationResultModel DocumentToDocumentAssociationsQueryUserDefinedFieldDefinitions (string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null)
        {
             ApiResponse<UserDefinedFieldInformationResultModel> localVarResponse = DocumentToDocumentAssociationsQueryUserDefinedFieldDefinitionsWithHttpInfo(apiIntegrationCode, userName, secret, impersonationResourceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>ApiResponse of UserDefinedFieldInformationResultModel</returns>
        public ApiResponse< UserDefinedFieldInformationResultModel > DocumentToDocumentAssociationsQueryUserDefinedFieldDefinitionsWithHttpInfo (string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null)
        {
            // verify the required parameter 'apiIntegrationCode' is set
            if (apiIntegrationCode == null)
                throw new ApiException(400, "Missing required parameter 'apiIntegrationCode' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsQueryUserDefinedFieldDefinitions");
            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new ApiException(400, "Missing required parameter 'userName' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsQueryUserDefinedFieldDefinitions");
            // verify the required parameter 'secret' is set
            if (secret == null)
                throw new ApiException(400, "Missing required parameter 'secret' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsQueryUserDefinedFieldDefinitions");

            var localVarPath = "/V1.0/DocumentToDocumentAssociations/entityInformation/userDefinedFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiIntegrationCode != null) localVarHeaderParams.Add("ApiIntegrationCode", this.Configuration.ApiClient.ParameterToString(apiIntegrationCode)); // header parameter
            if (userName != null) localVarHeaderParams.Add("UserName", this.Configuration.ApiClient.ParameterToString(userName)); // header parameter
            if (secret != null) localVarHeaderParams.Add("Secret", this.Configuration.ApiClient.ParameterToString(secret)); // header parameter
            if (impersonationResourceId != null) localVarHeaderParams.Add("ImpersonationResourceId", this.Configuration.ApiClient.ParameterToString(impersonationResourceId)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentToDocumentAssociationsQueryUserDefinedFieldDefinitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserDefinedFieldInformationResultModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserDefinedFieldInformationResultModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserDefinedFieldInformationResultModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>Task of UserDefinedFieldInformationResultModel</returns>
        public async System.Threading.Tasks.Task<UserDefinedFieldInformationResultModel> DocumentToDocumentAssociationsQueryUserDefinedFieldDefinitionsAsync (string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null)
        {
             ApiResponse<UserDefinedFieldInformationResultModel> localVarResponse = await DocumentToDocumentAssociationsQueryUserDefinedFieldDefinitionsAsyncWithHttpInfo(apiIntegrationCode, userName, secret, impersonationResourceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>Task of ApiResponse (UserDefinedFieldInformationResultModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserDefinedFieldInformationResultModel>> DocumentToDocumentAssociationsQueryUserDefinedFieldDefinitionsAsyncWithHttpInfo (string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null)
        {
            // verify the required parameter 'apiIntegrationCode' is set
            if (apiIntegrationCode == null)
                throw new ApiException(400, "Missing required parameter 'apiIntegrationCode' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsQueryUserDefinedFieldDefinitions");
            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new ApiException(400, "Missing required parameter 'userName' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsQueryUserDefinedFieldDefinitions");
            // verify the required parameter 'secret' is set
            if (secret == null)
                throw new ApiException(400, "Missing required parameter 'secret' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsQueryUserDefinedFieldDefinitions");

            var localVarPath = "/V1.0/DocumentToDocumentAssociations/entityInformation/userDefinedFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiIntegrationCode != null) localVarHeaderParams.Add("ApiIntegrationCode", this.Configuration.ApiClient.ParameterToString(apiIntegrationCode)); // header parameter
            if (userName != null) localVarHeaderParams.Add("UserName", this.Configuration.ApiClient.ParameterToString(userName)); // header parameter
            if (secret != null) localVarHeaderParams.Add("Secret", this.Configuration.ApiClient.ParameterToString(secret)); // header parameter
            if (impersonationResourceId != null) localVarHeaderParams.Add("ImpersonationResourceId", this.Configuration.ApiClient.ParameterToString(impersonationResourceId)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentToDocumentAssociationsQueryUserDefinedFieldDefinitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserDefinedFieldInformationResultModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserDefinedFieldInformationResultModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserDefinedFieldInformationResultModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"></param>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation</returns>
        public QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation DocumentToDocumentAssociationsUrlParameterQuery (string search, string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null)
        {
             ApiResponse<QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation> localVarResponse = DocumentToDocumentAssociationsUrlParameterQueryWithHttpInfo(search, apiIntegrationCode, userName, secret, impersonationResourceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"></param>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>ApiResponse of QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation</returns>
        public ApiResponse< QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation > DocumentToDocumentAssociationsUrlParameterQueryWithHttpInfo (string search, string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null)
        {
            // verify the required parameter 'search' is set
            if (search == null)
                throw new ApiException(400, "Missing required parameter 'search' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsUrlParameterQuery");
            // verify the required parameter 'apiIntegrationCode' is set
            if (apiIntegrationCode == null)
                throw new ApiException(400, "Missing required parameter 'apiIntegrationCode' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsUrlParameterQuery");
            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new ApiException(400, "Missing required parameter 'userName' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsUrlParameterQuery");
            // verify the required parameter 'secret' is set
            if (secret == null)
                throw new ApiException(400, "Missing required parameter 'secret' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsUrlParameterQuery");

            var localVarPath = "/V1.0/DocumentToDocumentAssociations/query";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (apiIntegrationCode != null) localVarHeaderParams.Add("ApiIntegrationCode", this.Configuration.ApiClient.ParameterToString(apiIntegrationCode)); // header parameter
            if (userName != null) localVarHeaderParams.Add("UserName", this.Configuration.ApiClient.ParameterToString(userName)); // header parameter
            if (secret != null) localVarHeaderParams.Add("Secret", this.Configuration.ApiClient.ParameterToString(secret)); // header parameter
            if (impersonationResourceId != null) localVarHeaderParams.Add("ImpersonationResourceId", this.Configuration.ApiClient.ParameterToString(impersonationResourceId)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentToDocumentAssociationsUrlParameterQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"></param>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>Task of QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation</returns>
        public async System.Threading.Tasks.Task<QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation> DocumentToDocumentAssociationsUrlParameterQueryAsync (string search, string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null)
        {
             ApiResponse<QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation> localVarResponse = await DocumentToDocumentAssociationsUrlParameterQueryAsyncWithHttpInfo(search, apiIntegrationCode, userName, secret, impersonationResourceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"></param>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>Task of ApiResponse (QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation>> DocumentToDocumentAssociationsUrlParameterQueryAsyncWithHttpInfo (string search, string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null)
        {
            // verify the required parameter 'search' is set
            if (search == null)
                throw new ApiException(400, "Missing required parameter 'search' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsUrlParameterQuery");
            // verify the required parameter 'apiIntegrationCode' is set
            if (apiIntegrationCode == null)
                throw new ApiException(400, "Missing required parameter 'apiIntegrationCode' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsUrlParameterQuery");
            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new ApiException(400, "Missing required parameter 'userName' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsUrlParameterQuery");
            // verify the required parameter 'secret' is set
            if (secret == null)
                throw new ApiException(400, "Missing required parameter 'secret' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsUrlParameterQuery");

            var localVarPath = "/V1.0/DocumentToDocumentAssociations/query";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (apiIntegrationCode != null) localVarHeaderParams.Add("ApiIntegrationCode", this.Configuration.ApiClient.ParameterToString(apiIntegrationCode)); // header parameter
            if (userName != null) localVarHeaderParams.Add("UserName", this.Configuration.ApiClient.ParameterToString(userName)); // header parameter
            if (secret != null) localVarHeaderParams.Add("Secret", this.Configuration.ApiClient.ParameterToString(secret)); // header parameter
            if (impersonationResourceId != null) localVarHeaderParams.Add("ImpersonationResourceId", this.Configuration.ApiClient.ParameterToString(impersonationResourceId)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentToDocumentAssociationsUrlParameterQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueryActionResultDocumentToDocumentAssociationModelDocumentToDocumentAssociation)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"></param>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>QueryCountResultModel</returns>
        public QueryCountResultModel DocumentToDocumentAssociationsUrlParameterQueryCount (string search, string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null)
        {
             ApiResponse<QueryCountResultModel> localVarResponse = DocumentToDocumentAssociationsUrlParameterQueryCountWithHttpInfo(search, apiIntegrationCode, userName, secret, impersonationResourceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"></param>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>ApiResponse of QueryCountResultModel</returns>
        public ApiResponse< QueryCountResultModel > DocumentToDocumentAssociationsUrlParameterQueryCountWithHttpInfo (string search, string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null)
        {
            // verify the required parameter 'search' is set
            if (search == null)
                throw new ApiException(400, "Missing required parameter 'search' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsUrlParameterQueryCount");
            // verify the required parameter 'apiIntegrationCode' is set
            if (apiIntegrationCode == null)
                throw new ApiException(400, "Missing required parameter 'apiIntegrationCode' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsUrlParameterQueryCount");
            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new ApiException(400, "Missing required parameter 'userName' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsUrlParameterQueryCount");
            // verify the required parameter 'secret' is set
            if (secret == null)
                throw new ApiException(400, "Missing required parameter 'secret' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsUrlParameterQueryCount");

            var localVarPath = "/V1.0/DocumentToDocumentAssociations/query/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (apiIntegrationCode != null) localVarHeaderParams.Add("ApiIntegrationCode", this.Configuration.ApiClient.ParameterToString(apiIntegrationCode)); // header parameter
            if (userName != null) localVarHeaderParams.Add("UserName", this.Configuration.ApiClient.ParameterToString(userName)); // header parameter
            if (secret != null) localVarHeaderParams.Add("Secret", this.Configuration.ApiClient.ParameterToString(secret)); // header parameter
            if (impersonationResourceId != null) localVarHeaderParams.Add("ImpersonationResourceId", this.Configuration.ApiClient.ParameterToString(impersonationResourceId)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentToDocumentAssociationsUrlParameterQueryCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueryCountResultModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QueryCountResultModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueryCountResultModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"></param>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>Task of QueryCountResultModel</returns>
        public async System.Threading.Tasks.Task<QueryCountResultModel> DocumentToDocumentAssociationsUrlParameterQueryCountAsync (string search, string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null)
        {
             ApiResponse<QueryCountResultModel> localVarResponse = await DocumentToDocumentAssociationsUrlParameterQueryCountAsyncWithHttpInfo(search, apiIntegrationCode, userName, secret, impersonationResourceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"></param>
        /// <param name="apiIntegrationCode">API Integration Code</param>
        /// <param name="userName">User Name</param>
        /// <param name="secret">Secret</param>
        /// <param name="impersonationResourceId">Impersonation Resource Key (optional)</param>
        /// <returns>Task of ApiResponse (QueryCountResultModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QueryCountResultModel>> DocumentToDocumentAssociationsUrlParameterQueryCountAsyncWithHttpInfo (string search, string apiIntegrationCode, string userName, string secret, string impersonationResourceId = null)
        {
            // verify the required parameter 'search' is set
            if (search == null)
                throw new ApiException(400, "Missing required parameter 'search' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsUrlParameterQueryCount");
            // verify the required parameter 'apiIntegrationCode' is set
            if (apiIntegrationCode == null)
                throw new ApiException(400, "Missing required parameter 'apiIntegrationCode' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsUrlParameterQueryCount");
            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new ApiException(400, "Missing required parameter 'userName' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsUrlParameterQueryCount");
            // verify the required parameter 'secret' is set
            if (secret == null)
                throw new ApiException(400, "Missing required parameter 'secret' when calling DocumentToDocumentAssociationsApi->DocumentToDocumentAssociationsUrlParameterQueryCount");

            var localVarPath = "/V1.0/DocumentToDocumentAssociations/query/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (apiIntegrationCode != null) localVarHeaderParams.Add("ApiIntegrationCode", this.Configuration.ApiClient.ParameterToString(apiIntegrationCode)); // header parameter
            if (userName != null) localVarHeaderParams.Add("UserName", this.Configuration.ApiClient.ParameterToString(userName)); // header parameter
            if (secret != null) localVarHeaderParams.Add("Secret", this.Configuration.ApiClient.ParameterToString(secret)); // header parameter
            if (impersonationResourceId != null) localVarHeaderParams.Add("ImpersonationResourceId", this.Configuration.ApiClient.ParameterToString(impersonationResourceId)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentToDocumentAssociationsUrlParameterQueryCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueryCountResultModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QueryCountResultModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueryCountResultModel)));
        }

    }
}
