/* 
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ExpenseReportModel
    /// </summary>
    [DataContract]
    public partial class ExpenseReportModel :  IEquatable<ExpenseReportModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExpenseReportModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="amountDue">amountDue.</param>
        /// <param name="approvedDate">approvedDate.</param>
        /// <param name="approverID">approverID.</param>
        /// <param name="departmentNumber">departmentNumber.</param>
        /// <param name="internalCurrencyCashAdvanceAmount">internalCurrencyCashAdvanceAmount.</param>
        /// <param name="internalCurrencyExpenseTotal">internalCurrencyExpenseTotal.</param>
        /// <param name="name">name.</param>
        /// <param name="organizationalLevelAssociationID">organizationalLevelAssociationID.</param>
        /// <param name="quickBooksReferenceNumber">quickBooksReferenceNumber.</param>
        /// <param name="reimbursementCurrencyAmountDue">reimbursementCurrencyAmountDue.</param>
        /// <param name="reimbursementCurrencyCashAdvanceAmount">reimbursementCurrencyCashAdvanceAmount.</param>
        /// <param name="reimbursementCurrencyID">reimbursementCurrencyID.</param>
        /// <param name="rejectionReason">rejectionReason.</param>
        /// <param name="status">status.</param>
        /// <param name="submit">submit.</param>
        /// <param name="submitDate">submitDate.</param>
        /// <param name="submitterID">submitterID.</param>
        /// <param name="weekEnding">weekEnding.</param>
        /// <param name="userDefinedFields">userDefinedFields.</param>
        public ExpenseReportModel(long? id = default(long?), double? amountDue = default(double?), DateTime? approvedDate = default(DateTime?), int? approverID = default(int?), string departmentNumber = default(string), double? internalCurrencyCashAdvanceAmount = default(double?), double? internalCurrencyExpenseTotal = default(double?), string name = default(string), int? organizationalLevelAssociationID = default(int?), string quickBooksReferenceNumber = default(string), double? reimbursementCurrencyAmountDue = default(double?), double? reimbursementCurrencyCashAdvanceAmount = default(double?), int? reimbursementCurrencyID = default(int?), string rejectionReason = default(string), int? status = default(int?), bool? submit = default(bool?), DateTime? submitDate = default(DateTime?), int? submitterID = default(int?), DateTime? weekEnding = default(DateTime?), List<UserDefinedField> userDefinedFields = default(List<UserDefinedField>))
        {
            this.Id = id;
            this.AmountDue = amountDue;
            this.ApprovedDate = approvedDate;
            this.ApproverID = approverID;
            this.DepartmentNumber = departmentNumber;
            this.InternalCurrencyCashAdvanceAmount = internalCurrencyCashAdvanceAmount;
            this.InternalCurrencyExpenseTotal = internalCurrencyExpenseTotal;
            this.Name = name;
            this.OrganizationalLevelAssociationID = organizationalLevelAssociationID;
            this.QuickBooksReferenceNumber = quickBooksReferenceNumber;
            this.ReimbursementCurrencyAmountDue = reimbursementCurrencyAmountDue;
            this.ReimbursementCurrencyCashAdvanceAmount = reimbursementCurrencyCashAdvanceAmount;
            this.ReimbursementCurrencyID = reimbursementCurrencyID;
            this.RejectionReason = rejectionReason;
            this.Status = status;
            this.Submit = submit;
            this.SubmitDate = submitDate;
            this.SubmitterID = submitterID;
            this.WeekEnding = weekEnding;
            this.UserDefinedFields = userDefinedFields;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets AmountDue
        /// </summary>
        [DataMember(Name="amountDue", EmitDefaultValue=false)]
        public double? AmountDue { get; set; }

        /// <summary>
        /// Gets or Sets ApprovedDate
        /// </summary>
        [DataMember(Name="approvedDate", EmitDefaultValue=false)]
        public DateTime? ApprovedDate { get; set; }

        /// <summary>
        /// Gets or Sets ApproverID
        /// </summary>
        [DataMember(Name="approverID", EmitDefaultValue=false)]
        public int? ApproverID { get; set; }

        /// <summary>
        /// Gets or Sets DepartmentNumber
        /// </summary>
        [DataMember(Name="departmentNumber", EmitDefaultValue=false)]
        public string DepartmentNumber { get; set; }

        /// <summary>
        /// Gets or Sets InternalCurrencyCashAdvanceAmount
        /// </summary>
        [DataMember(Name="internalCurrencyCashAdvanceAmount", EmitDefaultValue=false)]
        public double? InternalCurrencyCashAdvanceAmount { get; set; }

        /// <summary>
        /// Gets or Sets InternalCurrencyExpenseTotal
        /// </summary>
        [DataMember(Name="internalCurrencyExpenseTotal", EmitDefaultValue=false)]
        public double? InternalCurrencyExpenseTotal { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationalLevelAssociationID
        /// </summary>
        [DataMember(Name="organizationalLevelAssociationID", EmitDefaultValue=false)]
        public int? OrganizationalLevelAssociationID { get; set; }

        /// <summary>
        /// Gets or Sets QuickBooksReferenceNumber
        /// </summary>
        [DataMember(Name="quickBooksReferenceNumber", EmitDefaultValue=false)]
        public string QuickBooksReferenceNumber { get; set; }

        /// <summary>
        /// Gets or Sets ReimbursementCurrencyAmountDue
        /// </summary>
        [DataMember(Name="reimbursementCurrencyAmountDue", EmitDefaultValue=false)]
        public double? ReimbursementCurrencyAmountDue { get; set; }

        /// <summary>
        /// Gets or Sets ReimbursementCurrencyCashAdvanceAmount
        /// </summary>
        [DataMember(Name="reimbursementCurrencyCashAdvanceAmount", EmitDefaultValue=false)]
        public double? ReimbursementCurrencyCashAdvanceAmount { get; set; }

        /// <summary>
        /// Gets or Sets ReimbursementCurrencyID
        /// </summary>
        [DataMember(Name="reimbursementCurrencyID", EmitDefaultValue=false)]
        public int? ReimbursementCurrencyID { get; set; }

        /// <summary>
        /// Gets or Sets RejectionReason
        /// </summary>
        [DataMember(Name="rejectionReason", EmitDefaultValue=false)]
        public string RejectionReason { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public int? Status { get; set; }

        /// <summary>
        /// Gets or Sets Submit
        /// </summary>
        [DataMember(Name="submit", EmitDefaultValue=false)]
        public bool? Submit { get; set; }

        /// <summary>
        /// Gets or Sets SubmitDate
        /// </summary>
        [DataMember(Name="submitDate", EmitDefaultValue=false)]
        public DateTime? SubmitDate { get; set; }

        /// <summary>
        /// Gets or Sets SubmitterID
        /// </summary>
        [DataMember(Name="submitterID", EmitDefaultValue=false)]
        public int? SubmitterID { get; set; }

        /// <summary>
        /// Gets or Sets WeekEnding
        /// </summary>
        [DataMember(Name="weekEnding", EmitDefaultValue=false)]
        public DateTime? WeekEnding { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields", EmitDefaultValue=false)]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExpenseReportModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AmountDue: ").Append(AmountDue).Append("\n");
            sb.Append("  ApprovedDate: ").Append(ApprovedDate).Append("\n");
            sb.Append("  ApproverID: ").Append(ApproverID).Append("\n");
            sb.Append("  DepartmentNumber: ").Append(DepartmentNumber).Append("\n");
            sb.Append("  InternalCurrencyCashAdvanceAmount: ").Append(InternalCurrencyCashAdvanceAmount).Append("\n");
            sb.Append("  InternalCurrencyExpenseTotal: ").Append(InternalCurrencyExpenseTotal).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OrganizationalLevelAssociationID: ").Append(OrganizationalLevelAssociationID).Append("\n");
            sb.Append("  QuickBooksReferenceNumber: ").Append(QuickBooksReferenceNumber).Append("\n");
            sb.Append("  ReimbursementCurrencyAmountDue: ").Append(ReimbursementCurrencyAmountDue).Append("\n");
            sb.Append("  ReimbursementCurrencyCashAdvanceAmount: ").Append(ReimbursementCurrencyCashAdvanceAmount).Append("\n");
            sb.Append("  ReimbursementCurrencyID: ").Append(ReimbursementCurrencyID).Append("\n");
            sb.Append("  RejectionReason: ").Append(RejectionReason).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Submit: ").Append(Submit).Append("\n");
            sb.Append("  SubmitDate: ").Append(SubmitDate).Append("\n");
            sb.Append("  SubmitterID: ").Append(SubmitterID).Append("\n");
            sb.Append("  WeekEnding: ").Append(WeekEnding).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExpenseReportModel);
        }

        /// <summary>
        /// Returns true if ExpenseReportModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ExpenseReportModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExpenseReportModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.AmountDue == input.AmountDue ||
                    (this.AmountDue != null &&
                    this.AmountDue.Equals(input.AmountDue))
                ) && 
                (
                    this.ApprovedDate == input.ApprovedDate ||
                    (this.ApprovedDate != null &&
                    this.ApprovedDate.Equals(input.ApprovedDate))
                ) && 
                (
                    this.ApproverID == input.ApproverID ||
                    (this.ApproverID != null &&
                    this.ApproverID.Equals(input.ApproverID))
                ) && 
                (
                    this.DepartmentNumber == input.DepartmentNumber ||
                    (this.DepartmentNumber != null &&
                    this.DepartmentNumber.Equals(input.DepartmentNumber))
                ) && 
                (
                    this.InternalCurrencyCashAdvanceAmount == input.InternalCurrencyCashAdvanceAmount ||
                    (this.InternalCurrencyCashAdvanceAmount != null &&
                    this.InternalCurrencyCashAdvanceAmount.Equals(input.InternalCurrencyCashAdvanceAmount))
                ) && 
                (
                    this.InternalCurrencyExpenseTotal == input.InternalCurrencyExpenseTotal ||
                    (this.InternalCurrencyExpenseTotal != null &&
                    this.InternalCurrencyExpenseTotal.Equals(input.InternalCurrencyExpenseTotal))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.OrganizationalLevelAssociationID == input.OrganizationalLevelAssociationID ||
                    (this.OrganizationalLevelAssociationID != null &&
                    this.OrganizationalLevelAssociationID.Equals(input.OrganizationalLevelAssociationID))
                ) && 
                (
                    this.QuickBooksReferenceNumber == input.QuickBooksReferenceNumber ||
                    (this.QuickBooksReferenceNumber != null &&
                    this.QuickBooksReferenceNumber.Equals(input.QuickBooksReferenceNumber))
                ) && 
                (
                    this.ReimbursementCurrencyAmountDue == input.ReimbursementCurrencyAmountDue ||
                    (this.ReimbursementCurrencyAmountDue != null &&
                    this.ReimbursementCurrencyAmountDue.Equals(input.ReimbursementCurrencyAmountDue))
                ) && 
                (
                    this.ReimbursementCurrencyCashAdvanceAmount == input.ReimbursementCurrencyCashAdvanceAmount ||
                    (this.ReimbursementCurrencyCashAdvanceAmount != null &&
                    this.ReimbursementCurrencyCashAdvanceAmount.Equals(input.ReimbursementCurrencyCashAdvanceAmount))
                ) && 
                (
                    this.ReimbursementCurrencyID == input.ReimbursementCurrencyID ||
                    (this.ReimbursementCurrencyID != null &&
                    this.ReimbursementCurrencyID.Equals(input.ReimbursementCurrencyID))
                ) && 
                (
                    this.RejectionReason == input.RejectionReason ||
                    (this.RejectionReason != null &&
                    this.RejectionReason.Equals(input.RejectionReason))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Submit == input.Submit ||
                    (this.Submit != null &&
                    this.Submit.Equals(input.Submit))
                ) && 
                (
                    this.SubmitDate == input.SubmitDate ||
                    (this.SubmitDate != null &&
                    this.SubmitDate.Equals(input.SubmitDate))
                ) && 
                (
                    this.SubmitterID == input.SubmitterID ||
                    (this.SubmitterID != null &&
                    this.SubmitterID.Equals(input.SubmitterID))
                ) && 
                (
                    this.WeekEnding == input.WeekEnding ||
                    (this.WeekEnding != null &&
                    this.WeekEnding.Equals(input.WeekEnding))
                ) && 
                (
                    this.UserDefinedFields == input.UserDefinedFields ||
                    this.UserDefinedFields != null &&
                    this.UserDefinedFields.SequenceEqual(input.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.AmountDue != null)
                    hashCode = hashCode * 59 + this.AmountDue.GetHashCode();
                if (this.ApprovedDate != null)
                    hashCode = hashCode * 59 + this.ApprovedDate.GetHashCode();
                if (this.ApproverID != null)
                    hashCode = hashCode * 59 + this.ApproverID.GetHashCode();
                if (this.DepartmentNumber != null)
                    hashCode = hashCode * 59 + this.DepartmentNumber.GetHashCode();
                if (this.InternalCurrencyCashAdvanceAmount != null)
                    hashCode = hashCode * 59 + this.InternalCurrencyCashAdvanceAmount.GetHashCode();
                if (this.InternalCurrencyExpenseTotal != null)
                    hashCode = hashCode * 59 + this.InternalCurrencyExpenseTotal.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.OrganizationalLevelAssociationID != null)
                    hashCode = hashCode * 59 + this.OrganizationalLevelAssociationID.GetHashCode();
                if (this.QuickBooksReferenceNumber != null)
                    hashCode = hashCode * 59 + this.QuickBooksReferenceNumber.GetHashCode();
                if (this.ReimbursementCurrencyAmountDue != null)
                    hashCode = hashCode * 59 + this.ReimbursementCurrencyAmountDue.GetHashCode();
                if (this.ReimbursementCurrencyCashAdvanceAmount != null)
                    hashCode = hashCode * 59 + this.ReimbursementCurrencyCashAdvanceAmount.GetHashCode();
                if (this.ReimbursementCurrencyID != null)
                    hashCode = hashCode * 59 + this.ReimbursementCurrencyID.GetHashCode();
                if (this.RejectionReason != null)
                    hashCode = hashCode * 59 + this.RejectionReason.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Submit != null)
                    hashCode = hashCode * 59 + this.Submit.GetHashCode();
                if (this.SubmitDate != null)
                    hashCode = hashCode * 59 + this.SubmitDate.GetHashCode();
                if (this.SubmitterID != null)
                    hashCode = hashCode * 59 + this.SubmitterID.GetHashCode();
                if (this.WeekEnding != null)
                    hashCode = hashCode * 59 + this.WeekEnding.GetHashCode();
                if (this.UserDefinedFields != null)
                    hashCode = hashCode * 59 + this.UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
