/* 
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InventoryItemModel
    /// </summary>
    [DataContract]
    public partial class InventoryItemModel :  IEquatable<InventoryItemModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryItemModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="backOrderQuantity">backOrderQuantity.</param>
        /// <param name="bin">bin.</param>
        /// <param name="impersonatorCreatorResourceID">impersonatorCreatorResourceID.</param>
        /// <param name="inventoryLocationID">inventoryLocationID.</param>
        /// <param name="productID">productID.</param>
        /// <param name="quantityMaximum">quantityMaximum.</param>
        /// <param name="quantityMinimum">quantityMinimum.</param>
        /// <param name="quantityOnHand">quantityOnHand.</param>
        /// <param name="quantityOnOrder">quantityOnOrder.</param>
        /// <param name="quantityPicked">quantityPicked.</param>
        /// <param name="quantityReserved">quantityReserved.</param>
        /// <param name="referenceNumber">referenceNumber.</param>
        /// <param name="userDefinedFields">userDefinedFields.</param>
        public InventoryItemModel(long? id = default(long?), int? backOrderQuantity = default(int?), string bin = default(string), int? impersonatorCreatorResourceID = default(int?), int? inventoryLocationID = default(int?), int? productID = default(int?), int? quantityMaximum = default(int?), int? quantityMinimum = default(int?), int? quantityOnHand = default(int?), int? quantityOnOrder = default(int?), int? quantityPicked = default(int?), int? quantityReserved = default(int?), string referenceNumber = default(string), List<UserDefinedField> userDefinedFields = default(List<UserDefinedField>))
        {
            this.Id = id;
            this.BackOrderQuantity = backOrderQuantity;
            this.Bin = bin;
            this.ImpersonatorCreatorResourceID = impersonatorCreatorResourceID;
            this.InventoryLocationID = inventoryLocationID;
            this.ProductID = productID;
            this.QuantityMaximum = quantityMaximum;
            this.QuantityMinimum = quantityMinimum;
            this.QuantityOnHand = quantityOnHand;
            this.QuantityOnOrder = quantityOnOrder;
            this.QuantityPicked = quantityPicked;
            this.QuantityReserved = quantityReserved;
            this.ReferenceNumber = referenceNumber;
            this.UserDefinedFields = userDefinedFields;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets BackOrderQuantity
        /// </summary>
        [DataMember(Name="backOrderQuantity", EmitDefaultValue=false)]
        public int? BackOrderQuantity { get; set; }

        /// <summary>
        /// Gets or Sets Bin
        /// </summary>
        [DataMember(Name="bin", EmitDefaultValue=false)]
        public string Bin { get; set; }

        /// <summary>
        /// Gets or Sets ImpersonatorCreatorResourceID
        /// </summary>
        [DataMember(Name="impersonatorCreatorResourceID", EmitDefaultValue=false)]
        public int? ImpersonatorCreatorResourceID { get; set; }

        /// <summary>
        /// Gets or Sets InventoryLocationID
        /// </summary>
        [DataMember(Name="inventoryLocationID", EmitDefaultValue=false)]
        public int? InventoryLocationID { get; set; }

        /// <summary>
        /// Gets or Sets ProductID
        /// </summary>
        [DataMember(Name="productID", EmitDefaultValue=false)]
        public int? ProductID { get; set; }

        /// <summary>
        /// Gets or Sets QuantityMaximum
        /// </summary>
        [DataMember(Name="quantityMaximum", EmitDefaultValue=false)]
        public int? QuantityMaximum { get; set; }

        /// <summary>
        /// Gets or Sets QuantityMinimum
        /// </summary>
        [DataMember(Name="quantityMinimum", EmitDefaultValue=false)]
        public int? QuantityMinimum { get; set; }

        /// <summary>
        /// Gets or Sets QuantityOnHand
        /// </summary>
        [DataMember(Name="quantityOnHand", EmitDefaultValue=false)]
        public int? QuantityOnHand { get; set; }

        /// <summary>
        /// Gets or Sets QuantityOnOrder
        /// </summary>
        [DataMember(Name="quantityOnOrder", EmitDefaultValue=false)]
        public int? QuantityOnOrder { get; set; }

        /// <summary>
        /// Gets or Sets QuantityPicked
        /// </summary>
        [DataMember(Name="quantityPicked", EmitDefaultValue=false)]
        public int? QuantityPicked { get; set; }

        /// <summary>
        /// Gets or Sets QuantityReserved
        /// </summary>
        [DataMember(Name="quantityReserved", EmitDefaultValue=false)]
        public int? QuantityReserved { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceNumber
        /// </summary>
        [DataMember(Name="referenceNumber", EmitDefaultValue=false)]
        public string ReferenceNumber { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields", EmitDefaultValue=false)]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InventoryItemModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BackOrderQuantity: ").Append(BackOrderQuantity).Append("\n");
            sb.Append("  Bin: ").Append(Bin).Append("\n");
            sb.Append("  ImpersonatorCreatorResourceID: ").Append(ImpersonatorCreatorResourceID).Append("\n");
            sb.Append("  InventoryLocationID: ").Append(InventoryLocationID).Append("\n");
            sb.Append("  ProductID: ").Append(ProductID).Append("\n");
            sb.Append("  QuantityMaximum: ").Append(QuantityMaximum).Append("\n");
            sb.Append("  QuantityMinimum: ").Append(QuantityMinimum).Append("\n");
            sb.Append("  QuantityOnHand: ").Append(QuantityOnHand).Append("\n");
            sb.Append("  QuantityOnOrder: ").Append(QuantityOnOrder).Append("\n");
            sb.Append("  QuantityPicked: ").Append(QuantityPicked).Append("\n");
            sb.Append("  QuantityReserved: ").Append(QuantityReserved).Append("\n");
            sb.Append("  ReferenceNumber: ").Append(ReferenceNumber).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InventoryItemModel);
        }

        /// <summary>
        /// Returns true if InventoryItemModel instances are equal
        /// </summary>
        /// <param name="input">Instance of InventoryItemModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InventoryItemModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.BackOrderQuantity == input.BackOrderQuantity ||
                    (this.BackOrderQuantity != null &&
                    this.BackOrderQuantity.Equals(input.BackOrderQuantity))
                ) && 
                (
                    this.Bin == input.Bin ||
                    (this.Bin != null &&
                    this.Bin.Equals(input.Bin))
                ) && 
                (
                    this.ImpersonatorCreatorResourceID == input.ImpersonatorCreatorResourceID ||
                    (this.ImpersonatorCreatorResourceID != null &&
                    this.ImpersonatorCreatorResourceID.Equals(input.ImpersonatorCreatorResourceID))
                ) && 
                (
                    this.InventoryLocationID == input.InventoryLocationID ||
                    (this.InventoryLocationID != null &&
                    this.InventoryLocationID.Equals(input.InventoryLocationID))
                ) && 
                (
                    this.ProductID == input.ProductID ||
                    (this.ProductID != null &&
                    this.ProductID.Equals(input.ProductID))
                ) && 
                (
                    this.QuantityMaximum == input.QuantityMaximum ||
                    (this.QuantityMaximum != null &&
                    this.QuantityMaximum.Equals(input.QuantityMaximum))
                ) && 
                (
                    this.QuantityMinimum == input.QuantityMinimum ||
                    (this.QuantityMinimum != null &&
                    this.QuantityMinimum.Equals(input.QuantityMinimum))
                ) && 
                (
                    this.QuantityOnHand == input.QuantityOnHand ||
                    (this.QuantityOnHand != null &&
                    this.QuantityOnHand.Equals(input.QuantityOnHand))
                ) && 
                (
                    this.QuantityOnOrder == input.QuantityOnOrder ||
                    (this.QuantityOnOrder != null &&
                    this.QuantityOnOrder.Equals(input.QuantityOnOrder))
                ) && 
                (
                    this.QuantityPicked == input.QuantityPicked ||
                    (this.QuantityPicked != null &&
                    this.QuantityPicked.Equals(input.QuantityPicked))
                ) && 
                (
                    this.QuantityReserved == input.QuantityReserved ||
                    (this.QuantityReserved != null &&
                    this.QuantityReserved.Equals(input.QuantityReserved))
                ) && 
                (
                    this.ReferenceNumber == input.ReferenceNumber ||
                    (this.ReferenceNumber != null &&
                    this.ReferenceNumber.Equals(input.ReferenceNumber))
                ) && 
                (
                    this.UserDefinedFields == input.UserDefinedFields ||
                    this.UserDefinedFields != null &&
                    this.UserDefinedFields.SequenceEqual(input.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.BackOrderQuantity != null)
                    hashCode = hashCode * 59 + this.BackOrderQuantity.GetHashCode();
                if (this.Bin != null)
                    hashCode = hashCode * 59 + this.Bin.GetHashCode();
                if (this.ImpersonatorCreatorResourceID != null)
                    hashCode = hashCode * 59 + this.ImpersonatorCreatorResourceID.GetHashCode();
                if (this.InventoryLocationID != null)
                    hashCode = hashCode * 59 + this.InventoryLocationID.GetHashCode();
                if (this.ProductID != null)
                    hashCode = hashCode * 59 + this.ProductID.GetHashCode();
                if (this.QuantityMaximum != null)
                    hashCode = hashCode * 59 + this.QuantityMaximum.GetHashCode();
                if (this.QuantityMinimum != null)
                    hashCode = hashCode * 59 + this.QuantityMinimum.GetHashCode();
                if (this.QuantityOnHand != null)
                    hashCode = hashCode * 59 + this.QuantityOnHand.GetHashCode();
                if (this.QuantityOnOrder != null)
                    hashCode = hashCode * 59 + this.QuantityOnOrder.GetHashCode();
                if (this.QuantityPicked != null)
                    hashCode = hashCode * 59 + this.QuantityPicked.GetHashCode();
                if (this.QuantityReserved != null)
                    hashCode = hashCode * 59 + this.QuantityReserved.GetHashCode();
                if (this.ReferenceNumber != null)
                    hashCode = hashCode * 59 + this.ReferenceNumber.GetHashCode();
                if (this.UserDefinedFields != null)
                    hashCode = hashCode * 59 + this.UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
