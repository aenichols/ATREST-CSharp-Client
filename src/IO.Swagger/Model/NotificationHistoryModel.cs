/* 
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// NotificationHistoryModel
    /// </summary>
    [DataContract]
    public partial class NotificationHistoryModel :  IEquatable<NotificationHistoryModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationHistoryModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="companyID">companyID.</param>
        /// <param name="entityNumber">entityNumber.</param>
        /// <param name="entityTitle">entityTitle.</param>
        /// <param name="initiatingContactID">initiatingContactID.</param>
        /// <param name="initiatingResourceID">initiatingResourceID.</param>
        /// <param name="isActive">isActive.</param>
        /// <param name="isDeleted">isDeleted.</param>
        /// <param name="isTemplateJob">isTemplateJob.</param>
        /// <param name="notificationHistoryTypeID">notificationHistoryTypeID.</param>
        /// <param name="notificationSentTime">notificationSentTime.</param>
        /// <param name="opportunityID">opportunityID.</param>
        /// <param name="projectID">projectID.</param>
        /// <param name="quoteID">quoteID.</param>
        /// <param name="recipientDisplayName">recipientDisplayName.</param>
        /// <param name="recipientEmailAddress">recipientEmailAddress.</param>
        /// <param name="taskID">taskID.</param>
        /// <param name="templateName">templateName.</param>
        /// <param name="ticketID">ticketID.</param>
        /// <param name="timeEntryID">timeEntryID.</param>
        /// <param name="userDefinedFields">userDefinedFields.</param>
        public NotificationHistoryModel(long? id = default(long?), long? companyID = default(long?), string entityNumber = default(string), string entityTitle = default(string), long? initiatingContactID = default(long?), long? initiatingResourceID = default(long?), bool? isActive = default(bool?), bool? isDeleted = default(bool?), bool? isTemplateJob = default(bool?), int? notificationHistoryTypeID = default(int?), DateTime? notificationSentTime = default(DateTime?), long? opportunityID = default(long?), long? projectID = default(long?), long? quoteID = default(long?), string recipientDisplayName = default(string), string recipientEmailAddress = default(string), long? taskID = default(long?), string templateName = default(string), long? ticketID = default(long?), long? timeEntryID = default(long?), List<UserDefinedField> userDefinedFields = default(List<UserDefinedField>))
        {
            this.Id = id;
            this.CompanyID = companyID;
            this.EntityNumber = entityNumber;
            this.EntityTitle = entityTitle;
            this.InitiatingContactID = initiatingContactID;
            this.InitiatingResourceID = initiatingResourceID;
            this.IsActive = isActive;
            this.IsDeleted = isDeleted;
            this.IsTemplateJob = isTemplateJob;
            this.NotificationHistoryTypeID = notificationHistoryTypeID;
            this.NotificationSentTime = notificationSentTime;
            this.OpportunityID = opportunityID;
            this.ProjectID = projectID;
            this.QuoteID = quoteID;
            this.RecipientDisplayName = recipientDisplayName;
            this.RecipientEmailAddress = recipientEmailAddress;
            this.TaskID = taskID;
            this.TemplateName = templateName;
            this.TicketID = ticketID;
            this.TimeEntryID = timeEntryID;
            this.UserDefinedFields = userDefinedFields;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets CompanyID
        /// </summary>
        [DataMember(Name="companyID", EmitDefaultValue=false)]
        public long? CompanyID { get; set; }

        /// <summary>
        /// Gets or Sets EntityNumber
        /// </summary>
        [DataMember(Name="entityNumber", EmitDefaultValue=false)]
        public string EntityNumber { get; set; }

        /// <summary>
        /// Gets or Sets EntityTitle
        /// </summary>
        [DataMember(Name="entityTitle", EmitDefaultValue=false)]
        public string EntityTitle { get; set; }

        /// <summary>
        /// Gets or Sets InitiatingContactID
        /// </summary>
        [DataMember(Name="initiatingContactID", EmitDefaultValue=false)]
        public long? InitiatingContactID { get; set; }

        /// <summary>
        /// Gets or Sets InitiatingResourceID
        /// </summary>
        [DataMember(Name="initiatingResourceID", EmitDefaultValue=false)]
        public long? InitiatingResourceID { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="isActive", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [DataMember(Name="isDeleted", EmitDefaultValue=false)]
        public bool? IsDeleted { get; set; }

        /// <summary>
        /// Gets or Sets IsTemplateJob
        /// </summary>
        [DataMember(Name="isTemplateJob", EmitDefaultValue=false)]
        public bool? IsTemplateJob { get; set; }

        /// <summary>
        /// Gets or Sets NotificationHistoryTypeID
        /// </summary>
        [DataMember(Name="notificationHistoryTypeID", EmitDefaultValue=false)]
        public int? NotificationHistoryTypeID { get; set; }

        /// <summary>
        /// Gets or Sets NotificationSentTime
        /// </summary>
        [DataMember(Name="notificationSentTime", EmitDefaultValue=false)]
        public DateTime? NotificationSentTime { get; set; }

        /// <summary>
        /// Gets or Sets OpportunityID
        /// </summary>
        [DataMember(Name="opportunityID", EmitDefaultValue=false)]
        public long? OpportunityID { get; set; }

        /// <summary>
        /// Gets or Sets ProjectID
        /// </summary>
        [DataMember(Name="projectID", EmitDefaultValue=false)]
        public long? ProjectID { get; set; }

        /// <summary>
        /// Gets or Sets QuoteID
        /// </summary>
        [DataMember(Name="quoteID", EmitDefaultValue=false)]
        public long? QuoteID { get; set; }

        /// <summary>
        /// Gets or Sets RecipientDisplayName
        /// </summary>
        [DataMember(Name="recipientDisplayName", EmitDefaultValue=false)]
        public string RecipientDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets RecipientEmailAddress
        /// </summary>
        [DataMember(Name="recipientEmailAddress", EmitDefaultValue=false)]
        public string RecipientEmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets TaskID
        /// </summary>
        [DataMember(Name="taskID", EmitDefaultValue=false)]
        public long? TaskID { get; set; }

        /// <summary>
        /// Gets or Sets TemplateName
        /// </summary>
        [DataMember(Name="templateName", EmitDefaultValue=false)]
        public string TemplateName { get; set; }

        /// <summary>
        /// Gets or Sets TicketID
        /// </summary>
        [DataMember(Name="ticketID", EmitDefaultValue=false)]
        public long? TicketID { get; set; }

        /// <summary>
        /// Gets or Sets TimeEntryID
        /// </summary>
        [DataMember(Name="timeEntryID", EmitDefaultValue=false)]
        public long? TimeEntryID { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields", EmitDefaultValue=false)]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NotificationHistoryModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CompanyID: ").Append(CompanyID).Append("\n");
            sb.Append("  EntityNumber: ").Append(EntityNumber).Append("\n");
            sb.Append("  EntityTitle: ").Append(EntityTitle).Append("\n");
            sb.Append("  InitiatingContactID: ").Append(InitiatingContactID).Append("\n");
            sb.Append("  InitiatingResourceID: ").Append(InitiatingResourceID).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  IsTemplateJob: ").Append(IsTemplateJob).Append("\n");
            sb.Append("  NotificationHistoryTypeID: ").Append(NotificationHistoryTypeID).Append("\n");
            sb.Append("  NotificationSentTime: ").Append(NotificationSentTime).Append("\n");
            sb.Append("  OpportunityID: ").Append(OpportunityID).Append("\n");
            sb.Append("  ProjectID: ").Append(ProjectID).Append("\n");
            sb.Append("  QuoteID: ").Append(QuoteID).Append("\n");
            sb.Append("  RecipientDisplayName: ").Append(RecipientDisplayName).Append("\n");
            sb.Append("  RecipientEmailAddress: ").Append(RecipientEmailAddress).Append("\n");
            sb.Append("  TaskID: ").Append(TaskID).Append("\n");
            sb.Append("  TemplateName: ").Append(TemplateName).Append("\n");
            sb.Append("  TicketID: ").Append(TicketID).Append("\n");
            sb.Append("  TimeEntryID: ").Append(TimeEntryID).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NotificationHistoryModel);
        }

        /// <summary>
        /// Returns true if NotificationHistoryModel instances are equal
        /// </summary>
        /// <param name="input">Instance of NotificationHistoryModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NotificationHistoryModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CompanyID == input.CompanyID ||
                    (this.CompanyID != null &&
                    this.CompanyID.Equals(input.CompanyID))
                ) && 
                (
                    this.EntityNumber == input.EntityNumber ||
                    (this.EntityNumber != null &&
                    this.EntityNumber.Equals(input.EntityNumber))
                ) && 
                (
                    this.EntityTitle == input.EntityTitle ||
                    (this.EntityTitle != null &&
                    this.EntityTitle.Equals(input.EntityTitle))
                ) && 
                (
                    this.InitiatingContactID == input.InitiatingContactID ||
                    (this.InitiatingContactID != null &&
                    this.InitiatingContactID.Equals(input.InitiatingContactID))
                ) && 
                (
                    this.InitiatingResourceID == input.InitiatingResourceID ||
                    (this.InitiatingResourceID != null &&
                    this.InitiatingResourceID.Equals(input.InitiatingResourceID))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.IsDeleted == input.IsDeleted ||
                    (this.IsDeleted != null &&
                    this.IsDeleted.Equals(input.IsDeleted))
                ) && 
                (
                    this.IsTemplateJob == input.IsTemplateJob ||
                    (this.IsTemplateJob != null &&
                    this.IsTemplateJob.Equals(input.IsTemplateJob))
                ) && 
                (
                    this.NotificationHistoryTypeID == input.NotificationHistoryTypeID ||
                    (this.NotificationHistoryTypeID != null &&
                    this.NotificationHistoryTypeID.Equals(input.NotificationHistoryTypeID))
                ) && 
                (
                    this.NotificationSentTime == input.NotificationSentTime ||
                    (this.NotificationSentTime != null &&
                    this.NotificationSentTime.Equals(input.NotificationSentTime))
                ) && 
                (
                    this.OpportunityID == input.OpportunityID ||
                    (this.OpportunityID != null &&
                    this.OpportunityID.Equals(input.OpportunityID))
                ) && 
                (
                    this.ProjectID == input.ProjectID ||
                    (this.ProjectID != null &&
                    this.ProjectID.Equals(input.ProjectID))
                ) && 
                (
                    this.QuoteID == input.QuoteID ||
                    (this.QuoteID != null &&
                    this.QuoteID.Equals(input.QuoteID))
                ) && 
                (
                    this.RecipientDisplayName == input.RecipientDisplayName ||
                    (this.RecipientDisplayName != null &&
                    this.RecipientDisplayName.Equals(input.RecipientDisplayName))
                ) && 
                (
                    this.RecipientEmailAddress == input.RecipientEmailAddress ||
                    (this.RecipientEmailAddress != null &&
                    this.RecipientEmailAddress.Equals(input.RecipientEmailAddress))
                ) && 
                (
                    this.TaskID == input.TaskID ||
                    (this.TaskID != null &&
                    this.TaskID.Equals(input.TaskID))
                ) && 
                (
                    this.TemplateName == input.TemplateName ||
                    (this.TemplateName != null &&
                    this.TemplateName.Equals(input.TemplateName))
                ) && 
                (
                    this.TicketID == input.TicketID ||
                    (this.TicketID != null &&
                    this.TicketID.Equals(input.TicketID))
                ) && 
                (
                    this.TimeEntryID == input.TimeEntryID ||
                    (this.TimeEntryID != null &&
                    this.TimeEntryID.Equals(input.TimeEntryID))
                ) && 
                (
                    this.UserDefinedFields == input.UserDefinedFields ||
                    this.UserDefinedFields != null &&
                    this.UserDefinedFields.SequenceEqual(input.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CompanyID != null)
                    hashCode = hashCode * 59 + this.CompanyID.GetHashCode();
                if (this.EntityNumber != null)
                    hashCode = hashCode * 59 + this.EntityNumber.GetHashCode();
                if (this.EntityTitle != null)
                    hashCode = hashCode * 59 + this.EntityTitle.GetHashCode();
                if (this.InitiatingContactID != null)
                    hashCode = hashCode * 59 + this.InitiatingContactID.GetHashCode();
                if (this.InitiatingResourceID != null)
                    hashCode = hashCode * 59 + this.InitiatingResourceID.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.IsDeleted != null)
                    hashCode = hashCode * 59 + this.IsDeleted.GetHashCode();
                if (this.IsTemplateJob != null)
                    hashCode = hashCode * 59 + this.IsTemplateJob.GetHashCode();
                if (this.NotificationHistoryTypeID != null)
                    hashCode = hashCode * 59 + this.NotificationHistoryTypeID.GetHashCode();
                if (this.NotificationSentTime != null)
                    hashCode = hashCode * 59 + this.NotificationSentTime.GetHashCode();
                if (this.OpportunityID != null)
                    hashCode = hashCode * 59 + this.OpportunityID.GetHashCode();
                if (this.ProjectID != null)
                    hashCode = hashCode * 59 + this.ProjectID.GetHashCode();
                if (this.QuoteID != null)
                    hashCode = hashCode * 59 + this.QuoteID.GetHashCode();
                if (this.RecipientDisplayName != null)
                    hashCode = hashCode * 59 + this.RecipientDisplayName.GetHashCode();
                if (this.RecipientEmailAddress != null)
                    hashCode = hashCode * 59 + this.RecipientEmailAddress.GetHashCode();
                if (this.TaskID != null)
                    hashCode = hashCode * 59 + this.TaskID.GetHashCode();
                if (this.TemplateName != null)
                    hashCode = hashCode * 59 + this.TemplateName.GetHashCode();
                if (this.TicketID != null)
                    hashCode = hashCode * 59 + this.TicketID.GetHashCode();
                if (this.TimeEntryID != null)
                    hashCode = hashCode * 59 + this.TimeEntryID.GetHashCode();
                if (this.UserDefinedFields != null)
                    hashCode = hashCode * 59 + this.UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
