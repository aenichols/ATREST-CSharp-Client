/* 
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// UserDefinedFieldDefinitionModel
    /// </summary>
    [DataContract]
    public partial class UserDefinedFieldDefinitionModel :  IEquatable<UserDefinedFieldDefinitionModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserDefinedFieldDefinitionModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="createDate">createDate.</param>
        /// <param name="crmToProjectUdfId">crmToProjectUdfId.</param>
        /// <param name="dataType">dataType.</param>
        /// <param name="defaultValue">defaultValue.</param>
        /// <param name="description">description.</param>
        /// <param name="displayFormat">displayFormat.</param>
        /// <param name="isActive">isActive.</param>
        /// <param name="isEncrypted">isEncrypted.</param>
        /// <param name="isFieldMapping">isFieldMapping.</param>
        /// <param name="isPrivate">isPrivate.</param>
        /// <param name="isProtected">isProtected.</param>
        /// <param name="isRequired">isRequired.</param>
        /// <param name="isVisibleToClientPortal">isVisibleToClientPortal.</param>
        /// <param name="mergeVariableName">mergeVariableName.</param>
        /// <param name="name">name.</param>
        /// <param name="numberOfDecimalPlaces">numberOfDecimalPlaces.</param>
        /// <param name="sortOrder">sortOrder.</param>
        /// <param name="udfType">udfType.</param>
        /// <param name="userDefinedFields">userDefinedFields.</param>
        public UserDefinedFieldDefinitionModel(long? id = default(long?), DateTime? createDate = default(DateTime?), long? crmToProjectUdfId = default(long?), int? dataType = default(int?), Object defaultValue = default(Object), string description = default(string), int? displayFormat = default(int?), bool? isActive = default(bool?), bool? isEncrypted = default(bool?), bool? isFieldMapping = default(bool?), bool? isPrivate = default(bool?), bool? isProtected = default(bool?), bool? isRequired = default(bool?), bool? isVisibleToClientPortal = default(bool?), string mergeVariableName = default(string), string name = default(string), int? numberOfDecimalPlaces = default(int?), int? sortOrder = default(int?), int? udfType = default(int?), List<UserDefinedField> userDefinedFields = default(List<UserDefinedField>))
        {
            this.Id = id;
            this.CreateDate = createDate;
            this.CrmToProjectUdfId = crmToProjectUdfId;
            this.DataType = dataType;
            this.DefaultValue = defaultValue;
            this.Description = description;
            this.DisplayFormat = displayFormat;
            this.IsActive = isActive;
            this.IsEncrypted = isEncrypted;
            this.IsFieldMapping = isFieldMapping;
            this.IsPrivate = isPrivate;
            this.IsProtected = isProtected;
            this.IsRequired = isRequired;
            this.IsVisibleToClientPortal = isVisibleToClientPortal;
            this.MergeVariableName = mergeVariableName;
            this.Name = name;
            this.NumberOfDecimalPlaces = numberOfDecimalPlaces;
            this.SortOrder = sortOrder;
            this.UdfType = udfType;
            this.UserDefinedFields = userDefinedFields;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [DataMember(Name="createDate", EmitDefaultValue=false)]
        public DateTime? CreateDate { get; set; }

        /// <summary>
        /// Gets or Sets CrmToProjectUdfId
        /// </summary>
        [DataMember(Name="crmToProjectUdfId", EmitDefaultValue=false)]
        public long? CrmToProjectUdfId { get; set; }

        /// <summary>
        /// Gets or Sets DataType
        /// </summary>
        [DataMember(Name="dataType", EmitDefaultValue=false)]
        public int? DataType { get; set; }

        /// <summary>
        /// Gets or Sets DefaultValue
        /// </summary>
        [DataMember(Name="defaultValue", EmitDefaultValue=false)]
        public Object DefaultValue { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DisplayFormat
        /// </summary>
        [DataMember(Name="displayFormat", EmitDefaultValue=false)]
        public int? DisplayFormat { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="isActive", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets IsEncrypted
        /// </summary>
        [DataMember(Name="isEncrypted", EmitDefaultValue=false)]
        public bool? IsEncrypted { get; set; }

        /// <summary>
        /// Gets or Sets IsFieldMapping
        /// </summary>
        [DataMember(Name="isFieldMapping", EmitDefaultValue=false)]
        public bool? IsFieldMapping { get; set; }

        /// <summary>
        /// Gets or Sets IsPrivate
        /// </summary>
        [DataMember(Name="isPrivate", EmitDefaultValue=false)]
        public bool? IsPrivate { get; set; }

        /// <summary>
        /// Gets or Sets IsProtected
        /// </summary>
        [DataMember(Name="isProtected", EmitDefaultValue=false)]
        public bool? IsProtected { get; set; }

        /// <summary>
        /// Gets or Sets IsRequired
        /// </summary>
        [DataMember(Name="isRequired", EmitDefaultValue=false)]
        public bool? IsRequired { get; set; }

        /// <summary>
        /// Gets or Sets IsVisibleToClientPortal
        /// </summary>
        [DataMember(Name="isVisibleToClientPortal", EmitDefaultValue=false)]
        public bool? IsVisibleToClientPortal { get; set; }

        /// <summary>
        /// Gets or Sets MergeVariableName
        /// </summary>
        [DataMember(Name="mergeVariableName", EmitDefaultValue=false)]
        public string MergeVariableName { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfDecimalPlaces
        /// </summary>
        [DataMember(Name="numberOfDecimalPlaces", EmitDefaultValue=false)]
        public int? NumberOfDecimalPlaces { get; set; }

        /// <summary>
        /// Gets or Sets SortOrder
        /// </summary>
        [DataMember(Name="sortOrder", EmitDefaultValue=false)]
        public int? SortOrder { get; set; }

        /// <summary>
        /// Gets or Sets UdfType
        /// </summary>
        [DataMember(Name="udfType", EmitDefaultValue=false)]
        public int? UdfType { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields", EmitDefaultValue=false)]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserDefinedFieldDefinitionModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  CrmToProjectUdfId: ").Append(CrmToProjectUdfId).Append("\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayFormat: ").Append(DisplayFormat).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsEncrypted: ").Append(IsEncrypted).Append("\n");
            sb.Append("  IsFieldMapping: ").Append(IsFieldMapping).Append("\n");
            sb.Append("  IsPrivate: ").Append(IsPrivate).Append("\n");
            sb.Append("  IsProtected: ").Append(IsProtected).Append("\n");
            sb.Append("  IsRequired: ").Append(IsRequired).Append("\n");
            sb.Append("  IsVisibleToClientPortal: ").Append(IsVisibleToClientPortal).Append("\n");
            sb.Append("  MergeVariableName: ").Append(MergeVariableName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NumberOfDecimalPlaces: ").Append(NumberOfDecimalPlaces).Append("\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("  UdfType: ").Append(UdfType).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserDefinedFieldDefinitionModel);
        }

        /// <summary>
        /// Returns true if UserDefinedFieldDefinitionModel instances are equal
        /// </summary>
        /// <param name="input">Instance of UserDefinedFieldDefinitionModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserDefinedFieldDefinitionModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) && 
                (
                    this.CrmToProjectUdfId == input.CrmToProjectUdfId ||
                    (this.CrmToProjectUdfId != null &&
                    this.CrmToProjectUdfId.Equals(input.CrmToProjectUdfId))
                ) && 
                (
                    this.DataType == input.DataType ||
                    (this.DataType != null &&
                    this.DataType.Equals(input.DataType))
                ) && 
                (
                    this.DefaultValue == input.DefaultValue ||
                    (this.DefaultValue != null &&
                    this.DefaultValue.Equals(input.DefaultValue))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DisplayFormat == input.DisplayFormat ||
                    (this.DisplayFormat != null &&
                    this.DisplayFormat.Equals(input.DisplayFormat))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.IsEncrypted == input.IsEncrypted ||
                    (this.IsEncrypted != null &&
                    this.IsEncrypted.Equals(input.IsEncrypted))
                ) && 
                (
                    this.IsFieldMapping == input.IsFieldMapping ||
                    (this.IsFieldMapping != null &&
                    this.IsFieldMapping.Equals(input.IsFieldMapping))
                ) && 
                (
                    this.IsPrivate == input.IsPrivate ||
                    (this.IsPrivate != null &&
                    this.IsPrivate.Equals(input.IsPrivate))
                ) && 
                (
                    this.IsProtected == input.IsProtected ||
                    (this.IsProtected != null &&
                    this.IsProtected.Equals(input.IsProtected))
                ) && 
                (
                    this.IsRequired == input.IsRequired ||
                    (this.IsRequired != null &&
                    this.IsRequired.Equals(input.IsRequired))
                ) && 
                (
                    this.IsVisibleToClientPortal == input.IsVisibleToClientPortal ||
                    (this.IsVisibleToClientPortal != null &&
                    this.IsVisibleToClientPortal.Equals(input.IsVisibleToClientPortal))
                ) && 
                (
                    this.MergeVariableName == input.MergeVariableName ||
                    (this.MergeVariableName != null &&
                    this.MergeVariableName.Equals(input.MergeVariableName))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NumberOfDecimalPlaces == input.NumberOfDecimalPlaces ||
                    (this.NumberOfDecimalPlaces != null &&
                    this.NumberOfDecimalPlaces.Equals(input.NumberOfDecimalPlaces))
                ) && 
                (
                    this.SortOrder == input.SortOrder ||
                    (this.SortOrder != null &&
                    this.SortOrder.Equals(input.SortOrder))
                ) && 
                (
                    this.UdfType == input.UdfType ||
                    (this.UdfType != null &&
                    this.UdfType.Equals(input.UdfType))
                ) && 
                (
                    this.UserDefinedFields == input.UserDefinedFields ||
                    this.UserDefinedFields != null &&
                    this.UserDefinedFields.SequenceEqual(input.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CreateDate != null)
                    hashCode = hashCode * 59 + this.CreateDate.GetHashCode();
                if (this.CrmToProjectUdfId != null)
                    hashCode = hashCode * 59 + this.CrmToProjectUdfId.GetHashCode();
                if (this.DataType != null)
                    hashCode = hashCode * 59 + this.DataType.GetHashCode();
                if (this.DefaultValue != null)
                    hashCode = hashCode * 59 + this.DefaultValue.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DisplayFormat != null)
                    hashCode = hashCode * 59 + this.DisplayFormat.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.IsEncrypted != null)
                    hashCode = hashCode * 59 + this.IsEncrypted.GetHashCode();
                if (this.IsFieldMapping != null)
                    hashCode = hashCode * 59 + this.IsFieldMapping.GetHashCode();
                if (this.IsPrivate != null)
                    hashCode = hashCode * 59 + this.IsPrivate.GetHashCode();
                if (this.IsProtected != null)
                    hashCode = hashCode * 59 + this.IsProtected.GetHashCode();
                if (this.IsRequired != null)
                    hashCode = hashCode * 59 + this.IsRequired.GetHashCode();
                if (this.IsVisibleToClientPortal != null)
                    hashCode = hashCode * 59 + this.IsVisibleToClientPortal.GetHashCode();
                if (this.MergeVariableName != null)
                    hashCode = hashCode * 59 + this.MergeVariableName.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.NumberOfDecimalPlaces != null)
                    hashCode = hashCode * 59 + this.NumberOfDecimalPlaces.GetHashCode();
                if (this.SortOrder != null)
                    hashCode = hashCode * 59 + this.SortOrder.GetHashCode();
                if (this.UdfType != null)
                    hashCode = hashCode * 59 + this.UdfType.GetHashCode();
                if (this.UserDefinedFields != null)
                    hashCode = hashCode * 59 + this.UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
