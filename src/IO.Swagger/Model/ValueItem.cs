/* 
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ValueItem
    /// </summary>
    [DataContract]
    public partial class ValueItem :  IEquatable<ValueItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ValueItem" /> class.
        /// </summary>
        /// <param name="elementList">elementList.</param>
        /// <param name="boolValue">boolValue.</param>
        /// <param name="longValue">longValue.</param>
        /// <param name="stringValue">stringValue.</param>
        public ValueItem(List<CollectionItem> elementList = default(List<CollectionItem>), bool? boolValue = default(bool?), long? longValue = default(long?), string stringValue = default(string))
        {
            this.ElementList = elementList;
            this.BoolValue = boolValue;
            this.LongValue = longValue;
            this.StringValue = stringValue;
        }
        
        /// <summary>
        /// Gets or Sets ElementList
        /// </summary>
        [DataMember(Name="elementList", EmitDefaultValue=false)]
        public List<CollectionItem> ElementList { get; set; }

        /// <summary>
        /// Gets or Sets BoolValue
        /// </summary>
        [DataMember(Name="boolValue", EmitDefaultValue=false)]
        public bool? BoolValue { get; set; }

        /// <summary>
        /// Gets or Sets LongValue
        /// </summary>
        [DataMember(Name="longValue", EmitDefaultValue=false)]
        public long? LongValue { get; set; }

        /// <summary>
        /// Gets or Sets StringValue
        /// </summary>
        [DataMember(Name="stringValue", EmitDefaultValue=false)]
        public string StringValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ValueItem {\n");
            sb.Append("  ElementList: ").Append(ElementList).Append("\n");
            sb.Append("  BoolValue: ").Append(BoolValue).Append("\n");
            sb.Append("  LongValue: ").Append(LongValue).Append("\n");
            sb.Append("  StringValue: ").Append(StringValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ValueItem);
        }

        /// <summary>
        /// Returns true if ValueItem instances are equal
        /// </summary>
        /// <param name="input">Instance of ValueItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ValueItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ElementList == input.ElementList ||
                    this.ElementList != null &&
                    this.ElementList.SequenceEqual(input.ElementList)
                ) && 
                (
                    this.BoolValue == input.BoolValue ||
                    (this.BoolValue != null &&
                    this.BoolValue.Equals(input.BoolValue))
                ) && 
                (
                    this.LongValue == input.LongValue ||
                    (this.LongValue != null &&
                    this.LongValue.Equals(input.LongValue))
                ) && 
                (
                    this.StringValue == input.StringValue ||
                    (this.StringValue != null &&
                    this.StringValue.Equals(input.StringValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ElementList != null)
                    hashCode = hashCode * 59 + this.ElementList.GetHashCode();
                if (this.BoolValue != null)
                    hashCode = hashCode * 59 + this.BoolValue.GetHashCode();
                if (this.LongValue != null)
                    hashCode = hashCode * 59 + this.LongValue.GetHashCode();
                if (this.StringValue != null)
                    hashCode = hashCode * 59 + this.StringValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
