/* 
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ConfigurationItemModel
    /// </summary>
    [DataContract]
    public partial class ConfigurationItemModel :  IEquatable<ConfigurationItemModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationItemModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="apiVendorID">apiVendorID.</param>
        /// <param name="configurationItemCategoryID">configurationItemCategoryID.</param>
        /// <param name="companyID">companyID.</param>
        /// <param name="companyLocationID">companyLocationID.</param>
        /// <param name="configurationItemType">configurationItemType.</param>
        /// <param name="contactID">contactID.</param>
        /// <param name="contractID">contractID.</param>
        /// <param name="contractServiceBundleID">contractServiceBundleID.</param>
        /// <param name="contractServiceID">contractServiceID.</param>
        /// <param name="createDate">createDate.</param>
        /// <param name="createdByPersonID">createdByPersonID.</param>
        /// <param name="dailyCost">dailyCost.</param>
        /// <param name="dattoAvailableKilobytes">dattoAvailableKilobytes.</param>
        /// <param name="dattoDeviceMemoryMegabytes">dattoDeviceMemoryMegabytes.</param>
        /// <param name="dattoDrivesErrors">dattoDrivesErrors.</param>
        /// <param name="dattoHostname">dattoHostname.</param>
        /// <param name="dattoInternalIP">dattoInternalIP.</param>
        /// <param name="dattoKernelVersionID">dattoKernelVersionID.</param>
        /// <param name="dattoLastCheckInDateTime">dattoLastCheckInDateTime.</param>
        /// <param name="dattoNICSpeedKilobitsPerSecond">dattoNICSpeedKilobitsPerSecond.</param>
        /// <param name="dattoNumberOfAgents">dattoNumberOfAgents.</param>
        /// <param name="dattoNumberOfDrives">dattoNumberOfDrives.</param>
        /// <param name="dattoNumberOfVolumes">dattoNumberOfVolumes.</param>
        /// <param name="dattoOffsiteUsedBytes">dattoOffsiteUsedBytes.</param>
        /// <param name="dattoOSVersionID">dattoOSVersionID.</param>
        /// <param name="dattoPercentageUsed">dattoPercentageUsed.</param>
        /// <param name="dattoProtectedKilobytes">dattoProtectedKilobytes.</param>
        /// <param name="dattoRemoteIP">dattoRemoteIP.</param>
        /// <param name="dattoSerialNumber">dattoSerialNumber.</param>
        /// <param name="dattoUptimeSeconds">dattoUptimeSeconds.</param>
        /// <param name="dattoUsedKilobytes">dattoUsedKilobytes.</param>
        /// <param name="dattoZFSVersionID">dattoZFSVersionID.</param>
        /// <param name="deviceNetworkingID">deviceNetworkingID.</param>
        /// <param name="domain">domain.</param>
        /// <param name="domainRegistrarID">domainRegistrarID.</param>
        /// <param name="domainRegistrationDateTime">domainRegistrationDateTime.</param>
        /// <param name="domainLastUpdatedDateTime">domainLastUpdatedDateTime.</param>
        /// <param name="domainExpirationDateTime">domainExpirationDateTime.</param>
        /// <param name="hourlyCost">hourlyCost.</param>
        /// <param name="impersonatorCreatorResourceID">impersonatorCreatorResourceID.</param>
        /// <param name="installDate">installDate.</param>
        /// <param name="installedByContactID">installedByContactID.</param>
        /// <param name="installedByID">installedByID.</param>
        /// <param name="isActive">isActive.</param>
        /// <param name="lastActivityPersonID">lastActivityPersonID.</param>
        /// <param name="lastActivityPersonType">lastActivityPersonType.</param>
        /// <param name="lastModifiedTime">lastModifiedTime.</param>
        /// <param name="location">location.</param>
        /// <param name="monthlyCost">monthlyCost.</param>
        /// <param name="notes">notes.</param>
        /// <param name="numberOfUsers">numberOfUsers.</param>
        /// <param name="parentConfigurationItemID">parentConfigurationItemID.</param>
        /// <param name="perUseCost">perUseCost.</param>
        /// <param name="productID">productID.</param>
        /// <param name="referenceNumber">referenceNumber.</param>
        /// <param name="referenceTitle">referenceTitle.</param>
        /// <param name="rmmDeviceAuditAntivirusStatusID">rmmDeviceAuditAntivirusStatusID.</param>
        /// <param name="rmmDeviceAuditArchitectureID">rmmDeviceAuditArchitectureID.</param>
        /// <param name="rmmDeviceAuditBackupStatusID">rmmDeviceAuditBackupStatusID.</param>
        /// <param name="rmmDeviceAuditDescription">rmmDeviceAuditDescription.</param>
        /// <param name="rmmDeviceAuditDeviceTypeID">rmmDeviceAuditDeviceTypeID.</param>
        /// <param name="rmmDeviceAuditDisplayAdaptorID">rmmDeviceAuditDisplayAdaptorID.</param>
        /// <param name="rmmDeviceAuditDomainID">rmmDeviceAuditDomainID.</param>
        /// <param name="rmmDeviceAuditExternalIPAddress">rmmDeviceAuditExternalIPAddress.</param>
        /// <param name="rmmDeviceAuditHostname">rmmDeviceAuditHostname.</param>
        /// <param name="rmmDeviceAuditIPAddress">rmmDeviceAuditIPAddress.</param>
        /// <param name="rmmDeviceAuditLastUser">rmmDeviceAuditLastUser.</param>
        /// <param name="rmmDeviceAuditMacAddress">rmmDeviceAuditMacAddress.</param>
        /// <param name="rmmDeviceAuditManufacturerID">rmmDeviceAuditManufacturerID.</param>
        /// <param name="rmmDeviceAuditMemoryBytes">rmmDeviceAuditMemoryBytes.</param>
        /// <param name="rmmDeviceAuditMissingPatchCount">rmmDeviceAuditMissingPatchCount.</param>
        /// <param name="rmmDeviceAuditMobileNetworkOperatorID">rmmDeviceAuditMobileNetworkOperatorID.</param>
        /// <param name="rmmDeviceAuditMobileNumber">rmmDeviceAuditMobileNumber.</param>
        /// <param name="rmmDeviceAuditModelID">rmmDeviceAuditModelID.</param>
        /// <param name="rmmDeviceAuditMotherboardID">rmmDeviceAuditMotherboardID.</param>
        /// <param name="rmmDeviceAuditOperatingSystem">rmmDeviceAuditOperatingSystem.</param>
        /// <param name="rmmDeviceAuditPatchStatusID">rmmDeviceAuditPatchStatusID.</param>
        /// <param name="rmmDeviceAuditProcessorID">rmmDeviceAuditProcessorID.</param>
        /// <param name="rmmDeviceAuditServicePackID">rmmDeviceAuditServicePackID.</param>
        /// <param name="rmmDeviceAuditSNMPContact">rmmDeviceAuditSNMPContact.</param>
        /// <param name="rmmDeviceAuditSNMPLocation">rmmDeviceAuditSNMPLocation.</param>
        /// <param name="rmmDeviceAuditSNMPName">rmmDeviceAuditSNMPName.</param>
        /// <param name="rmmDeviceAuditSoftwareStatusID">rmmDeviceAuditSoftwareStatusID.</param>
        /// <param name="rmmDeviceAuditStorageBytes">rmmDeviceAuditStorageBytes.</param>
        /// <param name="rmmDeviceID">rmmDeviceID.</param>
        /// <param name="rmmDeviceUID">rmmDeviceUID.</param>
        /// <param name="rmmOpenAlertCount">rmmOpenAlertCount.</param>
        /// <param name="serialNumber">serialNumber.</param>
        /// <param name="serviceBundleID">serviceBundleID.</param>
        /// <param name="serviceID">serviceID.</param>
        /// <param name="serviceLevelAgreementID">serviceLevelAgreementID.</param>
        /// <param name="setupFee">setupFee.</param>
        /// <param name="sourceChargeID">sourceChargeID.</param>
        /// <param name="sourceChargeType">sourceChargeType.</param>
        /// <param name="sslSource">sslSource.</param>
        /// <param name="sslCommonName">sslCommonName.</param>
        /// <param name="sslValidFromDateTime">sslValidFromDateTime.</param>
        /// <param name="sslValidUntilDateTime">sslValidUntilDateTime.</param>
        /// <param name="sslIssuedBy">sslIssuedBy.</param>
        /// <param name="sslOrganization">sslOrganization.</param>
        /// <param name="sslOrganizationUnit">sslOrganizationUnit.</param>
        /// <param name="sslLocation">sslLocation.</param>
        /// <param name="sslSerialNumber">sslSerialNumber.</param>
        /// <param name="sslSignatureAlgorithm">sslSignatureAlgorithm.</param>
        /// <param name="vendorID">vendorID.</param>
        /// <param name="warrantyExpirationDate">warrantyExpirationDate.</param>
        /// <param name="userDefinedFields">userDefinedFields.</param>
        public ConfigurationItemModel(long? id = default(long?), int? apiVendorID = default(int?), int? configurationItemCategoryID = default(int?), int? companyID = default(int?), int? companyLocationID = default(int?), int? configurationItemType = default(int?), int? contactID = default(int?), int? contractID = default(int?), int? contractServiceBundleID = default(int?), int? contractServiceID = default(int?), DateTime? createDate = default(DateTime?), int? createdByPersonID = default(int?), double? dailyCost = default(double?), long? dattoAvailableKilobytes = default(long?), int? dattoDeviceMemoryMegabytes = default(int?), bool? dattoDrivesErrors = default(bool?), string dattoHostname = default(string), string dattoInternalIP = default(string), int? dattoKernelVersionID = default(int?), DateTime? dattoLastCheckInDateTime = default(DateTime?), int? dattoNICSpeedKilobitsPerSecond = default(int?), int? dattoNumberOfAgents = default(int?), int? dattoNumberOfDrives = default(int?), int? dattoNumberOfVolumes = default(int?), long? dattoOffsiteUsedBytes = default(long?), int? dattoOSVersionID = default(int?), double? dattoPercentageUsed = default(double?), long? dattoProtectedKilobytes = default(long?), string dattoRemoteIP = default(string), string dattoSerialNumber = default(string), int? dattoUptimeSeconds = default(int?), long? dattoUsedKilobytes = default(long?), int? dattoZFSVersionID = default(int?), string deviceNetworkingID = default(string), string domain = default(string), int? domainRegistrarID = default(int?), DateTime? domainRegistrationDateTime = default(DateTime?), DateTime? domainLastUpdatedDateTime = default(DateTime?), DateTime? domainExpirationDateTime = default(DateTime?), double? hourlyCost = default(double?), int? impersonatorCreatorResourceID = default(int?), DateTime? installDate = default(DateTime?), int? installedByContactID = default(int?), int? installedByID = default(int?), bool? isActive = default(bool?), int? lastActivityPersonID = default(int?), int? lastActivityPersonType = default(int?), DateTime? lastModifiedTime = default(DateTime?), string location = default(string), double? monthlyCost = default(double?), string notes = default(string), double? numberOfUsers = default(double?), int? parentConfigurationItemID = default(int?), double? perUseCost = default(double?), int? productID = default(int?), string referenceNumber = default(string), string referenceTitle = default(string), int? rmmDeviceAuditAntivirusStatusID = default(int?), int? rmmDeviceAuditArchitectureID = default(int?), int? rmmDeviceAuditBackupStatusID = default(int?), string rmmDeviceAuditDescription = default(string), int? rmmDeviceAuditDeviceTypeID = default(int?), int? rmmDeviceAuditDisplayAdaptorID = default(int?), int? rmmDeviceAuditDomainID = default(int?), string rmmDeviceAuditExternalIPAddress = default(string), string rmmDeviceAuditHostname = default(string), string rmmDeviceAuditIPAddress = default(string), string rmmDeviceAuditLastUser = default(string), string rmmDeviceAuditMacAddress = default(string), int? rmmDeviceAuditManufacturerID = default(int?), long? rmmDeviceAuditMemoryBytes = default(long?), int? rmmDeviceAuditMissingPatchCount = default(int?), int? rmmDeviceAuditMobileNetworkOperatorID = default(int?), string rmmDeviceAuditMobileNumber = default(string), int? rmmDeviceAuditModelID = default(int?), int? rmmDeviceAuditMotherboardID = default(int?), string rmmDeviceAuditOperatingSystem = default(string), int? rmmDeviceAuditPatchStatusID = default(int?), int? rmmDeviceAuditProcessorID = default(int?), int? rmmDeviceAuditServicePackID = default(int?), string rmmDeviceAuditSNMPContact = default(string), string rmmDeviceAuditSNMPLocation = default(string), string rmmDeviceAuditSNMPName = default(string), int? rmmDeviceAuditSoftwareStatusID = default(int?), long? rmmDeviceAuditStorageBytes = default(long?), long? rmmDeviceID = default(long?), string rmmDeviceUID = default(string), int? rmmOpenAlertCount = default(int?), string serialNumber = default(string), int? serviceBundleID = default(int?), int? serviceID = default(int?), int? serviceLevelAgreementID = default(int?), double? setupFee = default(double?), int? sourceChargeID = default(int?), int? sourceChargeType = default(int?), string sslSource = default(string), string sslCommonName = default(string), DateTime? sslValidFromDateTime = default(DateTime?), DateTime? sslValidUntilDateTime = default(DateTime?), string sslIssuedBy = default(string), string sslOrganization = default(string), string sslOrganizationUnit = default(string), string sslLocation = default(string), string sslSerialNumber = default(string), string sslSignatureAlgorithm = default(string), int? vendorID = default(int?), DateTime? warrantyExpirationDate = default(DateTime?), List<UserDefinedField> userDefinedFields = default(List<UserDefinedField>))
        {
            this.Id = id;
            this.ApiVendorID = apiVendorID;
            this.ConfigurationItemCategoryID = configurationItemCategoryID;
            this.CompanyID = companyID;
            this.CompanyLocationID = companyLocationID;
            this.ConfigurationItemType = configurationItemType;
            this.ContactID = contactID;
            this.ContractID = contractID;
            this.ContractServiceBundleID = contractServiceBundleID;
            this.ContractServiceID = contractServiceID;
            this.CreateDate = createDate;
            this.CreatedByPersonID = createdByPersonID;
            this.DailyCost = dailyCost;
            this.DattoAvailableKilobytes = dattoAvailableKilobytes;
            this.DattoDeviceMemoryMegabytes = dattoDeviceMemoryMegabytes;
            this.DattoDrivesErrors = dattoDrivesErrors;
            this.DattoHostname = dattoHostname;
            this.DattoInternalIP = dattoInternalIP;
            this.DattoKernelVersionID = dattoKernelVersionID;
            this.DattoLastCheckInDateTime = dattoLastCheckInDateTime;
            this.DattoNICSpeedKilobitsPerSecond = dattoNICSpeedKilobitsPerSecond;
            this.DattoNumberOfAgents = dattoNumberOfAgents;
            this.DattoNumberOfDrives = dattoNumberOfDrives;
            this.DattoNumberOfVolumes = dattoNumberOfVolumes;
            this.DattoOffsiteUsedBytes = dattoOffsiteUsedBytes;
            this.DattoOSVersionID = dattoOSVersionID;
            this.DattoPercentageUsed = dattoPercentageUsed;
            this.DattoProtectedKilobytes = dattoProtectedKilobytes;
            this.DattoRemoteIP = dattoRemoteIP;
            this.DattoSerialNumber = dattoSerialNumber;
            this.DattoUptimeSeconds = dattoUptimeSeconds;
            this.DattoUsedKilobytes = dattoUsedKilobytes;
            this.DattoZFSVersionID = dattoZFSVersionID;
            this.DeviceNetworkingID = deviceNetworkingID;
            this.Domain = domain;
            this.DomainRegistrarID = domainRegistrarID;
            this.DomainRegistrationDateTime = domainRegistrationDateTime;
            this.DomainLastUpdatedDateTime = domainLastUpdatedDateTime;
            this.DomainExpirationDateTime = domainExpirationDateTime;
            this.HourlyCost = hourlyCost;
            this.ImpersonatorCreatorResourceID = impersonatorCreatorResourceID;
            this.InstallDate = installDate;
            this.InstalledByContactID = installedByContactID;
            this.InstalledByID = installedByID;
            this.IsActive = isActive;
            this.LastActivityPersonID = lastActivityPersonID;
            this.LastActivityPersonType = lastActivityPersonType;
            this.LastModifiedTime = lastModifiedTime;
            this.Location = location;
            this.MonthlyCost = monthlyCost;
            this.Notes = notes;
            this.NumberOfUsers = numberOfUsers;
            this.ParentConfigurationItemID = parentConfigurationItemID;
            this.PerUseCost = perUseCost;
            this.ProductID = productID;
            this.ReferenceNumber = referenceNumber;
            this.ReferenceTitle = referenceTitle;
            this.RmmDeviceAuditAntivirusStatusID = rmmDeviceAuditAntivirusStatusID;
            this.RmmDeviceAuditArchitectureID = rmmDeviceAuditArchitectureID;
            this.RmmDeviceAuditBackupStatusID = rmmDeviceAuditBackupStatusID;
            this.RmmDeviceAuditDescription = rmmDeviceAuditDescription;
            this.RmmDeviceAuditDeviceTypeID = rmmDeviceAuditDeviceTypeID;
            this.RmmDeviceAuditDisplayAdaptorID = rmmDeviceAuditDisplayAdaptorID;
            this.RmmDeviceAuditDomainID = rmmDeviceAuditDomainID;
            this.RmmDeviceAuditExternalIPAddress = rmmDeviceAuditExternalIPAddress;
            this.RmmDeviceAuditHostname = rmmDeviceAuditHostname;
            this.RmmDeviceAuditIPAddress = rmmDeviceAuditIPAddress;
            this.RmmDeviceAuditLastUser = rmmDeviceAuditLastUser;
            this.RmmDeviceAuditMacAddress = rmmDeviceAuditMacAddress;
            this.RmmDeviceAuditManufacturerID = rmmDeviceAuditManufacturerID;
            this.RmmDeviceAuditMemoryBytes = rmmDeviceAuditMemoryBytes;
            this.RmmDeviceAuditMissingPatchCount = rmmDeviceAuditMissingPatchCount;
            this.RmmDeviceAuditMobileNetworkOperatorID = rmmDeviceAuditMobileNetworkOperatorID;
            this.RmmDeviceAuditMobileNumber = rmmDeviceAuditMobileNumber;
            this.RmmDeviceAuditModelID = rmmDeviceAuditModelID;
            this.RmmDeviceAuditMotherboardID = rmmDeviceAuditMotherboardID;
            this.RmmDeviceAuditOperatingSystem = rmmDeviceAuditOperatingSystem;
            this.RmmDeviceAuditPatchStatusID = rmmDeviceAuditPatchStatusID;
            this.RmmDeviceAuditProcessorID = rmmDeviceAuditProcessorID;
            this.RmmDeviceAuditServicePackID = rmmDeviceAuditServicePackID;
            this.RmmDeviceAuditSNMPContact = rmmDeviceAuditSNMPContact;
            this.RmmDeviceAuditSNMPLocation = rmmDeviceAuditSNMPLocation;
            this.RmmDeviceAuditSNMPName = rmmDeviceAuditSNMPName;
            this.RmmDeviceAuditSoftwareStatusID = rmmDeviceAuditSoftwareStatusID;
            this.RmmDeviceAuditStorageBytes = rmmDeviceAuditStorageBytes;
            this.RmmDeviceID = rmmDeviceID;
            this.RmmDeviceUID = rmmDeviceUID;
            this.RmmOpenAlertCount = rmmOpenAlertCount;
            this.SerialNumber = serialNumber;
            this.ServiceBundleID = serviceBundleID;
            this.ServiceID = serviceID;
            this.ServiceLevelAgreementID = serviceLevelAgreementID;
            this.SetupFee = setupFee;
            this.SourceChargeID = sourceChargeID;
            this.SourceChargeType = sourceChargeType;
            this.SslSource = sslSource;
            this.SslCommonName = sslCommonName;
            this.SslValidFromDateTime = sslValidFromDateTime;
            this.SslValidUntilDateTime = sslValidUntilDateTime;
            this.SslIssuedBy = sslIssuedBy;
            this.SslOrganization = sslOrganization;
            this.SslOrganizationUnit = sslOrganizationUnit;
            this.SslLocation = sslLocation;
            this.SslSerialNumber = sslSerialNumber;
            this.SslSignatureAlgorithm = sslSignatureAlgorithm;
            this.VendorID = vendorID;
            this.WarrantyExpirationDate = warrantyExpirationDate;
            this.UserDefinedFields = userDefinedFields;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets ApiVendorID
        /// </summary>
        [DataMember(Name="apiVendorID", EmitDefaultValue=false)]
        public int? ApiVendorID { get; set; }

        /// <summary>
        /// Gets or Sets ConfigurationItemCategoryID
        /// </summary>
        [DataMember(Name="configurationItemCategoryID", EmitDefaultValue=false)]
        public int? ConfigurationItemCategoryID { get; set; }

        /// <summary>
        /// Gets or Sets CompanyID
        /// </summary>
        [DataMember(Name="companyID", EmitDefaultValue=false)]
        public int? CompanyID { get; set; }

        /// <summary>
        /// Gets or Sets CompanyLocationID
        /// </summary>
        [DataMember(Name="companyLocationID", EmitDefaultValue=false)]
        public int? CompanyLocationID { get; set; }

        /// <summary>
        /// Gets or Sets ConfigurationItemType
        /// </summary>
        [DataMember(Name="configurationItemType", EmitDefaultValue=false)]
        public int? ConfigurationItemType { get; set; }

        /// <summary>
        /// Gets or Sets ContactID
        /// </summary>
        [DataMember(Name="contactID", EmitDefaultValue=false)]
        public int? ContactID { get; set; }

        /// <summary>
        /// Gets or Sets ContractID
        /// </summary>
        [DataMember(Name="contractID", EmitDefaultValue=false)]
        public int? ContractID { get; set; }

        /// <summary>
        /// Gets or Sets ContractServiceBundleID
        /// </summary>
        [DataMember(Name="contractServiceBundleID", EmitDefaultValue=false)]
        public int? ContractServiceBundleID { get; set; }

        /// <summary>
        /// Gets or Sets ContractServiceID
        /// </summary>
        [DataMember(Name="contractServiceID", EmitDefaultValue=false)]
        public int? ContractServiceID { get; set; }

        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [DataMember(Name="createDate", EmitDefaultValue=false)]
        public DateTime? CreateDate { get; set; }

        /// <summary>
        /// Gets or Sets CreatedByPersonID
        /// </summary>
        [DataMember(Name="createdByPersonID", EmitDefaultValue=false)]
        public int? CreatedByPersonID { get; set; }

        /// <summary>
        /// Gets or Sets DailyCost
        /// </summary>
        [DataMember(Name="dailyCost", EmitDefaultValue=false)]
        public double? DailyCost { get; set; }

        /// <summary>
        /// Gets or Sets DattoAvailableKilobytes
        /// </summary>
        [DataMember(Name="dattoAvailableKilobytes", EmitDefaultValue=false)]
        public long? DattoAvailableKilobytes { get; set; }

        /// <summary>
        /// Gets or Sets DattoDeviceMemoryMegabytes
        /// </summary>
        [DataMember(Name="dattoDeviceMemoryMegabytes", EmitDefaultValue=false)]
        public int? DattoDeviceMemoryMegabytes { get; set; }

        /// <summary>
        /// Gets or Sets DattoDrivesErrors
        /// </summary>
        [DataMember(Name="dattoDrivesErrors", EmitDefaultValue=false)]
        public bool? DattoDrivesErrors { get; set; }

        /// <summary>
        /// Gets or Sets DattoHostname
        /// </summary>
        [DataMember(Name="dattoHostname", EmitDefaultValue=false)]
        public string DattoHostname { get; set; }

        /// <summary>
        /// Gets or Sets DattoInternalIP
        /// </summary>
        [DataMember(Name="dattoInternalIP", EmitDefaultValue=false)]
        public string DattoInternalIP { get; set; }

        /// <summary>
        /// Gets or Sets DattoKernelVersionID
        /// </summary>
        [DataMember(Name="dattoKernelVersionID", EmitDefaultValue=false)]
        public int? DattoKernelVersionID { get; set; }

        /// <summary>
        /// Gets or Sets DattoLastCheckInDateTime
        /// </summary>
        [DataMember(Name="dattoLastCheckInDateTime", EmitDefaultValue=false)]
        public DateTime? DattoLastCheckInDateTime { get; set; }

        /// <summary>
        /// Gets or Sets DattoNICSpeedKilobitsPerSecond
        /// </summary>
        [DataMember(Name="dattoNICSpeedKilobitsPerSecond", EmitDefaultValue=false)]
        public int? DattoNICSpeedKilobitsPerSecond { get; set; }

        /// <summary>
        /// Gets or Sets DattoNumberOfAgents
        /// </summary>
        [DataMember(Name="dattoNumberOfAgents", EmitDefaultValue=false)]
        public int? DattoNumberOfAgents { get; set; }

        /// <summary>
        /// Gets or Sets DattoNumberOfDrives
        /// </summary>
        [DataMember(Name="dattoNumberOfDrives", EmitDefaultValue=false)]
        public int? DattoNumberOfDrives { get; set; }

        /// <summary>
        /// Gets or Sets DattoNumberOfVolumes
        /// </summary>
        [DataMember(Name="dattoNumberOfVolumes", EmitDefaultValue=false)]
        public int? DattoNumberOfVolumes { get; set; }

        /// <summary>
        /// Gets or Sets DattoOffsiteUsedBytes
        /// </summary>
        [DataMember(Name="dattoOffsiteUsedBytes", EmitDefaultValue=false)]
        public long? DattoOffsiteUsedBytes { get; set; }

        /// <summary>
        /// Gets or Sets DattoOSVersionID
        /// </summary>
        [DataMember(Name="dattoOSVersionID", EmitDefaultValue=false)]
        public int? DattoOSVersionID { get; set; }

        /// <summary>
        /// Gets or Sets DattoPercentageUsed
        /// </summary>
        [DataMember(Name="dattoPercentageUsed", EmitDefaultValue=false)]
        public double? DattoPercentageUsed { get; set; }

        /// <summary>
        /// Gets or Sets DattoProtectedKilobytes
        /// </summary>
        [DataMember(Name="dattoProtectedKilobytes", EmitDefaultValue=false)]
        public long? DattoProtectedKilobytes { get; set; }

        /// <summary>
        /// Gets or Sets DattoRemoteIP
        /// </summary>
        [DataMember(Name="dattoRemoteIP", EmitDefaultValue=false)]
        public string DattoRemoteIP { get; set; }

        /// <summary>
        /// Gets or Sets DattoSerialNumber
        /// </summary>
        [DataMember(Name="dattoSerialNumber", EmitDefaultValue=false)]
        public string DattoSerialNumber { get; set; }

        /// <summary>
        /// Gets or Sets DattoUptimeSeconds
        /// </summary>
        [DataMember(Name="dattoUptimeSeconds", EmitDefaultValue=false)]
        public int? DattoUptimeSeconds { get; set; }

        /// <summary>
        /// Gets or Sets DattoUsedKilobytes
        /// </summary>
        [DataMember(Name="dattoUsedKilobytes", EmitDefaultValue=false)]
        public long? DattoUsedKilobytes { get; set; }

        /// <summary>
        /// Gets or Sets DattoZFSVersionID
        /// </summary>
        [DataMember(Name="dattoZFSVersionID", EmitDefaultValue=false)]
        public int? DattoZFSVersionID { get; set; }

        /// <summary>
        /// Gets or Sets DeviceNetworkingID
        /// </summary>
        [DataMember(Name="deviceNetworkingID", EmitDefaultValue=false)]
        public string DeviceNetworkingID { get; set; }

        /// <summary>
        /// Gets or Sets Domain
        /// </summary>
        [DataMember(Name="domain", EmitDefaultValue=false)]
        public string Domain { get; set; }

        /// <summary>
        /// Gets or Sets DomainRegistrarID
        /// </summary>
        [DataMember(Name="domainRegistrarID", EmitDefaultValue=false)]
        public int? DomainRegistrarID { get; set; }

        /// <summary>
        /// Gets or Sets DomainRegistrationDateTime
        /// </summary>
        [DataMember(Name="domainRegistrationDateTime", EmitDefaultValue=false)]
        public DateTime? DomainRegistrationDateTime { get; set; }

        /// <summary>
        /// Gets or Sets DomainLastUpdatedDateTime
        /// </summary>
        [DataMember(Name="domainLastUpdatedDateTime", EmitDefaultValue=false)]
        public DateTime? DomainLastUpdatedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets DomainExpirationDateTime
        /// </summary>
        [DataMember(Name="domainExpirationDateTime", EmitDefaultValue=false)]
        public DateTime? DomainExpirationDateTime { get; set; }

        /// <summary>
        /// Gets or Sets HourlyCost
        /// </summary>
        [DataMember(Name="hourlyCost", EmitDefaultValue=false)]
        public double? HourlyCost { get; set; }

        /// <summary>
        /// Gets or Sets ImpersonatorCreatorResourceID
        /// </summary>
        [DataMember(Name="impersonatorCreatorResourceID", EmitDefaultValue=false)]
        public int? ImpersonatorCreatorResourceID { get; set; }

        /// <summary>
        /// Gets or Sets InstallDate
        /// </summary>
        [DataMember(Name="installDate", EmitDefaultValue=false)]
        public DateTime? InstallDate { get; set; }

        /// <summary>
        /// Gets or Sets InstalledByContactID
        /// </summary>
        [DataMember(Name="installedByContactID", EmitDefaultValue=false)]
        public int? InstalledByContactID { get; set; }

        /// <summary>
        /// Gets or Sets InstalledByID
        /// </summary>
        [DataMember(Name="installedByID", EmitDefaultValue=false)]
        public int? InstalledByID { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="isActive", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets LastActivityPersonID
        /// </summary>
        [DataMember(Name="lastActivityPersonID", EmitDefaultValue=false)]
        public int? LastActivityPersonID { get; set; }

        /// <summary>
        /// Gets or Sets LastActivityPersonType
        /// </summary>
        [DataMember(Name="lastActivityPersonType", EmitDefaultValue=false)]
        public int? LastActivityPersonType { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedTime
        /// </summary>
        [DataMember(Name="lastModifiedTime", EmitDefaultValue=false)]
        public DateTime? LastModifiedTime { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public string Location { get; set; }

        /// <summary>
        /// Gets or Sets MonthlyCost
        /// </summary>
        [DataMember(Name="monthlyCost", EmitDefaultValue=false)]
        public double? MonthlyCost { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfUsers
        /// </summary>
        [DataMember(Name="numberOfUsers", EmitDefaultValue=false)]
        public double? NumberOfUsers { get; set; }

        /// <summary>
        /// Gets or Sets ParentConfigurationItemID
        /// </summary>
        [DataMember(Name="parentConfigurationItemID", EmitDefaultValue=false)]
        public int? ParentConfigurationItemID { get; set; }

        /// <summary>
        /// Gets or Sets PerUseCost
        /// </summary>
        [DataMember(Name="perUseCost", EmitDefaultValue=false)]
        public double? PerUseCost { get; set; }

        /// <summary>
        /// Gets or Sets ProductID
        /// </summary>
        [DataMember(Name="productID", EmitDefaultValue=false)]
        public int? ProductID { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceNumber
        /// </summary>
        [DataMember(Name="referenceNumber", EmitDefaultValue=false)]
        public string ReferenceNumber { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceTitle
        /// </summary>
        [DataMember(Name="referenceTitle", EmitDefaultValue=false)]
        public string ReferenceTitle { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditAntivirusStatusID
        /// </summary>
        [DataMember(Name="rmmDeviceAuditAntivirusStatusID", EmitDefaultValue=false)]
        public int? RmmDeviceAuditAntivirusStatusID { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditArchitectureID
        /// </summary>
        [DataMember(Name="rmmDeviceAuditArchitectureID", EmitDefaultValue=false)]
        public int? RmmDeviceAuditArchitectureID { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditBackupStatusID
        /// </summary>
        [DataMember(Name="rmmDeviceAuditBackupStatusID", EmitDefaultValue=false)]
        public int? RmmDeviceAuditBackupStatusID { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditDescription
        /// </summary>
        [DataMember(Name="rmmDeviceAuditDescription", EmitDefaultValue=false)]
        public string RmmDeviceAuditDescription { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditDeviceTypeID
        /// </summary>
        [DataMember(Name="rmmDeviceAuditDeviceTypeID", EmitDefaultValue=false)]
        public int? RmmDeviceAuditDeviceTypeID { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditDisplayAdaptorID
        /// </summary>
        [DataMember(Name="rmmDeviceAuditDisplayAdaptorID", EmitDefaultValue=false)]
        public int? RmmDeviceAuditDisplayAdaptorID { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditDomainID
        /// </summary>
        [DataMember(Name="rmmDeviceAuditDomainID", EmitDefaultValue=false)]
        public int? RmmDeviceAuditDomainID { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditExternalIPAddress
        /// </summary>
        [DataMember(Name="rmmDeviceAuditExternalIPAddress", EmitDefaultValue=false)]
        public string RmmDeviceAuditExternalIPAddress { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditHostname
        /// </summary>
        [DataMember(Name="rmmDeviceAuditHostname", EmitDefaultValue=false)]
        public string RmmDeviceAuditHostname { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditIPAddress
        /// </summary>
        [DataMember(Name="rmmDeviceAuditIPAddress", EmitDefaultValue=false)]
        public string RmmDeviceAuditIPAddress { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditLastUser
        /// </summary>
        [DataMember(Name="rmmDeviceAuditLastUser", EmitDefaultValue=false)]
        public string RmmDeviceAuditLastUser { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditMacAddress
        /// </summary>
        [DataMember(Name="rmmDeviceAuditMacAddress", EmitDefaultValue=false)]
        public string RmmDeviceAuditMacAddress { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditManufacturerID
        /// </summary>
        [DataMember(Name="rmmDeviceAuditManufacturerID", EmitDefaultValue=false)]
        public int? RmmDeviceAuditManufacturerID { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditMemoryBytes
        /// </summary>
        [DataMember(Name="rmmDeviceAuditMemoryBytes", EmitDefaultValue=false)]
        public long? RmmDeviceAuditMemoryBytes { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditMissingPatchCount
        /// </summary>
        [DataMember(Name="rmmDeviceAuditMissingPatchCount", EmitDefaultValue=false)]
        public int? RmmDeviceAuditMissingPatchCount { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditMobileNetworkOperatorID
        /// </summary>
        [DataMember(Name="rmmDeviceAuditMobileNetworkOperatorID", EmitDefaultValue=false)]
        public int? RmmDeviceAuditMobileNetworkOperatorID { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditMobileNumber
        /// </summary>
        [DataMember(Name="rmmDeviceAuditMobileNumber", EmitDefaultValue=false)]
        public string RmmDeviceAuditMobileNumber { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditModelID
        /// </summary>
        [DataMember(Name="rmmDeviceAuditModelID", EmitDefaultValue=false)]
        public int? RmmDeviceAuditModelID { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditMotherboardID
        /// </summary>
        [DataMember(Name="rmmDeviceAuditMotherboardID", EmitDefaultValue=false)]
        public int? RmmDeviceAuditMotherboardID { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditOperatingSystem
        /// </summary>
        [DataMember(Name="rmmDeviceAuditOperatingSystem", EmitDefaultValue=false)]
        public string RmmDeviceAuditOperatingSystem { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditPatchStatusID
        /// </summary>
        [DataMember(Name="rmmDeviceAuditPatchStatusID", EmitDefaultValue=false)]
        public int? RmmDeviceAuditPatchStatusID { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditProcessorID
        /// </summary>
        [DataMember(Name="rmmDeviceAuditProcessorID", EmitDefaultValue=false)]
        public int? RmmDeviceAuditProcessorID { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditServicePackID
        /// </summary>
        [DataMember(Name="rmmDeviceAuditServicePackID", EmitDefaultValue=false)]
        public int? RmmDeviceAuditServicePackID { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditSNMPContact
        /// </summary>
        [DataMember(Name="rmmDeviceAuditSNMPContact", EmitDefaultValue=false)]
        public string RmmDeviceAuditSNMPContact { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditSNMPLocation
        /// </summary>
        [DataMember(Name="rmmDeviceAuditSNMPLocation", EmitDefaultValue=false)]
        public string RmmDeviceAuditSNMPLocation { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditSNMPName
        /// </summary>
        [DataMember(Name="rmmDeviceAuditSNMPName", EmitDefaultValue=false)]
        public string RmmDeviceAuditSNMPName { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditSoftwareStatusID
        /// </summary>
        [DataMember(Name="rmmDeviceAuditSoftwareStatusID", EmitDefaultValue=false)]
        public int? RmmDeviceAuditSoftwareStatusID { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditStorageBytes
        /// </summary>
        [DataMember(Name="rmmDeviceAuditStorageBytes", EmitDefaultValue=false)]
        public long? RmmDeviceAuditStorageBytes { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceID
        /// </summary>
        [DataMember(Name="rmmDeviceID", EmitDefaultValue=false)]
        public long? RmmDeviceID { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceUID
        /// </summary>
        [DataMember(Name="rmmDeviceUID", EmitDefaultValue=false)]
        public string RmmDeviceUID { get; set; }

        /// <summary>
        /// Gets or Sets RmmOpenAlertCount
        /// </summary>
        [DataMember(Name="rmmOpenAlertCount", EmitDefaultValue=false)]
        public int? RmmOpenAlertCount { get; set; }

        /// <summary>
        /// Gets or Sets SerialNumber
        /// </summary>
        [DataMember(Name="serialNumber", EmitDefaultValue=false)]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Gets or Sets ServiceBundleID
        /// </summary>
        [DataMember(Name="serviceBundleID", EmitDefaultValue=false)]
        public int? ServiceBundleID { get; set; }

        /// <summary>
        /// Gets or Sets ServiceID
        /// </summary>
        [DataMember(Name="serviceID", EmitDefaultValue=false)]
        public int? ServiceID { get; set; }

        /// <summary>
        /// Gets or Sets ServiceLevelAgreementID
        /// </summary>
        [DataMember(Name="serviceLevelAgreementID", EmitDefaultValue=false)]
        public int? ServiceLevelAgreementID { get; set; }

        /// <summary>
        /// Gets or Sets SetupFee
        /// </summary>
        [DataMember(Name="setupFee", EmitDefaultValue=false)]
        public double? SetupFee { get; set; }

        /// <summary>
        /// Gets or Sets SourceChargeID
        /// </summary>
        [DataMember(Name="sourceChargeID", EmitDefaultValue=false)]
        public int? SourceChargeID { get; set; }

        /// <summary>
        /// Gets or Sets SourceChargeType
        /// </summary>
        [DataMember(Name="sourceChargeType", EmitDefaultValue=false)]
        public int? SourceChargeType { get; set; }

        /// <summary>
        /// Gets or Sets SslSource
        /// </summary>
        [DataMember(Name="sslSource", EmitDefaultValue=false)]
        public string SslSource { get; set; }

        /// <summary>
        /// Gets or Sets SslCommonName
        /// </summary>
        [DataMember(Name="sslCommonName", EmitDefaultValue=false)]
        public string SslCommonName { get; set; }

        /// <summary>
        /// Gets or Sets SslValidFromDateTime
        /// </summary>
        [DataMember(Name="sslValidFromDateTime", EmitDefaultValue=false)]
        public DateTime? SslValidFromDateTime { get; set; }

        /// <summary>
        /// Gets or Sets SslValidUntilDateTime
        /// </summary>
        [DataMember(Name="sslValidUntilDateTime", EmitDefaultValue=false)]
        public DateTime? SslValidUntilDateTime { get; set; }

        /// <summary>
        /// Gets or Sets SslIssuedBy
        /// </summary>
        [DataMember(Name="sslIssuedBy", EmitDefaultValue=false)]
        public string SslIssuedBy { get; set; }

        /// <summary>
        /// Gets or Sets SslOrganization
        /// </summary>
        [DataMember(Name="sslOrganization", EmitDefaultValue=false)]
        public string SslOrganization { get; set; }

        /// <summary>
        /// Gets or Sets SslOrganizationUnit
        /// </summary>
        [DataMember(Name="sslOrganizationUnit", EmitDefaultValue=false)]
        public string SslOrganizationUnit { get; set; }

        /// <summary>
        /// Gets or Sets SslLocation
        /// </summary>
        [DataMember(Name="sslLocation", EmitDefaultValue=false)]
        public string SslLocation { get; set; }

        /// <summary>
        /// Gets or Sets SslSerialNumber
        /// </summary>
        [DataMember(Name="sslSerialNumber", EmitDefaultValue=false)]
        public string SslSerialNumber { get; set; }

        /// <summary>
        /// Gets or Sets SslSignatureAlgorithm
        /// </summary>
        [DataMember(Name="sslSignatureAlgorithm", EmitDefaultValue=false)]
        public string SslSignatureAlgorithm { get; set; }

        /// <summary>
        /// Gets or Sets VendorID
        /// </summary>
        [DataMember(Name="vendorID", EmitDefaultValue=false)]
        public int? VendorID { get; set; }

        /// <summary>
        /// Gets or Sets WarrantyExpirationDate
        /// </summary>
        [DataMember(Name="warrantyExpirationDate", EmitDefaultValue=false)]
        public DateTime? WarrantyExpirationDate { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields", EmitDefaultValue=false)]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConfigurationItemModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ApiVendorID: ").Append(ApiVendorID).Append("\n");
            sb.Append("  ConfigurationItemCategoryID: ").Append(ConfigurationItemCategoryID).Append("\n");
            sb.Append("  CompanyID: ").Append(CompanyID).Append("\n");
            sb.Append("  CompanyLocationID: ").Append(CompanyLocationID).Append("\n");
            sb.Append("  ConfigurationItemType: ").Append(ConfigurationItemType).Append("\n");
            sb.Append("  ContactID: ").Append(ContactID).Append("\n");
            sb.Append("  ContractID: ").Append(ContractID).Append("\n");
            sb.Append("  ContractServiceBundleID: ").Append(ContractServiceBundleID).Append("\n");
            sb.Append("  ContractServiceID: ").Append(ContractServiceID).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  CreatedByPersonID: ").Append(CreatedByPersonID).Append("\n");
            sb.Append("  DailyCost: ").Append(DailyCost).Append("\n");
            sb.Append("  DattoAvailableKilobytes: ").Append(DattoAvailableKilobytes).Append("\n");
            sb.Append("  DattoDeviceMemoryMegabytes: ").Append(DattoDeviceMemoryMegabytes).Append("\n");
            sb.Append("  DattoDrivesErrors: ").Append(DattoDrivesErrors).Append("\n");
            sb.Append("  DattoHostname: ").Append(DattoHostname).Append("\n");
            sb.Append("  DattoInternalIP: ").Append(DattoInternalIP).Append("\n");
            sb.Append("  DattoKernelVersionID: ").Append(DattoKernelVersionID).Append("\n");
            sb.Append("  DattoLastCheckInDateTime: ").Append(DattoLastCheckInDateTime).Append("\n");
            sb.Append("  DattoNICSpeedKilobitsPerSecond: ").Append(DattoNICSpeedKilobitsPerSecond).Append("\n");
            sb.Append("  DattoNumberOfAgents: ").Append(DattoNumberOfAgents).Append("\n");
            sb.Append("  DattoNumberOfDrives: ").Append(DattoNumberOfDrives).Append("\n");
            sb.Append("  DattoNumberOfVolumes: ").Append(DattoNumberOfVolumes).Append("\n");
            sb.Append("  DattoOffsiteUsedBytes: ").Append(DattoOffsiteUsedBytes).Append("\n");
            sb.Append("  DattoOSVersionID: ").Append(DattoOSVersionID).Append("\n");
            sb.Append("  DattoPercentageUsed: ").Append(DattoPercentageUsed).Append("\n");
            sb.Append("  DattoProtectedKilobytes: ").Append(DattoProtectedKilobytes).Append("\n");
            sb.Append("  DattoRemoteIP: ").Append(DattoRemoteIP).Append("\n");
            sb.Append("  DattoSerialNumber: ").Append(DattoSerialNumber).Append("\n");
            sb.Append("  DattoUptimeSeconds: ").Append(DattoUptimeSeconds).Append("\n");
            sb.Append("  DattoUsedKilobytes: ").Append(DattoUsedKilobytes).Append("\n");
            sb.Append("  DattoZFSVersionID: ").Append(DattoZFSVersionID).Append("\n");
            sb.Append("  DeviceNetworkingID: ").Append(DeviceNetworkingID).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  DomainRegistrarID: ").Append(DomainRegistrarID).Append("\n");
            sb.Append("  DomainRegistrationDateTime: ").Append(DomainRegistrationDateTime).Append("\n");
            sb.Append("  DomainLastUpdatedDateTime: ").Append(DomainLastUpdatedDateTime).Append("\n");
            sb.Append("  DomainExpirationDateTime: ").Append(DomainExpirationDateTime).Append("\n");
            sb.Append("  HourlyCost: ").Append(HourlyCost).Append("\n");
            sb.Append("  ImpersonatorCreatorResourceID: ").Append(ImpersonatorCreatorResourceID).Append("\n");
            sb.Append("  InstallDate: ").Append(InstallDate).Append("\n");
            sb.Append("  InstalledByContactID: ").Append(InstalledByContactID).Append("\n");
            sb.Append("  InstalledByID: ").Append(InstalledByID).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  LastActivityPersonID: ").Append(LastActivityPersonID).Append("\n");
            sb.Append("  LastActivityPersonType: ").Append(LastActivityPersonType).Append("\n");
            sb.Append("  LastModifiedTime: ").Append(LastModifiedTime).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  MonthlyCost: ").Append(MonthlyCost).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  NumberOfUsers: ").Append(NumberOfUsers).Append("\n");
            sb.Append("  ParentConfigurationItemID: ").Append(ParentConfigurationItemID).Append("\n");
            sb.Append("  PerUseCost: ").Append(PerUseCost).Append("\n");
            sb.Append("  ProductID: ").Append(ProductID).Append("\n");
            sb.Append("  ReferenceNumber: ").Append(ReferenceNumber).Append("\n");
            sb.Append("  ReferenceTitle: ").Append(ReferenceTitle).Append("\n");
            sb.Append("  RmmDeviceAuditAntivirusStatusID: ").Append(RmmDeviceAuditAntivirusStatusID).Append("\n");
            sb.Append("  RmmDeviceAuditArchitectureID: ").Append(RmmDeviceAuditArchitectureID).Append("\n");
            sb.Append("  RmmDeviceAuditBackupStatusID: ").Append(RmmDeviceAuditBackupStatusID).Append("\n");
            sb.Append("  RmmDeviceAuditDescription: ").Append(RmmDeviceAuditDescription).Append("\n");
            sb.Append("  RmmDeviceAuditDeviceTypeID: ").Append(RmmDeviceAuditDeviceTypeID).Append("\n");
            sb.Append("  RmmDeviceAuditDisplayAdaptorID: ").Append(RmmDeviceAuditDisplayAdaptorID).Append("\n");
            sb.Append("  RmmDeviceAuditDomainID: ").Append(RmmDeviceAuditDomainID).Append("\n");
            sb.Append("  RmmDeviceAuditExternalIPAddress: ").Append(RmmDeviceAuditExternalIPAddress).Append("\n");
            sb.Append("  RmmDeviceAuditHostname: ").Append(RmmDeviceAuditHostname).Append("\n");
            sb.Append("  RmmDeviceAuditIPAddress: ").Append(RmmDeviceAuditIPAddress).Append("\n");
            sb.Append("  RmmDeviceAuditLastUser: ").Append(RmmDeviceAuditLastUser).Append("\n");
            sb.Append("  RmmDeviceAuditMacAddress: ").Append(RmmDeviceAuditMacAddress).Append("\n");
            sb.Append("  RmmDeviceAuditManufacturerID: ").Append(RmmDeviceAuditManufacturerID).Append("\n");
            sb.Append("  RmmDeviceAuditMemoryBytes: ").Append(RmmDeviceAuditMemoryBytes).Append("\n");
            sb.Append("  RmmDeviceAuditMissingPatchCount: ").Append(RmmDeviceAuditMissingPatchCount).Append("\n");
            sb.Append("  RmmDeviceAuditMobileNetworkOperatorID: ").Append(RmmDeviceAuditMobileNetworkOperatorID).Append("\n");
            sb.Append("  RmmDeviceAuditMobileNumber: ").Append(RmmDeviceAuditMobileNumber).Append("\n");
            sb.Append("  RmmDeviceAuditModelID: ").Append(RmmDeviceAuditModelID).Append("\n");
            sb.Append("  RmmDeviceAuditMotherboardID: ").Append(RmmDeviceAuditMotherboardID).Append("\n");
            sb.Append("  RmmDeviceAuditOperatingSystem: ").Append(RmmDeviceAuditOperatingSystem).Append("\n");
            sb.Append("  RmmDeviceAuditPatchStatusID: ").Append(RmmDeviceAuditPatchStatusID).Append("\n");
            sb.Append("  RmmDeviceAuditProcessorID: ").Append(RmmDeviceAuditProcessorID).Append("\n");
            sb.Append("  RmmDeviceAuditServicePackID: ").Append(RmmDeviceAuditServicePackID).Append("\n");
            sb.Append("  RmmDeviceAuditSNMPContact: ").Append(RmmDeviceAuditSNMPContact).Append("\n");
            sb.Append("  RmmDeviceAuditSNMPLocation: ").Append(RmmDeviceAuditSNMPLocation).Append("\n");
            sb.Append("  RmmDeviceAuditSNMPName: ").Append(RmmDeviceAuditSNMPName).Append("\n");
            sb.Append("  RmmDeviceAuditSoftwareStatusID: ").Append(RmmDeviceAuditSoftwareStatusID).Append("\n");
            sb.Append("  RmmDeviceAuditStorageBytes: ").Append(RmmDeviceAuditStorageBytes).Append("\n");
            sb.Append("  RmmDeviceID: ").Append(RmmDeviceID).Append("\n");
            sb.Append("  RmmDeviceUID: ").Append(RmmDeviceUID).Append("\n");
            sb.Append("  RmmOpenAlertCount: ").Append(RmmOpenAlertCount).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  ServiceBundleID: ").Append(ServiceBundleID).Append("\n");
            sb.Append("  ServiceID: ").Append(ServiceID).Append("\n");
            sb.Append("  ServiceLevelAgreementID: ").Append(ServiceLevelAgreementID).Append("\n");
            sb.Append("  SetupFee: ").Append(SetupFee).Append("\n");
            sb.Append("  SourceChargeID: ").Append(SourceChargeID).Append("\n");
            sb.Append("  SourceChargeType: ").Append(SourceChargeType).Append("\n");
            sb.Append("  SslSource: ").Append(SslSource).Append("\n");
            sb.Append("  SslCommonName: ").Append(SslCommonName).Append("\n");
            sb.Append("  SslValidFromDateTime: ").Append(SslValidFromDateTime).Append("\n");
            sb.Append("  SslValidUntilDateTime: ").Append(SslValidUntilDateTime).Append("\n");
            sb.Append("  SslIssuedBy: ").Append(SslIssuedBy).Append("\n");
            sb.Append("  SslOrganization: ").Append(SslOrganization).Append("\n");
            sb.Append("  SslOrganizationUnit: ").Append(SslOrganizationUnit).Append("\n");
            sb.Append("  SslLocation: ").Append(SslLocation).Append("\n");
            sb.Append("  SslSerialNumber: ").Append(SslSerialNumber).Append("\n");
            sb.Append("  SslSignatureAlgorithm: ").Append(SslSignatureAlgorithm).Append("\n");
            sb.Append("  VendorID: ").Append(VendorID).Append("\n");
            sb.Append("  WarrantyExpirationDate: ").Append(WarrantyExpirationDate).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConfigurationItemModel);
        }

        /// <summary>
        /// Returns true if ConfigurationItemModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ConfigurationItemModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConfigurationItemModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ApiVendorID == input.ApiVendorID ||
                    (this.ApiVendorID != null &&
                    this.ApiVendorID.Equals(input.ApiVendorID))
                ) && 
                (
                    this.ConfigurationItemCategoryID == input.ConfigurationItemCategoryID ||
                    (this.ConfigurationItemCategoryID != null &&
                    this.ConfigurationItemCategoryID.Equals(input.ConfigurationItemCategoryID))
                ) && 
                (
                    this.CompanyID == input.CompanyID ||
                    (this.CompanyID != null &&
                    this.CompanyID.Equals(input.CompanyID))
                ) && 
                (
                    this.CompanyLocationID == input.CompanyLocationID ||
                    (this.CompanyLocationID != null &&
                    this.CompanyLocationID.Equals(input.CompanyLocationID))
                ) && 
                (
                    this.ConfigurationItemType == input.ConfigurationItemType ||
                    (this.ConfigurationItemType != null &&
                    this.ConfigurationItemType.Equals(input.ConfigurationItemType))
                ) && 
                (
                    this.ContactID == input.ContactID ||
                    (this.ContactID != null &&
                    this.ContactID.Equals(input.ContactID))
                ) && 
                (
                    this.ContractID == input.ContractID ||
                    (this.ContractID != null &&
                    this.ContractID.Equals(input.ContractID))
                ) && 
                (
                    this.ContractServiceBundleID == input.ContractServiceBundleID ||
                    (this.ContractServiceBundleID != null &&
                    this.ContractServiceBundleID.Equals(input.ContractServiceBundleID))
                ) && 
                (
                    this.ContractServiceID == input.ContractServiceID ||
                    (this.ContractServiceID != null &&
                    this.ContractServiceID.Equals(input.ContractServiceID))
                ) && 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) && 
                (
                    this.CreatedByPersonID == input.CreatedByPersonID ||
                    (this.CreatedByPersonID != null &&
                    this.CreatedByPersonID.Equals(input.CreatedByPersonID))
                ) && 
                (
                    this.DailyCost == input.DailyCost ||
                    (this.DailyCost != null &&
                    this.DailyCost.Equals(input.DailyCost))
                ) && 
                (
                    this.DattoAvailableKilobytes == input.DattoAvailableKilobytes ||
                    (this.DattoAvailableKilobytes != null &&
                    this.DattoAvailableKilobytes.Equals(input.DattoAvailableKilobytes))
                ) && 
                (
                    this.DattoDeviceMemoryMegabytes == input.DattoDeviceMemoryMegabytes ||
                    (this.DattoDeviceMemoryMegabytes != null &&
                    this.DattoDeviceMemoryMegabytes.Equals(input.DattoDeviceMemoryMegabytes))
                ) && 
                (
                    this.DattoDrivesErrors == input.DattoDrivesErrors ||
                    (this.DattoDrivesErrors != null &&
                    this.DattoDrivesErrors.Equals(input.DattoDrivesErrors))
                ) && 
                (
                    this.DattoHostname == input.DattoHostname ||
                    (this.DattoHostname != null &&
                    this.DattoHostname.Equals(input.DattoHostname))
                ) && 
                (
                    this.DattoInternalIP == input.DattoInternalIP ||
                    (this.DattoInternalIP != null &&
                    this.DattoInternalIP.Equals(input.DattoInternalIP))
                ) && 
                (
                    this.DattoKernelVersionID == input.DattoKernelVersionID ||
                    (this.DattoKernelVersionID != null &&
                    this.DattoKernelVersionID.Equals(input.DattoKernelVersionID))
                ) && 
                (
                    this.DattoLastCheckInDateTime == input.DattoLastCheckInDateTime ||
                    (this.DattoLastCheckInDateTime != null &&
                    this.DattoLastCheckInDateTime.Equals(input.DattoLastCheckInDateTime))
                ) && 
                (
                    this.DattoNICSpeedKilobitsPerSecond == input.DattoNICSpeedKilobitsPerSecond ||
                    (this.DattoNICSpeedKilobitsPerSecond != null &&
                    this.DattoNICSpeedKilobitsPerSecond.Equals(input.DattoNICSpeedKilobitsPerSecond))
                ) && 
                (
                    this.DattoNumberOfAgents == input.DattoNumberOfAgents ||
                    (this.DattoNumberOfAgents != null &&
                    this.DattoNumberOfAgents.Equals(input.DattoNumberOfAgents))
                ) && 
                (
                    this.DattoNumberOfDrives == input.DattoNumberOfDrives ||
                    (this.DattoNumberOfDrives != null &&
                    this.DattoNumberOfDrives.Equals(input.DattoNumberOfDrives))
                ) && 
                (
                    this.DattoNumberOfVolumes == input.DattoNumberOfVolumes ||
                    (this.DattoNumberOfVolumes != null &&
                    this.DattoNumberOfVolumes.Equals(input.DattoNumberOfVolumes))
                ) && 
                (
                    this.DattoOffsiteUsedBytes == input.DattoOffsiteUsedBytes ||
                    (this.DattoOffsiteUsedBytes != null &&
                    this.DattoOffsiteUsedBytes.Equals(input.DattoOffsiteUsedBytes))
                ) && 
                (
                    this.DattoOSVersionID == input.DattoOSVersionID ||
                    (this.DattoOSVersionID != null &&
                    this.DattoOSVersionID.Equals(input.DattoOSVersionID))
                ) && 
                (
                    this.DattoPercentageUsed == input.DattoPercentageUsed ||
                    (this.DattoPercentageUsed != null &&
                    this.DattoPercentageUsed.Equals(input.DattoPercentageUsed))
                ) && 
                (
                    this.DattoProtectedKilobytes == input.DattoProtectedKilobytes ||
                    (this.DattoProtectedKilobytes != null &&
                    this.DattoProtectedKilobytes.Equals(input.DattoProtectedKilobytes))
                ) && 
                (
                    this.DattoRemoteIP == input.DattoRemoteIP ||
                    (this.DattoRemoteIP != null &&
                    this.DattoRemoteIP.Equals(input.DattoRemoteIP))
                ) && 
                (
                    this.DattoSerialNumber == input.DattoSerialNumber ||
                    (this.DattoSerialNumber != null &&
                    this.DattoSerialNumber.Equals(input.DattoSerialNumber))
                ) && 
                (
                    this.DattoUptimeSeconds == input.DattoUptimeSeconds ||
                    (this.DattoUptimeSeconds != null &&
                    this.DattoUptimeSeconds.Equals(input.DattoUptimeSeconds))
                ) && 
                (
                    this.DattoUsedKilobytes == input.DattoUsedKilobytes ||
                    (this.DattoUsedKilobytes != null &&
                    this.DattoUsedKilobytes.Equals(input.DattoUsedKilobytes))
                ) && 
                (
                    this.DattoZFSVersionID == input.DattoZFSVersionID ||
                    (this.DattoZFSVersionID != null &&
                    this.DattoZFSVersionID.Equals(input.DattoZFSVersionID))
                ) && 
                (
                    this.DeviceNetworkingID == input.DeviceNetworkingID ||
                    (this.DeviceNetworkingID != null &&
                    this.DeviceNetworkingID.Equals(input.DeviceNetworkingID))
                ) && 
                (
                    this.Domain == input.Domain ||
                    (this.Domain != null &&
                    this.Domain.Equals(input.Domain))
                ) && 
                (
                    this.DomainRegistrarID == input.DomainRegistrarID ||
                    (this.DomainRegistrarID != null &&
                    this.DomainRegistrarID.Equals(input.DomainRegistrarID))
                ) && 
                (
                    this.DomainRegistrationDateTime == input.DomainRegistrationDateTime ||
                    (this.DomainRegistrationDateTime != null &&
                    this.DomainRegistrationDateTime.Equals(input.DomainRegistrationDateTime))
                ) && 
                (
                    this.DomainLastUpdatedDateTime == input.DomainLastUpdatedDateTime ||
                    (this.DomainLastUpdatedDateTime != null &&
                    this.DomainLastUpdatedDateTime.Equals(input.DomainLastUpdatedDateTime))
                ) && 
                (
                    this.DomainExpirationDateTime == input.DomainExpirationDateTime ||
                    (this.DomainExpirationDateTime != null &&
                    this.DomainExpirationDateTime.Equals(input.DomainExpirationDateTime))
                ) && 
                (
                    this.HourlyCost == input.HourlyCost ||
                    (this.HourlyCost != null &&
                    this.HourlyCost.Equals(input.HourlyCost))
                ) && 
                (
                    this.ImpersonatorCreatorResourceID == input.ImpersonatorCreatorResourceID ||
                    (this.ImpersonatorCreatorResourceID != null &&
                    this.ImpersonatorCreatorResourceID.Equals(input.ImpersonatorCreatorResourceID))
                ) && 
                (
                    this.InstallDate == input.InstallDate ||
                    (this.InstallDate != null &&
                    this.InstallDate.Equals(input.InstallDate))
                ) && 
                (
                    this.InstalledByContactID == input.InstalledByContactID ||
                    (this.InstalledByContactID != null &&
                    this.InstalledByContactID.Equals(input.InstalledByContactID))
                ) && 
                (
                    this.InstalledByID == input.InstalledByID ||
                    (this.InstalledByID != null &&
                    this.InstalledByID.Equals(input.InstalledByID))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.LastActivityPersonID == input.LastActivityPersonID ||
                    (this.LastActivityPersonID != null &&
                    this.LastActivityPersonID.Equals(input.LastActivityPersonID))
                ) && 
                (
                    this.LastActivityPersonType == input.LastActivityPersonType ||
                    (this.LastActivityPersonType != null &&
                    this.LastActivityPersonType.Equals(input.LastActivityPersonType))
                ) && 
                (
                    this.LastModifiedTime == input.LastModifiedTime ||
                    (this.LastModifiedTime != null &&
                    this.LastModifiedTime.Equals(input.LastModifiedTime))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.MonthlyCost == input.MonthlyCost ||
                    (this.MonthlyCost != null &&
                    this.MonthlyCost.Equals(input.MonthlyCost))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.NumberOfUsers == input.NumberOfUsers ||
                    (this.NumberOfUsers != null &&
                    this.NumberOfUsers.Equals(input.NumberOfUsers))
                ) && 
                (
                    this.ParentConfigurationItemID == input.ParentConfigurationItemID ||
                    (this.ParentConfigurationItemID != null &&
                    this.ParentConfigurationItemID.Equals(input.ParentConfigurationItemID))
                ) && 
                (
                    this.PerUseCost == input.PerUseCost ||
                    (this.PerUseCost != null &&
                    this.PerUseCost.Equals(input.PerUseCost))
                ) && 
                (
                    this.ProductID == input.ProductID ||
                    (this.ProductID != null &&
                    this.ProductID.Equals(input.ProductID))
                ) && 
                (
                    this.ReferenceNumber == input.ReferenceNumber ||
                    (this.ReferenceNumber != null &&
                    this.ReferenceNumber.Equals(input.ReferenceNumber))
                ) && 
                (
                    this.ReferenceTitle == input.ReferenceTitle ||
                    (this.ReferenceTitle != null &&
                    this.ReferenceTitle.Equals(input.ReferenceTitle))
                ) && 
                (
                    this.RmmDeviceAuditAntivirusStatusID == input.RmmDeviceAuditAntivirusStatusID ||
                    (this.RmmDeviceAuditAntivirusStatusID != null &&
                    this.RmmDeviceAuditAntivirusStatusID.Equals(input.RmmDeviceAuditAntivirusStatusID))
                ) && 
                (
                    this.RmmDeviceAuditArchitectureID == input.RmmDeviceAuditArchitectureID ||
                    (this.RmmDeviceAuditArchitectureID != null &&
                    this.RmmDeviceAuditArchitectureID.Equals(input.RmmDeviceAuditArchitectureID))
                ) && 
                (
                    this.RmmDeviceAuditBackupStatusID == input.RmmDeviceAuditBackupStatusID ||
                    (this.RmmDeviceAuditBackupStatusID != null &&
                    this.RmmDeviceAuditBackupStatusID.Equals(input.RmmDeviceAuditBackupStatusID))
                ) && 
                (
                    this.RmmDeviceAuditDescription == input.RmmDeviceAuditDescription ||
                    (this.RmmDeviceAuditDescription != null &&
                    this.RmmDeviceAuditDescription.Equals(input.RmmDeviceAuditDescription))
                ) && 
                (
                    this.RmmDeviceAuditDeviceTypeID == input.RmmDeviceAuditDeviceTypeID ||
                    (this.RmmDeviceAuditDeviceTypeID != null &&
                    this.RmmDeviceAuditDeviceTypeID.Equals(input.RmmDeviceAuditDeviceTypeID))
                ) && 
                (
                    this.RmmDeviceAuditDisplayAdaptorID == input.RmmDeviceAuditDisplayAdaptorID ||
                    (this.RmmDeviceAuditDisplayAdaptorID != null &&
                    this.RmmDeviceAuditDisplayAdaptorID.Equals(input.RmmDeviceAuditDisplayAdaptorID))
                ) && 
                (
                    this.RmmDeviceAuditDomainID == input.RmmDeviceAuditDomainID ||
                    (this.RmmDeviceAuditDomainID != null &&
                    this.RmmDeviceAuditDomainID.Equals(input.RmmDeviceAuditDomainID))
                ) && 
                (
                    this.RmmDeviceAuditExternalIPAddress == input.RmmDeviceAuditExternalIPAddress ||
                    (this.RmmDeviceAuditExternalIPAddress != null &&
                    this.RmmDeviceAuditExternalIPAddress.Equals(input.RmmDeviceAuditExternalIPAddress))
                ) && 
                (
                    this.RmmDeviceAuditHostname == input.RmmDeviceAuditHostname ||
                    (this.RmmDeviceAuditHostname != null &&
                    this.RmmDeviceAuditHostname.Equals(input.RmmDeviceAuditHostname))
                ) && 
                (
                    this.RmmDeviceAuditIPAddress == input.RmmDeviceAuditIPAddress ||
                    (this.RmmDeviceAuditIPAddress != null &&
                    this.RmmDeviceAuditIPAddress.Equals(input.RmmDeviceAuditIPAddress))
                ) && 
                (
                    this.RmmDeviceAuditLastUser == input.RmmDeviceAuditLastUser ||
                    (this.RmmDeviceAuditLastUser != null &&
                    this.RmmDeviceAuditLastUser.Equals(input.RmmDeviceAuditLastUser))
                ) && 
                (
                    this.RmmDeviceAuditMacAddress == input.RmmDeviceAuditMacAddress ||
                    (this.RmmDeviceAuditMacAddress != null &&
                    this.RmmDeviceAuditMacAddress.Equals(input.RmmDeviceAuditMacAddress))
                ) && 
                (
                    this.RmmDeviceAuditManufacturerID == input.RmmDeviceAuditManufacturerID ||
                    (this.RmmDeviceAuditManufacturerID != null &&
                    this.RmmDeviceAuditManufacturerID.Equals(input.RmmDeviceAuditManufacturerID))
                ) && 
                (
                    this.RmmDeviceAuditMemoryBytes == input.RmmDeviceAuditMemoryBytes ||
                    (this.RmmDeviceAuditMemoryBytes != null &&
                    this.RmmDeviceAuditMemoryBytes.Equals(input.RmmDeviceAuditMemoryBytes))
                ) && 
                (
                    this.RmmDeviceAuditMissingPatchCount == input.RmmDeviceAuditMissingPatchCount ||
                    (this.RmmDeviceAuditMissingPatchCount != null &&
                    this.RmmDeviceAuditMissingPatchCount.Equals(input.RmmDeviceAuditMissingPatchCount))
                ) && 
                (
                    this.RmmDeviceAuditMobileNetworkOperatorID == input.RmmDeviceAuditMobileNetworkOperatorID ||
                    (this.RmmDeviceAuditMobileNetworkOperatorID != null &&
                    this.RmmDeviceAuditMobileNetworkOperatorID.Equals(input.RmmDeviceAuditMobileNetworkOperatorID))
                ) && 
                (
                    this.RmmDeviceAuditMobileNumber == input.RmmDeviceAuditMobileNumber ||
                    (this.RmmDeviceAuditMobileNumber != null &&
                    this.RmmDeviceAuditMobileNumber.Equals(input.RmmDeviceAuditMobileNumber))
                ) && 
                (
                    this.RmmDeviceAuditModelID == input.RmmDeviceAuditModelID ||
                    (this.RmmDeviceAuditModelID != null &&
                    this.RmmDeviceAuditModelID.Equals(input.RmmDeviceAuditModelID))
                ) && 
                (
                    this.RmmDeviceAuditMotherboardID == input.RmmDeviceAuditMotherboardID ||
                    (this.RmmDeviceAuditMotherboardID != null &&
                    this.RmmDeviceAuditMotherboardID.Equals(input.RmmDeviceAuditMotherboardID))
                ) && 
                (
                    this.RmmDeviceAuditOperatingSystem == input.RmmDeviceAuditOperatingSystem ||
                    (this.RmmDeviceAuditOperatingSystem != null &&
                    this.RmmDeviceAuditOperatingSystem.Equals(input.RmmDeviceAuditOperatingSystem))
                ) && 
                (
                    this.RmmDeviceAuditPatchStatusID == input.RmmDeviceAuditPatchStatusID ||
                    (this.RmmDeviceAuditPatchStatusID != null &&
                    this.RmmDeviceAuditPatchStatusID.Equals(input.RmmDeviceAuditPatchStatusID))
                ) && 
                (
                    this.RmmDeviceAuditProcessorID == input.RmmDeviceAuditProcessorID ||
                    (this.RmmDeviceAuditProcessorID != null &&
                    this.RmmDeviceAuditProcessorID.Equals(input.RmmDeviceAuditProcessorID))
                ) && 
                (
                    this.RmmDeviceAuditServicePackID == input.RmmDeviceAuditServicePackID ||
                    (this.RmmDeviceAuditServicePackID != null &&
                    this.RmmDeviceAuditServicePackID.Equals(input.RmmDeviceAuditServicePackID))
                ) && 
                (
                    this.RmmDeviceAuditSNMPContact == input.RmmDeviceAuditSNMPContact ||
                    (this.RmmDeviceAuditSNMPContact != null &&
                    this.RmmDeviceAuditSNMPContact.Equals(input.RmmDeviceAuditSNMPContact))
                ) && 
                (
                    this.RmmDeviceAuditSNMPLocation == input.RmmDeviceAuditSNMPLocation ||
                    (this.RmmDeviceAuditSNMPLocation != null &&
                    this.RmmDeviceAuditSNMPLocation.Equals(input.RmmDeviceAuditSNMPLocation))
                ) && 
                (
                    this.RmmDeviceAuditSNMPName == input.RmmDeviceAuditSNMPName ||
                    (this.RmmDeviceAuditSNMPName != null &&
                    this.RmmDeviceAuditSNMPName.Equals(input.RmmDeviceAuditSNMPName))
                ) && 
                (
                    this.RmmDeviceAuditSoftwareStatusID == input.RmmDeviceAuditSoftwareStatusID ||
                    (this.RmmDeviceAuditSoftwareStatusID != null &&
                    this.RmmDeviceAuditSoftwareStatusID.Equals(input.RmmDeviceAuditSoftwareStatusID))
                ) && 
                (
                    this.RmmDeviceAuditStorageBytes == input.RmmDeviceAuditStorageBytes ||
                    (this.RmmDeviceAuditStorageBytes != null &&
                    this.RmmDeviceAuditStorageBytes.Equals(input.RmmDeviceAuditStorageBytes))
                ) && 
                (
                    this.RmmDeviceID == input.RmmDeviceID ||
                    (this.RmmDeviceID != null &&
                    this.RmmDeviceID.Equals(input.RmmDeviceID))
                ) && 
                (
                    this.RmmDeviceUID == input.RmmDeviceUID ||
                    (this.RmmDeviceUID != null &&
                    this.RmmDeviceUID.Equals(input.RmmDeviceUID))
                ) && 
                (
                    this.RmmOpenAlertCount == input.RmmOpenAlertCount ||
                    (this.RmmOpenAlertCount != null &&
                    this.RmmOpenAlertCount.Equals(input.RmmOpenAlertCount))
                ) && 
                (
                    this.SerialNumber == input.SerialNumber ||
                    (this.SerialNumber != null &&
                    this.SerialNumber.Equals(input.SerialNumber))
                ) && 
                (
                    this.ServiceBundleID == input.ServiceBundleID ||
                    (this.ServiceBundleID != null &&
                    this.ServiceBundleID.Equals(input.ServiceBundleID))
                ) && 
                (
                    this.ServiceID == input.ServiceID ||
                    (this.ServiceID != null &&
                    this.ServiceID.Equals(input.ServiceID))
                ) && 
                (
                    this.ServiceLevelAgreementID == input.ServiceLevelAgreementID ||
                    (this.ServiceLevelAgreementID != null &&
                    this.ServiceLevelAgreementID.Equals(input.ServiceLevelAgreementID))
                ) && 
                (
                    this.SetupFee == input.SetupFee ||
                    (this.SetupFee != null &&
                    this.SetupFee.Equals(input.SetupFee))
                ) && 
                (
                    this.SourceChargeID == input.SourceChargeID ||
                    (this.SourceChargeID != null &&
                    this.SourceChargeID.Equals(input.SourceChargeID))
                ) && 
                (
                    this.SourceChargeType == input.SourceChargeType ||
                    (this.SourceChargeType != null &&
                    this.SourceChargeType.Equals(input.SourceChargeType))
                ) && 
                (
                    this.SslSource == input.SslSource ||
                    (this.SslSource != null &&
                    this.SslSource.Equals(input.SslSource))
                ) && 
                (
                    this.SslCommonName == input.SslCommonName ||
                    (this.SslCommonName != null &&
                    this.SslCommonName.Equals(input.SslCommonName))
                ) && 
                (
                    this.SslValidFromDateTime == input.SslValidFromDateTime ||
                    (this.SslValidFromDateTime != null &&
                    this.SslValidFromDateTime.Equals(input.SslValidFromDateTime))
                ) && 
                (
                    this.SslValidUntilDateTime == input.SslValidUntilDateTime ||
                    (this.SslValidUntilDateTime != null &&
                    this.SslValidUntilDateTime.Equals(input.SslValidUntilDateTime))
                ) && 
                (
                    this.SslIssuedBy == input.SslIssuedBy ||
                    (this.SslIssuedBy != null &&
                    this.SslIssuedBy.Equals(input.SslIssuedBy))
                ) && 
                (
                    this.SslOrganization == input.SslOrganization ||
                    (this.SslOrganization != null &&
                    this.SslOrganization.Equals(input.SslOrganization))
                ) && 
                (
                    this.SslOrganizationUnit == input.SslOrganizationUnit ||
                    (this.SslOrganizationUnit != null &&
                    this.SslOrganizationUnit.Equals(input.SslOrganizationUnit))
                ) && 
                (
                    this.SslLocation == input.SslLocation ||
                    (this.SslLocation != null &&
                    this.SslLocation.Equals(input.SslLocation))
                ) && 
                (
                    this.SslSerialNumber == input.SslSerialNumber ||
                    (this.SslSerialNumber != null &&
                    this.SslSerialNumber.Equals(input.SslSerialNumber))
                ) && 
                (
                    this.SslSignatureAlgorithm == input.SslSignatureAlgorithm ||
                    (this.SslSignatureAlgorithm != null &&
                    this.SslSignatureAlgorithm.Equals(input.SslSignatureAlgorithm))
                ) && 
                (
                    this.VendorID == input.VendorID ||
                    (this.VendorID != null &&
                    this.VendorID.Equals(input.VendorID))
                ) && 
                (
                    this.WarrantyExpirationDate == input.WarrantyExpirationDate ||
                    (this.WarrantyExpirationDate != null &&
                    this.WarrantyExpirationDate.Equals(input.WarrantyExpirationDate))
                ) && 
                (
                    this.UserDefinedFields == input.UserDefinedFields ||
                    this.UserDefinedFields != null &&
                    this.UserDefinedFields.SequenceEqual(input.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ApiVendorID != null)
                    hashCode = hashCode * 59 + this.ApiVendorID.GetHashCode();
                if (this.ConfigurationItemCategoryID != null)
                    hashCode = hashCode * 59 + this.ConfigurationItemCategoryID.GetHashCode();
                if (this.CompanyID != null)
                    hashCode = hashCode * 59 + this.CompanyID.GetHashCode();
                if (this.CompanyLocationID != null)
                    hashCode = hashCode * 59 + this.CompanyLocationID.GetHashCode();
                if (this.ConfigurationItemType != null)
                    hashCode = hashCode * 59 + this.ConfigurationItemType.GetHashCode();
                if (this.ContactID != null)
                    hashCode = hashCode * 59 + this.ContactID.GetHashCode();
                if (this.ContractID != null)
                    hashCode = hashCode * 59 + this.ContractID.GetHashCode();
                if (this.ContractServiceBundleID != null)
                    hashCode = hashCode * 59 + this.ContractServiceBundleID.GetHashCode();
                if (this.ContractServiceID != null)
                    hashCode = hashCode * 59 + this.ContractServiceID.GetHashCode();
                if (this.CreateDate != null)
                    hashCode = hashCode * 59 + this.CreateDate.GetHashCode();
                if (this.CreatedByPersonID != null)
                    hashCode = hashCode * 59 + this.CreatedByPersonID.GetHashCode();
                if (this.DailyCost != null)
                    hashCode = hashCode * 59 + this.DailyCost.GetHashCode();
                if (this.DattoAvailableKilobytes != null)
                    hashCode = hashCode * 59 + this.DattoAvailableKilobytes.GetHashCode();
                if (this.DattoDeviceMemoryMegabytes != null)
                    hashCode = hashCode * 59 + this.DattoDeviceMemoryMegabytes.GetHashCode();
                if (this.DattoDrivesErrors != null)
                    hashCode = hashCode * 59 + this.DattoDrivesErrors.GetHashCode();
                if (this.DattoHostname != null)
                    hashCode = hashCode * 59 + this.DattoHostname.GetHashCode();
                if (this.DattoInternalIP != null)
                    hashCode = hashCode * 59 + this.DattoInternalIP.GetHashCode();
                if (this.DattoKernelVersionID != null)
                    hashCode = hashCode * 59 + this.DattoKernelVersionID.GetHashCode();
                if (this.DattoLastCheckInDateTime != null)
                    hashCode = hashCode * 59 + this.DattoLastCheckInDateTime.GetHashCode();
                if (this.DattoNICSpeedKilobitsPerSecond != null)
                    hashCode = hashCode * 59 + this.DattoNICSpeedKilobitsPerSecond.GetHashCode();
                if (this.DattoNumberOfAgents != null)
                    hashCode = hashCode * 59 + this.DattoNumberOfAgents.GetHashCode();
                if (this.DattoNumberOfDrives != null)
                    hashCode = hashCode * 59 + this.DattoNumberOfDrives.GetHashCode();
                if (this.DattoNumberOfVolumes != null)
                    hashCode = hashCode * 59 + this.DattoNumberOfVolumes.GetHashCode();
                if (this.DattoOffsiteUsedBytes != null)
                    hashCode = hashCode * 59 + this.DattoOffsiteUsedBytes.GetHashCode();
                if (this.DattoOSVersionID != null)
                    hashCode = hashCode * 59 + this.DattoOSVersionID.GetHashCode();
                if (this.DattoPercentageUsed != null)
                    hashCode = hashCode * 59 + this.DattoPercentageUsed.GetHashCode();
                if (this.DattoProtectedKilobytes != null)
                    hashCode = hashCode * 59 + this.DattoProtectedKilobytes.GetHashCode();
                if (this.DattoRemoteIP != null)
                    hashCode = hashCode * 59 + this.DattoRemoteIP.GetHashCode();
                if (this.DattoSerialNumber != null)
                    hashCode = hashCode * 59 + this.DattoSerialNumber.GetHashCode();
                if (this.DattoUptimeSeconds != null)
                    hashCode = hashCode * 59 + this.DattoUptimeSeconds.GetHashCode();
                if (this.DattoUsedKilobytes != null)
                    hashCode = hashCode * 59 + this.DattoUsedKilobytes.GetHashCode();
                if (this.DattoZFSVersionID != null)
                    hashCode = hashCode * 59 + this.DattoZFSVersionID.GetHashCode();
                if (this.DeviceNetworkingID != null)
                    hashCode = hashCode * 59 + this.DeviceNetworkingID.GetHashCode();
                if (this.Domain != null)
                    hashCode = hashCode * 59 + this.Domain.GetHashCode();
                if (this.DomainRegistrarID != null)
                    hashCode = hashCode * 59 + this.DomainRegistrarID.GetHashCode();
                if (this.DomainRegistrationDateTime != null)
                    hashCode = hashCode * 59 + this.DomainRegistrationDateTime.GetHashCode();
                if (this.DomainLastUpdatedDateTime != null)
                    hashCode = hashCode * 59 + this.DomainLastUpdatedDateTime.GetHashCode();
                if (this.DomainExpirationDateTime != null)
                    hashCode = hashCode * 59 + this.DomainExpirationDateTime.GetHashCode();
                if (this.HourlyCost != null)
                    hashCode = hashCode * 59 + this.HourlyCost.GetHashCode();
                if (this.ImpersonatorCreatorResourceID != null)
                    hashCode = hashCode * 59 + this.ImpersonatorCreatorResourceID.GetHashCode();
                if (this.InstallDate != null)
                    hashCode = hashCode * 59 + this.InstallDate.GetHashCode();
                if (this.InstalledByContactID != null)
                    hashCode = hashCode * 59 + this.InstalledByContactID.GetHashCode();
                if (this.InstalledByID != null)
                    hashCode = hashCode * 59 + this.InstalledByID.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.LastActivityPersonID != null)
                    hashCode = hashCode * 59 + this.LastActivityPersonID.GetHashCode();
                if (this.LastActivityPersonType != null)
                    hashCode = hashCode * 59 + this.LastActivityPersonType.GetHashCode();
                if (this.LastModifiedTime != null)
                    hashCode = hashCode * 59 + this.LastModifiedTime.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.MonthlyCost != null)
                    hashCode = hashCode * 59 + this.MonthlyCost.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.NumberOfUsers != null)
                    hashCode = hashCode * 59 + this.NumberOfUsers.GetHashCode();
                if (this.ParentConfigurationItemID != null)
                    hashCode = hashCode * 59 + this.ParentConfigurationItemID.GetHashCode();
                if (this.PerUseCost != null)
                    hashCode = hashCode * 59 + this.PerUseCost.GetHashCode();
                if (this.ProductID != null)
                    hashCode = hashCode * 59 + this.ProductID.GetHashCode();
                if (this.ReferenceNumber != null)
                    hashCode = hashCode * 59 + this.ReferenceNumber.GetHashCode();
                if (this.ReferenceTitle != null)
                    hashCode = hashCode * 59 + this.ReferenceTitle.GetHashCode();
                if (this.RmmDeviceAuditAntivirusStatusID != null)
                    hashCode = hashCode * 59 + this.RmmDeviceAuditAntivirusStatusID.GetHashCode();
                if (this.RmmDeviceAuditArchitectureID != null)
                    hashCode = hashCode * 59 + this.RmmDeviceAuditArchitectureID.GetHashCode();
                if (this.RmmDeviceAuditBackupStatusID != null)
                    hashCode = hashCode * 59 + this.RmmDeviceAuditBackupStatusID.GetHashCode();
                if (this.RmmDeviceAuditDescription != null)
                    hashCode = hashCode * 59 + this.RmmDeviceAuditDescription.GetHashCode();
                if (this.RmmDeviceAuditDeviceTypeID != null)
                    hashCode = hashCode * 59 + this.RmmDeviceAuditDeviceTypeID.GetHashCode();
                if (this.RmmDeviceAuditDisplayAdaptorID != null)
                    hashCode = hashCode * 59 + this.RmmDeviceAuditDisplayAdaptorID.GetHashCode();
                if (this.RmmDeviceAuditDomainID != null)
                    hashCode = hashCode * 59 + this.RmmDeviceAuditDomainID.GetHashCode();
                if (this.RmmDeviceAuditExternalIPAddress != null)
                    hashCode = hashCode * 59 + this.RmmDeviceAuditExternalIPAddress.GetHashCode();
                if (this.RmmDeviceAuditHostname != null)
                    hashCode = hashCode * 59 + this.RmmDeviceAuditHostname.GetHashCode();
                if (this.RmmDeviceAuditIPAddress != null)
                    hashCode = hashCode * 59 + this.RmmDeviceAuditIPAddress.GetHashCode();
                if (this.RmmDeviceAuditLastUser != null)
                    hashCode = hashCode * 59 + this.RmmDeviceAuditLastUser.GetHashCode();
                if (this.RmmDeviceAuditMacAddress != null)
                    hashCode = hashCode * 59 + this.RmmDeviceAuditMacAddress.GetHashCode();
                if (this.RmmDeviceAuditManufacturerID != null)
                    hashCode = hashCode * 59 + this.RmmDeviceAuditManufacturerID.GetHashCode();
                if (this.RmmDeviceAuditMemoryBytes != null)
                    hashCode = hashCode * 59 + this.RmmDeviceAuditMemoryBytes.GetHashCode();
                if (this.RmmDeviceAuditMissingPatchCount != null)
                    hashCode = hashCode * 59 + this.RmmDeviceAuditMissingPatchCount.GetHashCode();
                if (this.RmmDeviceAuditMobileNetworkOperatorID != null)
                    hashCode = hashCode * 59 + this.RmmDeviceAuditMobileNetworkOperatorID.GetHashCode();
                if (this.RmmDeviceAuditMobileNumber != null)
                    hashCode = hashCode * 59 + this.RmmDeviceAuditMobileNumber.GetHashCode();
                if (this.RmmDeviceAuditModelID != null)
                    hashCode = hashCode * 59 + this.RmmDeviceAuditModelID.GetHashCode();
                if (this.RmmDeviceAuditMotherboardID != null)
                    hashCode = hashCode * 59 + this.RmmDeviceAuditMotherboardID.GetHashCode();
                if (this.RmmDeviceAuditOperatingSystem != null)
                    hashCode = hashCode * 59 + this.RmmDeviceAuditOperatingSystem.GetHashCode();
                if (this.RmmDeviceAuditPatchStatusID != null)
                    hashCode = hashCode * 59 + this.RmmDeviceAuditPatchStatusID.GetHashCode();
                if (this.RmmDeviceAuditProcessorID != null)
                    hashCode = hashCode * 59 + this.RmmDeviceAuditProcessorID.GetHashCode();
                if (this.RmmDeviceAuditServicePackID != null)
                    hashCode = hashCode * 59 + this.RmmDeviceAuditServicePackID.GetHashCode();
                if (this.RmmDeviceAuditSNMPContact != null)
                    hashCode = hashCode * 59 + this.RmmDeviceAuditSNMPContact.GetHashCode();
                if (this.RmmDeviceAuditSNMPLocation != null)
                    hashCode = hashCode * 59 + this.RmmDeviceAuditSNMPLocation.GetHashCode();
                if (this.RmmDeviceAuditSNMPName != null)
                    hashCode = hashCode * 59 + this.RmmDeviceAuditSNMPName.GetHashCode();
                if (this.RmmDeviceAuditSoftwareStatusID != null)
                    hashCode = hashCode * 59 + this.RmmDeviceAuditSoftwareStatusID.GetHashCode();
                if (this.RmmDeviceAuditStorageBytes != null)
                    hashCode = hashCode * 59 + this.RmmDeviceAuditStorageBytes.GetHashCode();
                if (this.RmmDeviceID != null)
                    hashCode = hashCode * 59 + this.RmmDeviceID.GetHashCode();
                if (this.RmmDeviceUID != null)
                    hashCode = hashCode * 59 + this.RmmDeviceUID.GetHashCode();
                if (this.RmmOpenAlertCount != null)
                    hashCode = hashCode * 59 + this.RmmOpenAlertCount.GetHashCode();
                if (this.SerialNumber != null)
                    hashCode = hashCode * 59 + this.SerialNumber.GetHashCode();
                if (this.ServiceBundleID != null)
                    hashCode = hashCode * 59 + this.ServiceBundleID.GetHashCode();
                if (this.ServiceID != null)
                    hashCode = hashCode * 59 + this.ServiceID.GetHashCode();
                if (this.ServiceLevelAgreementID != null)
                    hashCode = hashCode * 59 + this.ServiceLevelAgreementID.GetHashCode();
                if (this.SetupFee != null)
                    hashCode = hashCode * 59 + this.SetupFee.GetHashCode();
                if (this.SourceChargeID != null)
                    hashCode = hashCode * 59 + this.SourceChargeID.GetHashCode();
                if (this.SourceChargeType != null)
                    hashCode = hashCode * 59 + this.SourceChargeType.GetHashCode();
                if (this.SslSource != null)
                    hashCode = hashCode * 59 + this.SslSource.GetHashCode();
                if (this.SslCommonName != null)
                    hashCode = hashCode * 59 + this.SslCommonName.GetHashCode();
                if (this.SslValidFromDateTime != null)
                    hashCode = hashCode * 59 + this.SslValidFromDateTime.GetHashCode();
                if (this.SslValidUntilDateTime != null)
                    hashCode = hashCode * 59 + this.SslValidUntilDateTime.GetHashCode();
                if (this.SslIssuedBy != null)
                    hashCode = hashCode * 59 + this.SslIssuedBy.GetHashCode();
                if (this.SslOrganization != null)
                    hashCode = hashCode * 59 + this.SslOrganization.GetHashCode();
                if (this.SslOrganizationUnit != null)
                    hashCode = hashCode * 59 + this.SslOrganizationUnit.GetHashCode();
                if (this.SslLocation != null)
                    hashCode = hashCode * 59 + this.SslLocation.GetHashCode();
                if (this.SslSerialNumber != null)
                    hashCode = hashCode * 59 + this.SslSerialNumber.GetHashCode();
                if (this.SslSignatureAlgorithm != null)
                    hashCode = hashCode * 59 + this.SslSignatureAlgorithm.GetHashCode();
                if (this.VendorID != null)
                    hashCode = hashCode * 59 + this.VendorID.GetHashCode();
                if (this.WarrantyExpirationDate != null)
                    hashCode = hashCode * 59 + this.WarrantyExpirationDate.GetHashCode();
                if (this.UserDefinedFields != null)
                    hashCode = hashCode * 59 + this.UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
