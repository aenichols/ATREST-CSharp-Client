/* 
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ContractModel
    /// </summary>
    [DataContract]
    public partial class ContractModel :  IEquatable<ContractModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContractModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="billingPreference">billingPreference.</param>
        /// <param name="billToCompanyContactID">billToCompanyContactID.</param>
        /// <param name="billToCompanyID">billToCompanyID.</param>
        /// <param name="companyID">companyID.</param>
        /// <param name="contactID">contactID.</param>
        /// <param name="contactName">contactName.</param>
        /// <param name="contractCategory">contractCategory.</param>
        /// <param name="contractExclusionSetID">contractExclusionSetID.</param>
        /// <param name="contractName">contractName.</param>
        /// <param name="contractNumber">contractNumber.</param>
        /// <param name="contractPeriodType">contractPeriodType.</param>
        /// <param name="contractType">contractType.</param>
        /// <param name="description">description.</param>
        /// <param name="endDate">endDate.</param>
        /// <param name="estimatedCost">estimatedCost.</param>
        /// <param name="estimatedHours">estimatedHours.</param>
        /// <param name="estimatedRevenue">estimatedRevenue.</param>
        /// <param name="exclusionContractID">exclusionContractID.</param>
        /// <param name="internalCurrencyOverageBillingRate">internalCurrencyOverageBillingRate.</param>
        /// <param name="internalCurrencySetupFee">internalCurrencySetupFee.</param>
        /// <param name="isCompliant">isCompliant.</param>
        /// <param name="isDefaultContract">isDefaultContract.</param>
        /// <param name="opportunityID">opportunityID.</param>
        /// <param name="organizationalLevelAssociationID">organizationalLevelAssociationID.</param>
        /// <param name="overageBillingRate">overageBillingRate.</param>
        /// <param name="purchaseOrderNumber">purchaseOrderNumber.</param>
        /// <param name="renewedContractID">renewedContractID.</param>
        /// <param name="serviceLevelAgreementID">serviceLevelAgreementID.</param>
        /// <param name="setupFee">setupFee.</param>
        /// <param name="setupFeeBillingCodeID">setupFeeBillingCodeID.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="status">status.</param>
        /// <param name="timeReportingRequiresStartAndStopTimes">timeReportingRequiresStartAndStopTimes.</param>
        /// <param name="userDefinedFields">userDefinedFields.</param>
        public ContractModel(long? id = default(long?), int? billingPreference = default(int?), int? billToCompanyContactID = default(int?), int? billToCompanyID = default(int?), int? companyID = default(int?), int? contactID = default(int?), string contactName = default(string), int? contractCategory = default(int?), int? contractExclusionSetID = default(int?), string contractName = default(string), string contractNumber = default(string), int? contractPeriodType = default(int?), int? contractType = default(int?), string description = default(string), DateTime? endDate = default(DateTime?), double? estimatedCost = default(double?), double? estimatedHours = default(double?), double? estimatedRevenue = default(double?), long? exclusionContractID = default(long?), double? internalCurrencyOverageBillingRate = default(double?), double? internalCurrencySetupFee = default(double?), bool? isCompliant = default(bool?), bool? isDefaultContract = default(bool?), int? opportunityID = default(int?), int? organizationalLevelAssociationID = default(int?), double? overageBillingRate = default(double?), string purchaseOrderNumber = default(string), long? renewedContractID = default(long?), int? serviceLevelAgreementID = default(int?), double? setupFee = default(double?), long? setupFeeBillingCodeID = default(long?), DateTime? startDate = default(DateTime?), int? status = default(int?), int? timeReportingRequiresStartAndStopTimes = default(int?), List<UserDefinedField> userDefinedFields = default(List<UserDefinedField>))
        {
            this.Id = id;
            this.BillingPreference = billingPreference;
            this.BillToCompanyContactID = billToCompanyContactID;
            this.BillToCompanyID = billToCompanyID;
            this.CompanyID = companyID;
            this.ContactID = contactID;
            this.ContactName = contactName;
            this.ContractCategory = contractCategory;
            this.ContractExclusionSetID = contractExclusionSetID;
            this.ContractName = contractName;
            this.ContractNumber = contractNumber;
            this.ContractPeriodType = contractPeriodType;
            this.ContractType = contractType;
            this.Description = description;
            this.EndDate = endDate;
            this.EstimatedCost = estimatedCost;
            this.EstimatedHours = estimatedHours;
            this.EstimatedRevenue = estimatedRevenue;
            this.ExclusionContractID = exclusionContractID;
            this.InternalCurrencyOverageBillingRate = internalCurrencyOverageBillingRate;
            this.InternalCurrencySetupFee = internalCurrencySetupFee;
            this.IsCompliant = isCompliant;
            this.IsDefaultContract = isDefaultContract;
            this.OpportunityID = opportunityID;
            this.OrganizationalLevelAssociationID = organizationalLevelAssociationID;
            this.OverageBillingRate = overageBillingRate;
            this.PurchaseOrderNumber = purchaseOrderNumber;
            this.RenewedContractID = renewedContractID;
            this.ServiceLevelAgreementID = serviceLevelAgreementID;
            this.SetupFee = setupFee;
            this.SetupFeeBillingCodeID = setupFeeBillingCodeID;
            this.StartDate = startDate;
            this.Status = status;
            this.TimeReportingRequiresStartAndStopTimes = timeReportingRequiresStartAndStopTimes;
            this.UserDefinedFields = userDefinedFields;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets BillingPreference
        /// </summary>
        [DataMember(Name="billingPreference", EmitDefaultValue=false)]
        public int? BillingPreference { get; set; }

        /// <summary>
        /// Gets or Sets BillToCompanyContactID
        /// </summary>
        [DataMember(Name="billToCompanyContactID", EmitDefaultValue=false)]
        public int? BillToCompanyContactID { get; set; }

        /// <summary>
        /// Gets or Sets BillToCompanyID
        /// </summary>
        [DataMember(Name="billToCompanyID", EmitDefaultValue=false)]
        public int? BillToCompanyID { get; set; }

        /// <summary>
        /// Gets or Sets CompanyID
        /// </summary>
        [DataMember(Name="companyID", EmitDefaultValue=false)]
        public int? CompanyID { get; set; }

        /// <summary>
        /// Gets or Sets ContactID
        /// </summary>
        [DataMember(Name="contactID", EmitDefaultValue=false)]
        public int? ContactID { get; set; }

        /// <summary>
        /// Gets or Sets ContactName
        /// </summary>
        [DataMember(Name="contactName", EmitDefaultValue=false)]
        public string ContactName { get; set; }

        /// <summary>
        /// Gets or Sets ContractCategory
        /// </summary>
        [DataMember(Name="contractCategory", EmitDefaultValue=false)]
        public int? ContractCategory { get; set; }

        /// <summary>
        /// Gets or Sets ContractExclusionSetID
        /// </summary>
        [DataMember(Name="contractExclusionSetID", EmitDefaultValue=false)]
        public int? ContractExclusionSetID { get; set; }

        /// <summary>
        /// Gets or Sets ContractName
        /// </summary>
        [DataMember(Name="contractName", EmitDefaultValue=false)]
        public string ContractName { get; set; }

        /// <summary>
        /// Gets or Sets ContractNumber
        /// </summary>
        [DataMember(Name="contractNumber", EmitDefaultValue=false)]
        public string ContractNumber { get; set; }

        /// <summary>
        /// Gets or Sets ContractPeriodType
        /// </summary>
        [DataMember(Name="contractPeriodType", EmitDefaultValue=false)]
        public int? ContractPeriodType { get; set; }

        /// <summary>
        /// Gets or Sets ContractType
        /// </summary>
        [DataMember(Name="contractType", EmitDefaultValue=false)]
        public int? ContractType { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets or Sets EstimatedCost
        /// </summary>
        [DataMember(Name="estimatedCost", EmitDefaultValue=false)]
        public double? EstimatedCost { get; set; }

        /// <summary>
        /// Gets or Sets EstimatedHours
        /// </summary>
        [DataMember(Name="estimatedHours", EmitDefaultValue=false)]
        public double? EstimatedHours { get; set; }

        /// <summary>
        /// Gets or Sets EstimatedRevenue
        /// </summary>
        [DataMember(Name="estimatedRevenue", EmitDefaultValue=false)]
        public double? EstimatedRevenue { get; set; }

        /// <summary>
        /// Gets or Sets ExclusionContractID
        /// </summary>
        [DataMember(Name="exclusionContractID", EmitDefaultValue=false)]
        public long? ExclusionContractID { get; set; }

        /// <summary>
        /// Gets or Sets InternalCurrencyOverageBillingRate
        /// </summary>
        [DataMember(Name="internalCurrencyOverageBillingRate", EmitDefaultValue=false)]
        public double? InternalCurrencyOverageBillingRate { get; set; }

        /// <summary>
        /// Gets or Sets InternalCurrencySetupFee
        /// </summary>
        [DataMember(Name="internalCurrencySetupFee", EmitDefaultValue=false)]
        public double? InternalCurrencySetupFee { get; set; }

        /// <summary>
        /// Gets or Sets IsCompliant
        /// </summary>
        [DataMember(Name="isCompliant", EmitDefaultValue=false)]
        public bool? IsCompliant { get; set; }

        /// <summary>
        /// Gets or Sets IsDefaultContract
        /// </summary>
        [DataMember(Name="isDefaultContract", EmitDefaultValue=false)]
        public bool? IsDefaultContract { get; set; }

        /// <summary>
        /// Gets or Sets OpportunityID
        /// </summary>
        [DataMember(Name="opportunityID", EmitDefaultValue=false)]
        public int? OpportunityID { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationalLevelAssociationID
        /// </summary>
        [DataMember(Name="organizationalLevelAssociationID", EmitDefaultValue=false)]
        public int? OrganizationalLevelAssociationID { get; set; }

        /// <summary>
        /// Gets or Sets OverageBillingRate
        /// </summary>
        [DataMember(Name="overageBillingRate", EmitDefaultValue=false)]
        public double? OverageBillingRate { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseOrderNumber
        /// </summary>
        [DataMember(Name="purchaseOrderNumber", EmitDefaultValue=false)]
        public string PurchaseOrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets RenewedContractID
        /// </summary>
        [DataMember(Name="renewedContractID", EmitDefaultValue=false)]
        public long? RenewedContractID { get; set; }

        /// <summary>
        /// Gets or Sets ServiceLevelAgreementID
        /// </summary>
        [DataMember(Name="serviceLevelAgreementID", EmitDefaultValue=false)]
        public int? ServiceLevelAgreementID { get; set; }

        /// <summary>
        /// Gets or Sets SetupFee
        /// </summary>
        [DataMember(Name="setupFee", EmitDefaultValue=false)]
        public double? SetupFee { get; set; }

        /// <summary>
        /// Gets or Sets SetupFeeBillingCodeID
        /// </summary>
        [DataMember(Name="setupFeeBillingCodeID", EmitDefaultValue=false)]
        public long? SetupFeeBillingCodeID { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public int? Status { get; set; }

        /// <summary>
        /// Gets or Sets TimeReportingRequiresStartAndStopTimes
        /// </summary>
        [DataMember(Name="timeReportingRequiresStartAndStopTimes", EmitDefaultValue=false)]
        public int? TimeReportingRequiresStartAndStopTimes { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields", EmitDefaultValue=false)]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContractModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BillingPreference: ").Append(BillingPreference).Append("\n");
            sb.Append("  BillToCompanyContactID: ").Append(BillToCompanyContactID).Append("\n");
            sb.Append("  BillToCompanyID: ").Append(BillToCompanyID).Append("\n");
            sb.Append("  CompanyID: ").Append(CompanyID).Append("\n");
            sb.Append("  ContactID: ").Append(ContactID).Append("\n");
            sb.Append("  ContactName: ").Append(ContactName).Append("\n");
            sb.Append("  ContractCategory: ").Append(ContractCategory).Append("\n");
            sb.Append("  ContractExclusionSetID: ").Append(ContractExclusionSetID).Append("\n");
            sb.Append("  ContractName: ").Append(ContractName).Append("\n");
            sb.Append("  ContractNumber: ").Append(ContractNumber).Append("\n");
            sb.Append("  ContractPeriodType: ").Append(ContractPeriodType).Append("\n");
            sb.Append("  ContractType: ").Append(ContractType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  EstimatedCost: ").Append(EstimatedCost).Append("\n");
            sb.Append("  EstimatedHours: ").Append(EstimatedHours).Append("\n");
            sb.Append("  EstimatedRevenue: ").Append(EstimatedRevenue).Append("\n");
            sb.Append("  ExclusionContractID: ").Append(ExclusionContractID).Append("\n");
            sb.Append("  InternalCurrencyOverageBillingRate: ").Append(InternalCurrencyOverageBillingRate).Append("\n");
            sb.Append("  InternalCurrencySetupFee: ").Append(InternalCurrencySetupFee).Append("\n");
            sb.Append("  IsCompliant: ").Append(IsCompliant).Append("\n");
            sb.Append("  IsDefaultContract: ").Append(IsDefaultContract).Append("\n");
            sb.Append("  OpportunityID: ").Append(OpportunityID).Append("\n");
            sb.Append("  OrganizationalLevelAssociationID: ").Append(OrganizationalLevelAssociationID).Append("\n");
            sb.Append("  OverageBillingRate: ").Append(OverageBillingRate).Append("\n");
            sb.Append("  PurchaseOrderNumber: ").Append(PurchaseOrderNumber).Append("\n");
            sb.Append("  RenewedContractID: ").Append(RenewedContractID).Append("\n");
            sb.Append("  ServiceLevelAgreementID: ").Append(ServiceLevelAgreementID).Append("\n");
            sb.Append("  SetupFee: ").Append(SetupFee).Append("\n");
            sb.Append("  SetupFeeBillingCodeID: ").Append(SetupFeeBillingCodeID).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TimeReportingRequiresStartAndStopTimes: ").Append(TimeReportingRequiresStartAndStopTimes).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContractModel);
        }

        /// <summary>
        /// Returns true if ContractModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ContractModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContractModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.BillingPreference == input.BillingPreference ||
                    (this.BillingPreference != null &&
                    this.BillingPreference.Equals(input.BillingPreference))
                ) && 
                (
                    this.BillToCompanyContactID == input.BillToCompanyContactID ||
                    (this.BillToCompanyContactID != null &&
                    this.BillToCompanyContactID.Equals(input.BillToCompanyContactID))
                ) && 
                (
                    this.BillToCompanyID == input.BillToCompanyID ||
                    (this.BillToCompanyID != null &&
                    this.BillToCompanyID.Equals(input.BillToCompanyID))
                ) && 
                (
                    this.CompanyID == input.CompanyID ||
                    (this.CompanyID != null &&
                    this.CompanyID.Equals(input.CompanyID))
                ) && 
                (
                    this.ContactID == input.ContactID ||
                    (this.ContactID != null &&
                    this.ContactID.Equals(input.ContactID))
                ) && 
                (
                    this.ContactName == input.ContactName ||
                    (this.ContactName != null &&
                    this.ContactName.Equals(input.ContactName))
                ) && 
                (
                    this.ContractCategory == input.ContractCategory ||
                    (this.ContractCategory != null &&
                    this.ContractCategory.Equals(input.ContractCategory))
                ) && 
                (
                    this.ContractExclusionSetID == input.ContractExclusionSetID ||
                    (this.ContractExclusionSetID != null &&
                    this.ContractExclusionSetID.Equals(input.ContractExclusionSetID))
                ) && 
                (
                    this.ContractName == input.ContractName ||
                    (this.ContractName != null &&
                    this.ContractName.Equals(input.ContractName))
                ) && 
                (
                    this.ContractNumber == input.ContractNumber ||
                    (this.ContractNumber != null &&
                    this.ContractNumber.Equals(input.ContractNumber))
                ) && 
                (
                    this.ContractPeriodType == input.ContractPeriodType ||
                    (this.ContractPeriodType != null &&
                    this.ContractPeriodType.Equals(input.ContractPeriodType))
                ) && 
                (
                    this.ContractType == input.ContractType ||
                    (this.ContractType != null &&
                    this.ContractType.Equals(input.ContractType))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.EstimatedCost == input.EstimatedCost ||
                    (this.EstimatedCost != null &&
                    this.EstimatedCost.Equals(input.EstimatedCost))
                ) && 
                (
                    this.EstimatedHours == input.EstimatedHours ||
                    (this.EstimatedHours != null &&
                    this.EstimatedHours.Equals(input.EstimatedHours))
                ) && 
                (
                    this.EstimatedRevenue == input.EstimatedRevenue ||
                    (this.EstimatedRevenue != null &&
                    this.EstimatedRevenue.Equals(input.EstimatedRevenue))
                ) && 
                (
                    this.ExclusionContractID == input.ExclusionContractID ||
                    (this.ExclusionContractID != null &&
                    this.ExclusionContractID.Equals(input.ExclusionContractID))
                ) && 
                (
                    this.InternalCurrencyOverageBillingRate == input.InternalCurrencyOverageBillingRate ||
                    (this.InternalCurrencyOverageBillingRate != null &&
                    this.InternalCurrencyOverageBillingRate.Equals(input.InternalCurrencyOverageBillingRate))
                ) && 
                (
                    this.InternalCurrencySetupFee == input.InternalCurrencySetupFee ||
                    (this.InternalCurrencySetupFee != null &&
                    this.InternalCurrencySetupFee.Equals(input.InternalCurrencySetupFee))
                ) && 
                (
                    this.IsCompliant == input.IsCompliant ||
                    (this.IsCompliant != null &&
                    this.IsCompliant.Equals(input.IsCompliant))
                ) && 
                (
                    this.IsDefaultContract == input.IsDefaultContract ||
                    (this.IsDefaultContract != null &&
                    this.IsDefaultContract.Equals(input.IsDefaultContract))
                ) && 
                (
                    this.OpportunityID == input.OpportunityID ||
                    (this.OpportunityID != null &&
                    this.OpportunityID.Equals(input.OpportunityID))
                ) && 
                (
                    this.OrganizationalLevelAssociationID == input.OrganizationalLevelAssociationID ||
                    (this.OrganizationalLevelAssociationID != null &&
                    this.OrganizationalLevelAssociationID.Equals(input.OrganizationalLevelAssociationID))
                ) && 
                (
                    this.OverageBillingRate == input.OverageBillingRate ||
                    (this.OverageBillingRate != null &&
                    this.OverageBillingRate.Equals(input.OverageBillingRate))
                ) && 
                (
                    this.PurchaseOrderNumber == input.PurchaseOrderNumber ||
                    (this.PurchaseOrderNumber != null &&
                    this.PurchaseOrderNumber.Equals(input.PurchaseOrderNumber))
                ) && 
                (
                    this.RenewedContractID == input.RenewedContractID ||
                    (this.RenewedContractID != null &&
                    this.RenewedContractID.Equals(input.RenewedContractID))
                ) && 
                (
                    this.ServiceLevelAgreementID == input.ServiceLevelAgreementID ||
                    (this.ServiceLevelAgreementID != null &&
                    this.ServiceLevelAgreementID.Equals(input.ServiceLevelAgreementID))
                ) && 
                (
                    this.SetupFee == input.SetupFee ||
                    (this.SetupFee != null &&
                    this.SetupFee.Equals(input.SetupFee))
                ) && 
                (
                    this.SetupFeeBillingCodeID == input.SetupFeeBillingCodeID ||
                    (this.SetupFeeBillingCodeID != null &&
                    this.SetupFeeBillingCodeID.Equals(input.SetupFeeBillingCodeID))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.TimeReportingRequiresStartAndStopTimes == input.TimeReportingRequiresStartAndStopTimes ||
                    (this.TimeReportingRequiresStartAndStopTimes != null &&
                    this.TimeReportingRequiresStartAndStopTimes.Equals(input.TimeReportingRequiresStartAndStopTimes))
                ) && 
                (
                    this.UserDefinedFields == input.UserDefinedFields ||
                    this.UserDefinedFields != null &&
                    this.UserDefinedFields.SequenceEqual(input.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.BillingPreference != null)
                    hashCode = hashCode * 59 + this.BillingPreference.GetHashCode();
                if (this.BillToCompanyContactID != null)
                    hashCode = hashCode * 59 + this.BillToCompanyContactID.GetHashCode();
                if (this.BillToCompanyID != null)
                    hashCode = hashCode * 59 + this.BillToCompanyID.GetHashCode();
                if (this.CompanyID != null)
                    hashCode = hashCode * 59 + this.CompanyID.GetHashCode();
                if (this.ContactID != null)
                    hashCode = hashCode * 59 + this.ContactID.GetHashCode();
                if (this.ContactName != null)
                    hashCode = hashCode * 59 + this.ContactName.GetHashCode();
                if (this.ContractCategory != null)
                    hashCode = hashCode * 59 + this.ContractCategory.GetHashCode();
                if (this.ContractExclusionSetID != null)
                    hashCode = hashCode * 59 + this.ContractExclusionSetID.GetHashCode();
                if (this.ContractName != null)
                    hashCode = hashCode * 59 + this.ContractName.GetHashCode();
                if (this.ContractNumber != null)
                    hashCode = hashCode * 59 + this.ContractNumber.GetHashCode();
                if (this.ContractPeriodType != null)
                    hashCode = hashCode * 59 + this.ContractPeriodType.GetHashCode();
                if (this.ContractType != null)
                    hashCode = hashCode * 59 + this.ContractType.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.EstimatedCost != null)
                    hashCode = hashCode * 59 + this.EstimatedCost.GetHashCode();
                if (this.EstimatedHours != null)
                    hashCode = hashCode * 59 + this.EstimatedHours.GetHashCode();
                if (this.EstimatedRevenue != null)
                    hashCode = hashCode * 59 + this.EstimatedRevenue.GetHashCode();
                if (this.ExclusionContractID != null)
                    hashCode = hashCode * 59 + this.ExclusionContractID.GetHashCode();
                if (this.InternalCurrencyOverageBillingRate != null)
                    hashCode = hashCode * 59 + this.InternalCurrencyOverageBillingRate.GetHashCode();
                if (this.InternalCurrencySetupFee != null)
                    hashCode = hashCode * 59 + this.InternalCurrencySetupFee.GetHashCode();
                if (this.IsCompliant != null)
                    hashCode = hashCode * 59 + this.IsCompliant.GetHashCode();
                if (this.IsDefaultContract != null)
                    hashCode = hashCode * 59 + this.IsDefaultContract.GetHashCode();
                if (this.OpportunityID != null)
                    hashCode = hashCode * 59 + this.OpportunityID.GetHashCode();
                if (this.OrganizationalLevelAssociationID != null)
                    hashCode = hashCode * 59 + this.OrganizationalLevelAssociationID.GetHashCode();
                if (this.OverageBillingRate != null)
                    hashCode = hashCode * 59 + this.OverageBillingRate.GetHashCode();
                if (this.PurchaseOrderNumber != null)
                    hashCode = hashCode * 59 + this.PurchaseOrderNumber.GetHashCode();
                if (this.RenewedContractID != null)
                    hashCode = hashCode * 59 + this.RenewedContractID.GetHashCode();
                if (this.ServiceLevelAgreementID != null)
                    hashCode = hashCode * 59 + this.ServiceLevelAgreementID.GetHashCode();
                if (this.SetupFee != null)
                    hashCode = hashCode * 59 + this.SetupFee.GetHashCode();
                if (this.SetupFeeBillingCodeID != null)
                    hashCode = hashCode * 59 + this.SetupFeeBillingCodeID.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TimeReportingRequiresStartAndStopTimes != null)
                    hashCode = hashCode * 59 + this.TimeReportingRequiresStartAndStopTimes.GetHashCode();
                if (this.UserDefinedFields != null)
                    hashCode = hashCode * 59 + this.UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
