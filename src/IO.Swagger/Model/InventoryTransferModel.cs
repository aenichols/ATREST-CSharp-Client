/* 
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InventoryTransferModel
    /// </summary>
    [DataContract]
    public partial class InventoryTransferModel :  IEquatable<InventoryTransferModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryTransferModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="fromLocationID">fromLocationID.</param>
        /// <param name="notes">notes.</param>
        /// <param name="productID">productID.</param>
        /// <param name="quantityTransferred">quantityTransferred.</param>
        /// <param name="serialNumber">serialNumber.</param>
        /// <param name="toLocationID">toLocationID.</param>
        /// <param name="transferByResourceID">transferByResourceID.</param>
        /// <param name="transferDate">transferDate.</param>
        /// <param name="updateNote">updateNote.</param>
        /// <param name="userDefinedFields">userDefinedFields.</param>
        public InventoryTransferModel(long? id = default(long?), long? fromLocationID = default(long?), string notes = default(string), long? productID = default(long?), int? quantityTransferred = default(int?), string serialNumber = default(string), long? toLocationID = default(long?), int? transferByResourceID = default(int?), DateTime? transferDate = default(DateTime?), string updateNote = default(string), List<UserDefinedField> userDefinedFields = default(List<UserDefinedField>))
        {
            this.Id = id;
            this.FromLocationID = fromLocationID;
            this.Notes = notes;
            this.ProductID = productID;
            this.QuantityTransferred = quantityTransferred;
            this.SerialNumber = serialNumber;
            this.ToLocationID = toLocationID;
            this.TransferByResourceID = transferByResourceID;
            this.TransferDate = transferDate;
            this.UpdateNote = updateNote;
            this.UserDefinedFields = userDefinedFields;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets FromLocationID
        /// </summary>
        [DataMember(Name="fromLocationID", EmitDefaultValue=false)]
        public long? FromLocationID { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// Gets or Sets ProductID
        /// </summary>
        [DataMember(Name="productID", EmitDefaultValue=false)]
        public long? ProductID { get; set; }

        /// <summary>
        /// Gets or Sets QuantityTransferred
        /// </summary>
        [DataMember(Name="quantityTransferred", EmitDefaultValue=false)]
        public int? QuantityTransferred { get; set; }

        /// <summary>
        /// Gets or Sets SerialNumber
        /// </summary>
        [DataMember(Name="serialNumber", EmitDefaultValue=false)]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Gets or Sets ToLocationID
        /// </summary>
        [DataMember(Name="toLocationID", EmitDefaultValue=false)]
        public long? ToLocationID { get; set; }

        /// <summary>
        /// Gets or Sets TransferByResourceID
        /// </summary>
        [DataMember(Name="transferByResourceID", EmitDefaultValue=false)]
        public int? TransferByResourceID { get; set; }

        /// <summary>
        /// Gets or Sets TransferDate
        /// </summary>
        [DataMember(Name="transferDate", EmitDefaultValue=false)]
        public DateTime? TransferDate { get; set; }

        /// <summary>
        /// Gets or Sets UpdateNote
        /// </summary>
        [DataMember(Name="updateNote", EmitDefaultValue=false)]
        public string UpdateNote { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields", EmitDefaultValue=false)]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InventoryTransferModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FromLocationID: ").Append(FromLocationID).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  ProductID: ").Append(ProductID).Append("\n");
            sb.Append("  QuantityTransferred: ").Append(QuantityTransferred).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  ToLocationID: ").Append(ToLocationID).Append("\n");
            sb.Append("  TransferByResourceID: ").Append(TransferByResourceID).Append("\n");
            sb.Append("  TransferDate: ").Append(TransferDate).Append("\n");
            sb.Append("  UpdateNote: ").Append(UpdateNote).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InventoryTransferModel);
        }

        /// <summary>
        /// Returns true if InventoryTransferModel instances are equal
        /// </summary>
        /// <param name="input">Instance of InventoryTransferModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InventoryTransferModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.FromLocationID == input.FromLocationID ||
                    (this.FromLocationID != null &&
                    this.FromLocationID.Equals(input.FromLocationID))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.ProductID == input.ProductID ||
                    (this.ProductID != null &&
                    this.ProductID.Equals(input.ProductID))
                ) && 
                (
                    this.QuantityTransferred == input.QuantityTransferred ||
                    (this.QuantityTransferred != null &&
                    this.QuantityTransferred.Equals(input.QuantityTransferred))
                ) && 
                (
                    this.SerialNumber == input.SerialNumber ||
                    (this.SerialNumber != null &&
                    this.SerialNumber.Equals(input.SerialNumber))
                ) && 
                (
                    this.ToLocationID == input.ToLocationID ||
                    (this.ToLocationID != null &&
                    this.ToLocationID.Equals(input.ToLocationID))
                ) && 
                (
                    this.TransferByResourceID == input.TransferByResourceID ||
                    (this.TransferByResourceID != null &&
                    this.TransferByResourceID.Equals(input.TransferByResourceID))
                ) && 
                (
                    this.TransferDate == input.TransferDate ||
                    (this.TransferDate != null &&
                    this.TransferDate.Equals(input.TransferDate))
                ) && 
                (
                    this.UpdateNote == input.UpdateNote ||
                    (this.UpdateNote != null &&
                    this.UpdateNote.Equals(input.UpdateNote))
                ) && 
                (
                    this.UserDefinedFields == input.UserDefinedFields ||
                    this.UserDefinedFields != null &&
                    this.UserDefinedFields.SequenceEqual(input.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.FromLocationID != null)
                    hashCode = hashCode * 59 + this.FromLocationID.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.ProductID != null)
                    hashCode = hashCode * 59 + this.ProductID.GetHashCode();
                if (this.QuantityTransferred != null)
                    hashCode = hashCode * 59 + this.QuantityTransferred.GetHashCode();
                if (this.SerialNumber != null)
                    hashCode = hashCode * 59 + this.SerialNumber.GetHashCode();
                if (this.ToLocationID != null)
                    hashCode = hashCode * 59 + this.ToLocationID.GetHashCode();
                if (this.TransferByResourceID != null)
                    hashCode = hashCode * 59 + this.TransferByResourceID.GetHashCode();
                if (this.TransferDate != null)
                    hashCode = hashCode * 59 + this.TransferDate.GetHashCode();
                if (this.UpdateNote != null)
                    hashCode = hashCode * 59 + this.UpdateNote.GetHashCode();
                if (this.UserDefinedFields != null)
                    hashCode = hashCode * 59 + this.UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
