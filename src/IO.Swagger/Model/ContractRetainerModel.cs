/* 
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ContractRetainerModel
    /// </summary>
    [DataContract]
    public partial class ContractRetainerModel :  IEquatable<ContractRetainerModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContractRetainerModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="amount">amount.</param>
        /// <param name="amountApproved">amountApproved.</param>
        /// <param name="contractID">contractID.</param>
        /// <param name="datePurchased">datePurchased.</param>
        /// <param name="endDate">endDate.</param>
        /// <param name="internalCurrencyAmount">internalCurrencyAmount.</param>
        /// <param name="internalCurrencyAmountApproved">internalCurrencyAmountApproved.</param>
        /// <param name="invoiceNumber">invoiceNumber.</param>
        /// <param name="isPaid">isPaid.</param>
        /// <param name="paymentID">paymentID.</param>
        /// <param name="paymentNumber">paymentNumber.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="status">status.</param>
        /// <param name="userDefinedFields">userDefinedFields.</param>
        public ContractRetainerModel(long? id = default(long?), double? amount = default(double?), double? amountApproved = default(double?), int? contractID = default(int?), DateTime? datePurchased = default(DateTime?), DateTime? endDate = default(DateTime?), double? internalCurrencyAmount = default(double?), double? internalCurrencyAmountApproved = default(double?), string invoiceNumber = default(string), bool? isPaid = default(bool?), int? paymentID = default(int?), string paymentNumber = default(string), DateTime? startDate = default(DateTime?), int? status = default(int?), List<UserDefinedField> userDefinedFields = default(List<UserDefinedField>))
        {
            this.Id = id;
            this.Amount = amount;
            this.AmountApproved = amountApproved;
            this.ContractID = contractID;
            this.DatePurchased = datePurchased;
            this.EndDate = endDate;
            this.InternalCurrencyAmount = internalCurrencyAmount;
            this.InternalCurrencyAmountApproved = internalCurrencyAmountApproved;
            this.InvoiceNumber = invoiceNumber;
            this.IsPaid = isPaid;
            this.PaymentID = paymentID;
            this.PaymentNumber = paymentNumber;
            this.StartDate = startDate;
            this.Status = status;
            this.UserDefinedFields = userDefinedFields;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public double? Amount { get; set; }

        /// <summary>
        /// Gets or Sets AmountApproved
        /// </summary>
        [DataMember(Name="amountApproved", EmitDefaultValue=false)]
        public double? AmountApproved { get; set; }

        /// <summary>
        /// Gets or Sets ContractID
        /// </summary>
        [DataMember(Name="contractID", EmitDefaultValue=false)]
        public int? ContractID { get; set; }

        /// <summary>
        /// Gets or Sets DatePurchased
        /// </summary>
        [DataMember(Name="datePurchased", EmitDefaultValue=false)]
        public DateTime? DatePurchased { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets or Sets InternalCurrencyAmount
        /// </summary>
        [DataMember(Name="internalCurrencyAmount", EmitDefaultValue=false)]
        public double? InternalCurrencyAmount { get; set; }

        /// <summary>
        /// Gets or Sets InternalCurrencyAmountApproved
        /// </summary>
        [DataMember(Name="internalCurrencyAmountApproved", EmitDefaultValue=false)]
        public double? InternalCurrencyAmountApproved { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceNumber
        /// </summary>
        [DataMember(Name="invoiceNumber", EmitDefaultValue=false)]
        public string InvoiceNumber { get; set; }

        /// <summary>
        /// Gets or Sets IsPaid
        /// </summary>
        [DataMember(Name="isPaid", EmitDefaultValue=false)]
        public bool? IsPaid { get; set; }

        /// <summary>
        /// Gets or Sets PaymentID
        /// </summary>
        [DataMember(Name="paymentID", EmitDefaultValue=false)]
        public int? PaymentID { get; set; }

        /// <summary>
        /// Gets or Sets PaymentNumber
        /// </summary>
        [DataMember(Name="paymentNumber", EmitDefaultValue=false)]
        public string PaymentNumber { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public int? Status { get; set; }

        /// <summary>
        /// Gets or Sets SoapParentPropertyId
        /// </summary>
        [DataMember(Name="soapParentPropertyId", EmitDefaultValue=false)]
        public ExpressionFuncContractRetainerInt64 SoapParentPropertyId { get; private set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields", EmitDefaultValue=false)]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContractRetainerModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  AmountApproved: ").Append(AmountApproved).Append("\n");
            sb.Append("  ContractID: ").Append(ContractID).Append("\n");
            sb.Append("  DatePurchased: ").Append(DatePurchased).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  InternalCurrencyAmount: ").Append(InternalCurrencyAmount).Append("\n");
            sb.Append("  InternalCurrencyAmountApproved: ").Append(InternalCurrencyAmountApproved).Append("\n");
            sb.Append("  InvoiceNumber: ").Append(InvoiceNumber).Append("\n");
            sb.Append("  IsPaid: ").Append(IsPaid).Append("\n");
            sb.Append("  PaymentID: ").Append(PaymentID).Append("\n");
            sb.Append("  PaymentNumber: ").Append(PaymentNumber).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SoapParentPropertyId: ").Append(SoapParentPropertyId).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContractRetainerModel);
        }

        /// <summary>
        /// Returns true if ContractRetainerModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ContractRetainerModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContractRetainerModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.AmountApproved == input.AmountApproved ||
                    (this.AmountApproved != null &&
                    this.AmountApproved.Equals(input.AmountApproved))
                ) && 
                (
                    this.ContractID == input.ContractID ||
                    (this.ContractID != null &&
                    this.ContractID.Equals(input.ContractID))
                ) && 
                (
                    this.DatePurchased == input.DatePurchased ||
                    (this.DatePurchased != null &&
                    this.DatePurchased.Equals(input.DatePurchased))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.InternalCurrencyAmount == input.InternalCurrencyAmount ||
                    (this.InternalCurrencyAmount != null &&
                    this.InternalCurrencyAmount.Equals(input.InternalCurrencyAmount))
                ) && 
                (
                    this.InternalCurrencyAmountApproved == input.InternalCurrencyAmountApproved ||
                    (this.InternalCurrencyAmountApproved != null &&
                    this.InternalCurrencyAmountApproved.Equals(input.InternalCurrencyAmountApproved))
                ) && 
                (
                    this.InvoiceNumber == input.InvoiceNumber ||
                    (this.InvoiceNumber != null &&
                    this.InvoiceNumber.Equals(input.InvoiceNumber))
                ) && 
                (
                    this.IsPaid == input.IsPaid ||
                    (this.IsPaid != null &&
                    this.IsPaid.Equals(input.IsPaid))
                ) && 
                (
                    this.PaymentID == input.PaymentID ||
                    (this.PaymentID != null &&
                    this.PaymentID.Equals(input.PaymentID))
                ) && 
                (
                    this.PaymentNumber == input.PaymentNumber ||
                    (this.PaymentNumber != null &&
                    this.PaymentNumber.Equals(input.PaymentNumber))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.SoapParentPropertyId == input.SoapParentPropertyId ||
                    (this.SoapParentPropertyId != null &&
                    this.SoapParentPropertyId.Equals(input.SoapParentPropertyId))
                ) && 
                (
                    this.UserDefinedFields == input.UserDefinedFields ||
                    this.UserDefinedFields != null &&
                    this.UserDefinedFields.SequenceEqual(input.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.AmountApproved != null)
                    hashCode = hashCode * 59 + this.AmountApproved.GetHashCode();
                if (this.ContractID != null)
                    hashCode = hashCode * 59 + this.ContractID.GetHashCode();
                if (this.DatePurchased != null)
                    hashCode = hashCode * 59 + this.DatePurchased.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.InternalCurrencyAmount != null)
                    hashCode = hashCode * 59 + this.InternalCurrencyAmount.GetHashCode();
                if (this.InternalCurrencyAmountApproved != null)
                    hashCode = hashCode * 59 + this.InternalCurrencyAmountApproved.GetHashCode();
                if (this.InvoiceNumber != null)
                    hashCode = hashCode * 59 + this.InvoiceNumber.GetHashCode();
                if (this.IsPaid != null)
                    hashCode = hashCode * 59 + this.IsPaid.GetHashCode();
                if (this.PaymentID != null)
                    hashCode = hashCode * 59 + this.PaymentID.GetHashCode();
                if (this.PaymentNumber != null)
                    hashCode = hashCode * 59 + this.PaymentNumber.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.SoapParentPropertyId != null)
                    hashCode = hashCode * 59 + this.SoapParentPropertyId.GetHashCode();
                if (this.UserDefinedFields != null)
                    hashCode = hashCode * 59 + this.UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
