/* 
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// HolidaySetModel
    /// </summary>
    [DataContract]
    public partial class HolidaySetModel :  IEquatable<HolidaySetModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HolidaySetModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="holidaySetDescription">holidaySetDescription.</param>
        /// <param name="holidaySetName">holidaySetName.</param>
        /// <param name="userDefinedFields">userDefinedFields.</param>
        public HolidaySetModel(long? id = default(long?), string holidaySetDescription = default(string), string holidaySetName = default(string), List<UserDefinedField> userDefinedFields = default(List<UserDefinedField>))
        {
            this.Id = id;
            this.HolidaySetDescription = holidaySetDescription;
            this.HolidaySetName = holidaySetName;
            this.UserDefinedFields = userDefinedFields;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets HolidaySetDescription
        /// </summary>
        [DataMember(Name="holidaySetDescription", EmitDefaultValue=false)]
        public string HolidaySetDescription { get; set; }

        /// <summary>
        /// Gets or Sets HolidaySetName
        /// </summary>
        [DataMember(Name="holidaySetName", EmitDefaultValue=false)]
        public string HolidaySetName { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields", EmitDefaultValue=false)]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HolidaySetModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  HolidaySetDescription: ").Append(HolidaySetDescription).Append("\n");
            sb.Append("  HolidaySetName: ").Append(HolidaySetName).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HolidaySetModel);
        }

        /// <summary>
        /// Returns true if HolidaySetModel instances are equal
        /// </summary>
        /// <param name="input">Instance of HolidaySetModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HolidaySetModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.HolidaySetDescription == input.HolidaySetDescription ||
                    (this.HolidaySetDescription != null &&
                    this.HolidaySetDescription.Equals(input.HolidaySetDescription))
                ) && 
                (
                    this.HolidaySetName == input.HolidaySetName ||
                    (this.HolidaySetName != null &&
                    this.HolidaySetName.Equals(input.HolidaySetName))
                ) && 
                (
                    this.UserDefinedFields == input.UserDefinedFields ||
                    this.UserDefinedFields != null &&
                    this.UserDefinedFields.SequenceEqual(input.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.HolidaySetDescription != null)
                    hashCode = hashCode * 59 + this.HolidaySetDescription.GetHashCode();
                if (this.HolidaySetName != null)
                    hashCode = hashCode * 59 + this.HolidaySetName.GetHashCode();
                if (this.UserDefinedFields != null)
                    hashCode = hashCode * 59 + this.UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
