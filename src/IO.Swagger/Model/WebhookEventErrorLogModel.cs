/* 
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// WebhookEventErrorLogModel
    /// </summary>
    [DataContract]
    public partial class WebhookEventErrorLogModel :  IEquatable<WebhookEventErrorLogModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookEventErrorLogModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="accountWebhookID">accountWebhookID.</param>
        /// <param name="contactWebhookID">contactWebhookID.</param>
        /// <param name="createDateTime">createDateTime.</param>
        /// <param name="errorMessage">errorMessage.</param>
        /// <param name="payload">payload.</param>
        /// <param name="sequenceNumber">sequenceNumber.</param>
        /// <param name="userDefinedFields">userDefinedFields.</param>
        public WebhookEventErrorLogModel(long? id = default(long?), int? accountWebhookID = default(int?), int? contactWebhookID = default(int?), DateTime? createDateTime = default(DateTime?), string errorMessage = default(string), string payload = default(string), int? sequenceNumber = default(int?), List<UserDefinedField> userDefinedFields = default(List<UserDefinedField>))
        {
            this.Id = id;
            this.AccountWebhookID = accountWebhookID;
            this.ContactWebhookID = contactWebhookID;
            this.CreateDateTime = createDateTime;
            this.ErrorMessage = errorMessage;
            this.Payload = payload;
            this.SequenceNumber = sequenceNumber;
            this.UserDefinedFields = userDefinedFields;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets AccountWebhookID
        /// </summary>
        [DataMember(Name="accountWebhookID", EmitDefaultValue=false)]
        public int? AccountWebhookID { get; set; }

        /// <summary>
        /// Gets or Sets ContactWebhookID
        /// </summary>
        [DataMember(Name="contactWebhookID", EmitDefaultValue=false)]
        public int? ContactWebhookID { get; set; }

        /// <summary>
        /// Gets or Sets CreateDateTime
        /// </summary>
        [DataMember(Name="createDateTime", EmitDefaultValue=false)]
        public DateTime? CreateDateTime { get; set; }

        /// <summary>
        /// Gets or Sets ErrorMessage
        /// </summary>
        [DataMember(Name="errorMessage", EmitDefaultValue=false)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Gets or Sets Payload
        /// </summary>
        [DataMember(Name="payload", EmitDefaultValue=false)]
        public string Payload { get; set; }

        /// <summary>
        /// Gets or Sets SequenceNumber
        /// </summary>
        [DataMember(Name="sequenceNumber", EmitDefaultValue=false)]
        public int? SequenceNumber { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields", EmitDefaultValue=false)]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebhookEventErrorLogModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AccountWebhookID: ").Append(AccountWebhookID).Append("\n");
            sb.Append("  ContactWebhookID: ").Append(ContactWebhookID).Append("\n");
            sb.Append("  CreateDateTime: ").Append(CreateDateTime).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("  SequenceNumber: ").Append(SequenceNumber).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WebhookEventErrorLogModel);
        }

        /// <summary>
        /// Returns true if WebhookEventErrorLogModel instances are equal
        /// </summary>
        /// <param name="input">Instance of WebhookEventErrorLogModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebhookEventErrorLogModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.AccountWebhookID == input.AccountWebhookID ||
                    (this.AccountWebhookID != null &&
                    this.AccountWebhookID.Equals(input.AccountWebhookID))
                ) && 
                (
                    this.ContactWebhookID == input.ContactWebhookID ||
                    (this.ContactWebhookID != null &&
                    this.ContactWebhookID.Equals(input.ContactWebhookID))
                ) && 
                (
                    this.CreateDateTime == input.CreateDateTime ||
                    (this.CreateDateTime != null &&
                    this.CreateDateTime.Equals(input.CreateDateTime))
                ) && 
                (
                    this.ErrorMessage == input.ErrorMessage ||
                    (this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(input.ErrorMessage))
                ) && 
                (
                    this.Payload == input.Payload ||
                    (this.Payload != null &&
                    this.Payload.Equals(input.Payload))
                ) && 
                (
                    this.SequenceNumber == input.SequenceNumber ||
                    (this.SequenceNumber != null &&
                    this.SequenceNumber.Equals(input.SequenceNumber))
                ) && 
                (
                    this.UserDefinedFields == input.UserDefinedFields ||
                    this.UserDefinedFields != null &&
                    this.UserDefinedFields.SequenceEqual(input.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.AccountWebhookID != null)
                    hashCode = hashCode * 59 + this.AccountWebhookID.GetHashCode();
                if (this.ContactWebhookID != null)
                    hashCode = hashCode * 59 + this.ContactWebhookID.GetHashCode();
                if (this.CreateDateTime != null)
                    hashCode = hashCode * 59 + this.CreateDateTime.GetHashCode();
                if (this.ErrorMessage != null)
                    hashCode = hashCode * 59 + this.ErrorMessage.GetHashCode();
                if (this.Payload != null)
                    hashCode = hashCode * 59 + this.Payload.GetHashCode();
                if (this.SequenceNumber != null)
                    hashCode = hashCode * 59 + this.SequenceNumber.GetHashCode();
                if (this.UserDefinedFields != null)
                    hashCode = hashCode * 59 + this.UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
