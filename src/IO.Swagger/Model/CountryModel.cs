/* 
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CountryModel
    /// </summary>
    [DataContract]
    public partial class CountryModel :  IEquatable<CountryModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CountryModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="addressFormatID">addressFormatID.</param>
        /// <param name="countryCode">countryCode.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="invoiceTemplateID">invoiceTemplateID.</param>
        /// <param name="isActive">isActive.</param>
        /// <param name="isDefaultCountry">isDefaultCountry.</param>
        /// <param name="name">name.</param>
        /// <param name="purchaseOrderTemplateID">purchaseOrderTemplateID.</param>
        /// <param name="quoteTemplateID">quoteTemplateID.</param>
        /// <param name="userDefinedFields">userDefinedFields.</param>
        public CountryModel(long? id = default(long?), long? addressFormatID = default(long?), string countryCode = default(string), string displayName = default(string), int? invoiceTemplateID = default(int?), bool? isActive = default(bool?), bool? isDefaultCountry = default(bool?), string name = default(string), int? purchaseOrderTemplateID = default(int?), int? quoteTemplateID = default(int?), List<UserDefinedField> userDefinedFields = default(List<UserDefinedField>))
        {
            this.Id = id;
            this.AddressFormatID = addressFormatID;
            this.CountryCode = countryCode;
            this.DisplayName = displayName;
            this.InvoiceTemplateID = invoiceTemplateID;
            this.IsActive = isActive;
            this.IsDefaultCountry = isDefaultCountry;
            this.Name = name;
            this.PurchaseOrderTemplateID = purchaseOrderTemplateID;
            this.QuoteTemplateID = quoteTemplateID;
            this.UserDefinedFields = userDefinedFields;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets AddressFormatID
        /// </summary>
        [DataMember(Name="addressFormatID", EmitDefaultValue=false)]
        public long? AddressFormatID { get; set; }

        /// <summary>
        /// Gets or Sets CountryCode
        /// </summary>
        [DataMember(Name="countryCode", EmitDefaultValue=false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceTemplateID
        /// </summary>
        [DataMember(Name="invoiceTemplateID", EmitDefaultValue=false)]
        public int? InvoiceTemplateID { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="isActive", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets IsDefaultCountry
        /// </summary>
        [DataMember(Name="isDefaultCountry", EmitDefaultValue=false)]
        public bool? IsDefaultCountry { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseOrderTemplateID
        /// </summary>
        [DataMember(Name="purchaseOrderTemplateID", EmitDefaultValue=false)]
        public int? PurchaseOrderTemplateID { get; set; }

        /// <summary>
        /// Gets or Sets QuoteTemplateID
        /// </summary>
        [DataMember(Name="quoteTemplateID", EmitDefaultValue=false)]
        public int? QuoteTemplateID { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields", EmitDefaultValue=false)]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CountryModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AddressFormatID: ").Append(AddressFormatID).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  InvoiceTemplateID: ").Append(InvoiceTemplateID).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsDefaultCountry: ").Append(IsDefaultCountry).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PurchaseOrderTemplateID: ").Append(PurchaseOrderTemplateID).Append("\n");
            sb.Append("  QuoteTemplateID: ").Append(QuoteTemplateID).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CountryModel);
        }

        /// <summary>
        /// Returns true if CountryModel instances are equal
        /// </summary>
        /// <param name="input">Instance of CountryModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CountryModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.AddressFormatID == input.AddressFormatID ||
                    (this.AddressFormatID != null &&
                    this.AddressFormatID.Equals(input.AddressFormatID))
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.InvoiceTemplateID == input.InvoiceTemplateID ||
                    (this.InvoiceTemplateID != null &&
                    this.InvoiceTemplateID.Equals(input.InvoiceTemplateID))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.IsDefaultCountry == input.IsDefaultCountry ||
                    (this.IsDefaultCountry != null &&
                    this.IsDefaultCountry.Equals(input.IsDefaultCountry))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PurchaseOrderTemplateID == input.PurchaseOrderTemplateID ||
                    (this.PurchaseOrderTemplateID != null &&
                    this.PurchaseOrderTemplateID.Equals(input.PurchaseOrderTemplateID))
                ) && 
                (
                    this.QuoteTemplateID == input.QuoteTemplateID ||
                    (this.QuoteTemplateID != null &&
                    this.QuoteTemplateID.Equals(input.QuoteTemplateID))
                ) && 
                (
                    this.UserDefinedFields == input.UserDefinedFields ||
                    this.UserDefinedFields != null &&
                    this.UserDefinedFields.SequenceEqual(input.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.AddressFormatID != null)
                    hashCode = hashCode * 59 + this.AddressFormatID.GetHashCode();
                if (this.CountryCode != null)
                    hashCode = hashCode * 59 + this.CountryCode.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.InvoiceTemplateID != null)
                    hashCode = hashCode * 59 + this.InvoiceTemplateID.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.IsDefaultCountry != null)
                    hashCode = hashCode * 59 + this.IsDefaultCountry.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.PurchaseOrderTemplateID != null)
                    hashCode = hashCode * 59 + this.PurchaseOrderTemplateID.GetHashCode();
                if (this.QuoteTemplateID != null)
                    hashCode = hashCode * 59 + this.QuoteTemplateID.GetHashCode();
                if (this.UserDefinedFields != null)
                    hashCode = hashCode * 59 + this.UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
