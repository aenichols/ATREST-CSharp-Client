/* 
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// QuoteItemModel
    /// </summary>
    [DataContract]
    public partial class QuoteItemModel :  IEquatable<QuoteItemModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QuoteItemModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="averageCost">averageCost.</param>
        /// <param name="chargeID">chargeID.</param>
        /// <param name="description">description.</param>
        /// <param name="expenseID">expenseID.</param>
        /// <param name="highestCost">highestCost.</param>
        /// <param name="internalCurrencyLineDiscount">internalCurrencyLineDiscount.</param>
        /// <param name="internalCurrencyUnitDiscount">internalCurrencyUnitDiscount.</param>
        /// <param name="internalCurrencyUnitPrice">internalCurrencyUnitPrice.</param>
        /// <param name="isOptional">isOptional.</param>
        /// <param name="isTaxable">isTaxable.</param>
        /// <param name="laborID">laborID.</param>
        /// <param name="lineDiscount">lineDiscount.</param>
        /// <param name="markupRate">markupRate.</param>
        /// <param name="name">name.</param>
        /// <param name="percentageDiscount">percentageDiscount.</param>
        /// <param name="periodType">periodType.</param>
        /// <param name="productID">productID.</param>
        /// <param name="quantity">quantity.</param>
        /// <param name="quoteID">quoteID.</param>
        /// <param name="quoteItemType">quoteItemType.</param>
        /// <param name="serviceBundleID">serviceBundleID.</param>
        /// <param name="serviceID">serviceID.</param>
        /// <param name="shippingID">shippingID.</param>
        /// <param name="sortOrderID">sortOrderID.</param>
        /// <param name="taxCategoryID">taxCategoryID.</param>
        /// <param name="totalEffectiveTax">totalEffectiveTax.</param>
        /// <param name="unitCost">unitCost.</param>
        /// <param name="unitDiscount">unitDiscount.</param>
        /// <param name="unitPrice">unitPrice.</param>
        /// <param name="userDefinedFields">userDefinedFields.</param>
        public QuoteItemModel(long? id = default(long?), double? averageCost = default(double?), int? chargeID = default(int?), string description = default(string), int? expenseID = default(int?), double? highestCost = default(double?), double? internalCurrencyLineDiscount = default(double?), double? internalCurrencyUnitDiscount = default(double?), double? internalCurrencyUnitPrice = default(double?), bool? isOptional = default(bool?), bool? isTaxable = default(bool?), int? laborID = default(int?), double? lineDiscount = default(double?), double? markupRate = default(double?), string name = default(string), double? percentageDiscount = default(double?), int? periodType = default(int?), int? productID = default(int?), double? quantity = default(double?), int? quoteID = default(int?), int? quoteItemType = default(int?), int? serviceBundleID = default(int?), int? serviceID = default(int?), int? shippingID = default(int?), int? sortOrderID = default(int?), int? taxCategoryID = default(int?), double? totalEffectiveTax = default(double?), double? unitCost = default(double?), double? unitDiscount = default(double?), double? unitPrice = default(double?), List<UserDefinedField> userDefinedFields = default(List<UserDefinedField>))
        {
            this.Id = id;
            this.AverageCost = averageCost;
            this.ChargeID = chargeID;
            this.Description = description;
            this.ExpenseID = expenseID;
            this.HighestCost = highestCost;
            this.InternalCurrencyLineDiscount = internalCurrencyLineDiscount;
            this.InternalCurrencyUnitDiscount = internalCurrencyUnitDiscount;
            this.InternalCurrencyUnitPrice = internalCurrencyUnitPrice;
            this.IsOptional = isOptional;
            this.IsTaxable = isTaxable;
            this.LaborID = laborID;
            this.LineDiscount = lineDiscount;
            this.MarkupRate = markupRate;
            this.Name = name;
            this.PercentageDiscount = percentageDiscount;
            this.PeriodType = periodType;
            this.ProductID = productID;
            this.Quantity = quantity;
            this.QuoteID = quoteID;
            this.QuoteItemType = quoteItemType;
            this.ServiceBundleID = serviceBundleID;
            this.ServiceID = serviceID;
            this.ShippingID = shippingID;
            this.SortOrderID = sortOrderID;
            this.TaxCategoryID = taxCategoryID;
            this.TotalEffectiveTax = totalEffectiveTax;
            this.UnitCost = unitCost;
            this.UnitDiscount = unitDiscount;
            this.UnitPrice = unitPrice;
            this.UserDefinedFields = userDefinedFields;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets AverageCost
        /// </summary>
        [DataMember(Name="averageCost", EmitDefaultValue=false)]
        public double? AverageCost { get; set; }

        /// <summary>
        /// Gets or Sets ChargeID
        /// </summary>
        [DataMember(Name="chargeID", EmitDefaultValue=false)]
        public int? ChargeID { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ExpenseID
        /// </summary>
        [DataMember(Name="expenseID", EmitDefaultValue=false)]
        public int? ExpenseID { get; set; }

        /// <summary>
        /// Gets or Sets HighestCost
        /// </summary>
        [DataMember(Name="highestCost", EmitDefaultValue=false)]
        public double? HighestCost { get; set; }

        /// <summary>
        /// Gets or Sets InternalCurrencyLineDiscount
        /// </summary>
        [DataMember(Name="internalCurrencyLineDiscount", EmitDefaultValue=false)]
        public double? InternalCurrencyLineDiscount { get; set; }

        /// <summary>
        /// Gets or Sets InternalCurrencyUnitDiscount
        /// </summary>
        [DataMember(Name="internalCurrencyUnitDiscount", EmitDefaultValue=false)]
        public double? InternalCurrencyUnitDiscount { get; set; }

        /// <summary>
        /// Gets or Sets InternalCurrencyUnitPrice
        /// </summary>
        [DataMember(Name="internalCurrencyUnitPrice", EmitDefaultValue=false)]
        public double? InternalCurrencyUnitPrice { get; set; }

        /// <summary>
        /// Gets or Sets IsOptional
        /// </summary>
        [DataMember(Name="isOptional", EmitDefaultValue=false)]
        public bool? IsOptional { get; set; }

        /// <summary>
        /// Gets or Sets IsTaxable
        /// </summary>
        [DataMember(Name="isTaxable", EmitDefaultValue=false)]
        public bool? IsTaxable { get; set; }

        /// <summary>
        /// Gets or Sets LaborID
        /// </summary>
        [DataMember(Name="laborID", EmitDefaultValue=false)]
        public int? LaborID { get; set; }

        /// <summary>
        /// Gets or Sets LineDiscount
        /// </summary>
        [DataMember(Name="lineDiscount", EmitDefaultValue=false)]
        public double? LineDiscount { get; set; }

        /// <summary>
        /// Gets or Sets MarkupRate
        /// </summary>
        [DataMember(Name="markupRate", EmitDefaultValue=false)]
        public double? MarkupRate { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets PercentageDiscount
        /// </summary>
        [DataMember(Name="percentageDiscount", EmitDefaultValue=false)]
        public double? PercentageDiscount { get; set; }

        /// <summary>
        /// Gets or Sets PeriodType
        /// </summary>
        [DataMember(Name="periodType", EmitDefaultValue=false)]
        public int? PeriodType { get; set; }

        /// <summary>
        /// Gets or Sets ProductID
        /// </summary>
        [DataMember(Name="productID", EmitDefaultValue=false)]
        public int? ProductID { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public double? Quantity { get; set; }

        /// <summary>
        /// Gets or Sets QuoteID
        /// </summary>
        [DataMember(Name="quoteID", EmitDefaultValue=false)]
        public int? QuoteID { get; set; }

        /// <summary>
        /// Gets or Sets QuoteItemType
        /// </summary>
        [DataMember(Name="quoteItemType", EmitDefaultValue=false)]
        public int? QuoteItemType { get; set; }

        /// <summary>
        /// Gets or Sets ServiceBundleID
        /// </summary>
        [DataMember(Name="serviceBundleID", EmitDefaultValue=false)]
        public int? ServiceBundleID { get; set; }

        /// <summary>
        /// Gets or Sets ServiceID
        /// </summary>
        [DataMember(Name="serviceID", EmitDefaultValue=false)]
        public int? ServiceID { get; set; }

        /// <summary>
        /// Gets or Sets ShippingID
        /// </summary>
        [DataMember(Name="shippingID", EmitDefaultValue=false)]
        public int? ShippingID { get; set; }

        /// <summary>
        /// Gets or Sets SortOrderID
        /// </summary>
        [DataMember(Name="sortOrderID", EmitDefaultValue=false)]
        public int? SortOrderID { get; set; }

        /// <summary>
        /// Gets or Sets TaxCategoryID
        /// </summary>
        [DataMember(Name="taxCategoryID", EmitDefaultValue=false)]
        public int? TaxCategoryID { get; set; }

        /// <summary>
        /// Gets or Sets TotalEffectiveTax
        /// </summary>
        [DataMember(Name="totalEffectiveTax", EmitDefaultValue=false)]
        public double? TotalEffectiveTax { get; set; }

        /// <summary>
        /// Gets or Sets UnitCost
        /// </summary>
        [DataMember(Name="unitCost", EmitDefaultValue=false)]
        public double? UnitCost { get; set; }

        /// <summary>
        /// Gets or Sets UnitDiscount
        /// </summary>
        [DataMember(Name="unitDiscount", EmitDefaultValue=false)]
        public double? UnitDiscount { get; set; }

        /// <summary>
        /// Gets or Sets UnitPrice
        /// </summary>
        [DataMember(Name="unitPrice", EmitDefaultValue=false)]
        public double? UnitPrice { get; set; }

        /// <summary>
        /// Gets or Sets SoapParentPropertyId
        /// </summary>
        [DataMember(Name="soapParentPropertyId", EmitDefaultValue=false)]
        public ExpressionFuncQuoteItemInt64 SoapParentPropertyId { get; private set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields", EmitDefaultValue=false)]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QuoteItemModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AverageCost: ").Append(AverageCost).Append("\n");
            sb.Append("  ChargeID: ").Append(ChargeID).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExpenseID: ").Append(ExpenseID).Append("\n");
            sb.Append("  HighestCost: ").Append(HighestCost).Append("\n");
            sb.Append("  InternalCurrencyLineDiscount: ").Append(InternalCurrencyLineDiscount).Append("\n");
            sb.Append("  InternalCurrencyUnitDiscount: ").Append(InternalCurrencyUnitDiscount).Append("\n");
            sb.Append("  InternalCurrencyUnitPrice: ").Append(InternalCurrencyUnitPrice).Append("\n");
            sb.Append("  IsOptional: ").Append(IsOptional).Append("\n");
            sb.Append("  IsTaxable: ").Append(IsTaxable).Append("\n");
            sb.Append("  LaborID: ").Append(LaborID).Append("\n");
            sb.Append("  LineDiscount: ").Append(LineDiscount).Append("\n");
            sb.Append("  MarkupRate: ").Append(MarkupRate).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PercentageDiscount: ").Append(PercentageDiscount).Append("\n");
            sb.Append("  PeriodType: ").Append(PeriodType).Append("\n");
            sb.Append("  ProductID: ").Append(ProductID).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  QuoteID: ").Append(QuoteID).Append("\n");
            sb.Append("  QuoteItemType: ").Append(QuoteItemType).Append("\n");
            sb.Append("  ServiceBundleID: ").Append(ServiceBundleID).Append("\n");
            sb.Append("  ServiceID: ").Append(ServiceID).Append("\n");
            sb.Append("  ShippingID: ").Append(ShippingID).Append("\n");
            sb.Append("  SortOrderID: ").Append(SortOrderID).Append("\n");
            sb.Append("  TaxCategoryID: ").Append(TaxCategoryID).Append("\n");
            sb.Append("  TotalEffectiveTax: ").Append(TotalEffectiveTax).Append("\n");
            sb.Append("  UnitCost: ").Append(UnitCost).Append("\n");
            sb.Append("  UnitDiscount: ").Append(UnitDiscount).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  SoapParentPropertyId: ").Append(SoapParentPropertyId).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QuoteItemModel);
        }

        /// <summary>
        /// Returns true if QuoteItemModel instances are equal
        /// </summary>
        /// <param name="input">Instance of QuoteItemModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuoteItemModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.AverageCost == input.AverageCost ||
                    (this.AverageCost != null &&
                    this.AverageCost.Equals(input.AverageCost))
                ) && 
                (
                    this.ChargeID == input.ChargeID ||
                    (this.ChargeID != null &&
                    this.ChargeID.Equals(input.ChargeID))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ExpenseID == input.ExpenseID ||
                    (this.ExpenseID != null &&
                    this.ExpenseID.Equals(input.ExpenseID))
                ) && 
                (
                    this.HighestCost == input.HighestCost ||
                    (this.HighestCost != null &&
                    this.HighestCost.Equals(input.HighestCost))
                ) && 
                (
                    this.InternalCurrencyLineDiscount == input.InternalCurrencyLineDiscount ||
                    (this.InternalCurrencyLineDiscount != null &&
                    this.InternalCurrencyLineDiscount.Equals(input.InternalCurrencyLineDiscount))
                ) && 
                (
                    this.InternalCurrencyUnitDiscount == input.InternalCurrencyUnitDiscount ||
                    (this.InternalCurrencyUnitDiscount != null &&
                    this.InternalCurrencyUnitDiscount.Equals(input.InternalCurrencyUnitDiscount))
                ) && 
                (
                    this.InternalCurrencyUnitPrice == input.InternalCurrencyUnitPrice ||
                    (this.InternalCurrencyUnitPrice != null &&
                    this.InternalCurrencyUnitPrice.Equals(input.InternalCurrencyUnitPrice))
                ) && 
                (
                    this.IsOptional == input.IsOptional ||
                    (this.IsOptional != null &&
                    this.IsOptional.Equals(input.IsOptional))
                ) && 
                (
                    this.IsTaxable == input.IsTaxable ||
                    (this.IsTaxable != null &&
                    this.IsTaxable.Equals(input.IsTaxable))
                ) && 
                (
                    this.LaborID == input.LaborID ||
                    (this.LaborID != null &&
                    this.LaborID.Equals(input.LaborID))
                ) && 
                (
                    this.LineDiscount == input.LineDiscount ||
                    (this.LineDiscount != null &&
                    this.LineDiscount.Equals(input.LineDiscount))
                ) && 
                (
                    this.MarkupRate == input.MarkupRate ||
                    (this.MarkupRate != null &&
                    this.MarkupRate.Equals(input.MarkupRate))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PercentageDiscount == input.PercentageDiscount ||
                    (this.PercentageDiscount != null &&
                    this.PercentageDiscount.Equals(input.PercentageDiscount))
                ) && 
                (
                    this.PeriodType == input.PeriodType ||
                    (this.PeriodType != null &&
                    this.PeriodType.Equals(input.PeriodType))
                ) && 
                (
                    this.ProductID == input.ProductID ||
                    (this.ProductID != null &&
                    this.ProductID.Equals(input.ProductID))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.QuoteID == input.QuoteID ||
                    (this.QuoteID != null &&
                    this.QuoteID.Equals(input.QuoteID))
                ) && 
                (
                    this.QuoteItemType == input.QuoteItemType ||
                    (this.QuoteItemType != null &&
                    this.QuoteItemType.Equals(input.QuoteItemType))
                ) && 
                (
                    this.ServiceBundleID == input.ServiceBundleID ||
                    (this.ServiceBundleID != null &&
                    this.ServiceBundleID.Equals(input.ServiceBundleID))
                ) && 
                (
                    this.ServiceID == input.ServiceID ||
                    (this.ServiceID != null &&
                    this.ServiceID.Equals(input.ServiceID))
                ) && 
                (
                    this.ShippingID == input.ShippingID ||
                    (this.ShippingID != null &&
                    this.ShippingID.Equals(input.ShippingID))
                ) && 
                (
                    this.SortOrderID == input.SortOrderID ||
                    (this.SortOrderID != null &&
                    this.SortOrderID.Equals(input.SortOrderID))
                ) && 
                (
                    this.TaxCategoryID == input.TaxCategoryID ||
                    (this.TaxCategoryID != null &&
                    this.TaxCategoryID.Equals(input.TaxCategoryID))
                ) && 
                (
                    this.TotalEffectiveTax == input.TotalEffectiveTax ||
                    (this.TotalEffectiveTax != null &&
                    this.TotalEffectiveTax.Equals(input.TotalEffectiveTax))
                ) && 
                (
                    this.UnitCost == input.UnitCost ||
                    (this.UnitCost != null &&
                    this.UnitCost.Equals(input.UnitCost))
                ) && 
                (
                    this.UnitDiscount == input.UnitDiscount ||
                    (this.UnitDiscount != null &&
                    this.UnitDiscount.Equals(input.UnitDiscount))
                ) && 
                (
                    this.UnitPrice == input.UnitPrice ||
                    (this.UnitPrice != null &&
                    this.UnitPrice.Equals(input.UnitPrice))
                ) && 
                (
                    this.SoapParentPropertyId == input.SoapParentPropertyId ||
                    (this.SoapParentPropertyId != null &&
                    this.SoapParentPropertyId.Equals(input.SoapParentPropertyId))
                ) && 
                (
                    this.UserDefinedFields == input.UserDefinedFields ||
                    this.UserDefinedFields != null &&
                    this.UserDefinedFields.SequenceEqual(input.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.AverageCost != null)
                    hashCode = hashCode * 59 + this.AverageCost.GetHashCode();
                if (this.ChargeID != null)
                    hashCode = hashCode * 59 + this.ChargeID.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ExpenseID != null)
                    hashCode = hashCode * 59 + this.ExpenseID.GetHashCode();
                if (this.HighestCost != null)
                    hashCode = hashCode * 59 + this.HighestCost.GetHashCode();
                if (this.InternalCurrencyLineDiscount != null)
                    hashCode = hashCode * 59 + this.InternalCurrencyLineDiscount.GetHashCode();
                if (this.InternalCurrencyUnitDiscount != null)
                    hashCode = hashCode * 59 + this.InternalCurrencyUnitDiscount.GetHashCode();
                if (this.InternalCurrencyUnitPrice != null)
                    hashCode = hashCode * 59 + this.InternalCurrencyUnitPrice.GetHashCode();
                if (this.IsOptional != null)
                    hashCode = hashCode * 59 + this.IsOptional.GetHashCode();
                if (this.IsTaxable != null)
                    hashCode = hashCode * 59 + this.IsTaxable.GetHashCode();
                if (this.LaborID != null)
                    hashCode = hashCode * 59 + this.LaborID.GetHashCode();
                if (this.LineDiscount != null)
                    hashCode = hashCode * 59 + this.LineDiscount.GetHashCode();
                if (this.MarkupRate != null)
                    hashCode = hashCode * 59 + this.MarkupRate.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.PercentageDiscount != null)
                    hashCode = hashCode * 59 + this.PercentageDiscount.GetHashCode();
                if (this.PeriodType != null)
                    hashCode = hashCode * 59 + this.PeriodType.GetHashCode();
                if (this.ProductID != null)
                    hashCode = hashCode * 59 + this.ProductID.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.QuoteID != null)
                    hashCode = hashCode * 59 + this.QuoteID.GetHashCode();
                if (this.QuoteItemType != null)
                    hashCode = hashCode * 59 + this.QuoteItemType.GetHashCode();
                if (this.ServiceBundleID != null)
                    hashCode = hashCode * 59 + this.ServiceBundleID.GetHashCode();
                if (this.ServiceID != null)
                    hashCode = hashCode * 59 + this.ServiceID.GetHashCode();
                if (this.ShippingID != null)
                    hashCode = hashCode * 59 + this.ShippingID.GetHashCode();
                if (this.SortOrderID != null)
                    hashCode = hashCode * 59 + this.SortOrderID.GetHashCode();
                if (this.TaxCategoryID != null)
                    hashCode = hashCode * 59 + this.TaxCategoryID.GetHashCode();
                if (this.TotalEffectiveTax != null)
                    hashCode = hashCode * 59 + this.TotalEffectiveTax.GetHashCode();
                if (this.UnitCost != null)
                    hashCode = hashCode * 59 + this.UnitCost.GetHashCode();
                if (this.UnitDiscount != null)
                    hashCode = hashCode * 59 + this.UnitDiscount.GetHashCode();
                if (this.UnitPrice != null)
                    hashCode = hashCode * 59 + this.UnitPrice.GetHashCode();
                if (this.SoapParentPropertyId != null)
                    hashCode = hashCode * 59 + this.SoapParentPropertyId.GetHashCode();
                if (this.UserDefinedFields != null)
                    hashCode = hashCode * 59 + this.UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
