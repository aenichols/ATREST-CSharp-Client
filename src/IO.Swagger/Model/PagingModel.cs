/* 
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PagingModel
    /// </summary>
    [DataContract]
    public partial class PagingModel :  IEquatable<PagingModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PagingModel" /> class.
        /// </summary>
        /// <param name="count">count.</param>
        /// <param name="prevPageUrl">prevPageUrl.</param>
        /// <param name="nextPageUrl">nextPageUrl.</param>
        public PagingModel(int? count = default(int?), string prevPageUrl = default(string), string nextPageUrl = default(string))
        {
            this.Count = count;
            this.PrevPageUrl = prevPageUrl;
            this.NextPageUrl = nextPageUrl;
        }
        
        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public int? Count { get; set; }

        /// <summary>
        /// Gets or Sets RequestCount
        /// </summary>
        [DataMember(Name="requestCount", EmitDefaultValue=false)]
        public int? RequestCount { get; private set; }

        /// <summary>
        /// Gets or Sets PrevPageUrl
        /// </summary>
        [DataMember(Name="prevPageUrl", EmitDefaultValue=false)]
        public string PrevPageUrl { get; set; }

        /// <summary>
        /// Gets or Sets NextPageUrl
        /// </summary>
        [DataMember(Name="nextPageUrl", EmitDefaultValue=false)]
        public string NextPageUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PagingModel {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  RequestCount: ").Append(RequestCount).Append("\n");
            sb.Append("  PrevPageUrl: ").Append(PrevPageUrl).Append("\n");
            sb.Append("  NextPageUrl: ").Append(NextPageUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PagingModel);
        }

        /// <summary>
        /// Returns true if PagingModel instances are equal
        /// </summary>
        /// <param name="input">Instance of PagingModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PagingModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Count == input.Count ||
                    (this.Count != null &&
                    this.Count.Equals(input.Count))
                ) && 
                (
                    this.RequestCount == input.RequestCount ||
                    (this.RequestCount != null &&
                    this.RequestCount.Equals(input.RequestCount))
                ) && 
                (
                    this.PrevPageUrl == input.PrevPageUrl ||
                    (this.PrevPageUrl != null &&
                    this.PrevPageUrl.Equals(input.PrevPageUrl))
                ) && 
                (
                    this.NextPageUrl == input.NextPageUrl ||
                    (this.NextPageUrl != null &&
                    this.NextPageUrl.Equals(input.NextPageUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Count != null)
                    hashCode = hashCode * 59 + this.Count.GetHashCode();
                if (this.RequestCount != null)
                    hashCode = hashCode * 59 + this.RequestCount.GetHashCode();
                if (this.PrevPageUrl != null)
                    hashCode = hashCode * 59 + this.PrevPageUrl.GetHashCode();
                if (this.NextPageUrl != null)
                    hashCode = hashCode * 59 + this.NextPageUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
