/* 
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CompanyLocationModel
    /// </summary>
    [DataContract]
    public partial class CompanyLocationModel :  IEquatable<CompanyLocationModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyLocationModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="address1">address1.</param>
        /// <param name="address2">address2.</param>
        /// <param name="alternatePhone1">alternatePhone1.</param>
        /// <param name="alternatePhone2">alternatePhone2.</param>
        /// <param name="city">city.</param>
        /// <param name="companyID">companyID.</param>
        /// <param name="countryID">countryID.</param>
        /// <param name="description">description.</param>
        /// <param name="fax">fax.</param>
        /// <param name="isActive">isActive.</param>
        /// <param name="isPrimary">isPrimary.</param>
        /// <param name="isTaxExempt">isTaxExempt.</param>
        /// <param name="overrideCompanyTaxSettings">overrideCompanyTaxSettings.</param>
        /// <param name="name">name.</param>
        /// <param name="phone">phone.</param>
        /// <param name="postalCode">postalCode.</param>
        /// <param name="roundtripDistance">roundtripDistance.</param>
        /// <param name="state">state.</param>
        /// <param name="taxRegionID">taxRegionID.</param>
        /// <param name="userDefinedFields">userDefinedFields.</param>
        public CompanyLocationModel(long? id = default(long?), string address1 = default(string), string address2 = default(string), string alternatePhone1 = default(string), string alternatePhone2 = default(string), string city = default(string), int? companyID = default(int?), int? countryID = default(int?), string description = default(string), string fax = default(string), bool? isActive = default(bool?), bool? isPrimary = default(bool?), bool? isTaxExempt = default(bool?), bool? overrideCompanyTaxSettings = default(bool?), string name = default(string), string phone = default(string), string postalCode = default(string), double? roundtripDistance = default(double?), string state = default(string), int? taxRegionID = default(int?), List<UserDefinedField> userDefinedFields = default(List<UserDefinedField>))
        {
            this.Id = id;
            this.Address1 = address1;
            this.Address2 = address2;
            this.AlternatePhone1 = alternatePhone1;
            this.AlternatePhone2 = alternatePhone2;
            this.City = city;
            this.CompanyID = companyID;
            this.CountryID = countryID;
            this.Description = description;
            this.Fax = fax;
            this.IsActive = isActive;
            this.IsPrimary = isPrimary;
            this.IsTaxExempt = isTaxExempt;
            this.OverrideCompanyTaxSettings = overrideCompanyTaxSettings;
            this.Name = name;
            this.Phone = phone;
            this.PostalCode = postalCode;
            this.RoundtripDistance = roundtripDistance;
            this.State = state;
            this.TaxRegionID = taxRegionID;
            this.UserDefinedFields = userDefinedFields;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Address1
        /// </summary>
        [DataMember(Name="address1", EmitDefaultValue=false)]
        public string Address1 { get; set; }

        /// <summary>
        /// Gets or Sets Address2
        /// </summary>
        [DataMember(Name="address2", EmitDefaultValue=false)]
        public string Address2 { get; set; }

        /// <summary>
        /// Gets or Sets AlternatePhone1
        /// </summary>
        [DataMember(Name="alternatePhone1", EmitDefaultValue=false)]
        public string AlternatePhone1 { get; set; }

        /// <summary>
        /// Gets or Sets AlternatePhone2
        /// </summary>
        [DataMember(Name="alternatePhone2", EmitDefaultValue=false)]
        public string AlternatePhone2 { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets CompanyID
        /// </summary>
        [DataMember(Name="companyID", EmitDefaultValue=false)]
        public int? CompanyID { get; set; }

        /// <summary>
        /// Gets or Sets CountryID
        /// </summary>
        [DataMember(Name="countryID", EmitDefaultValue=false)]
        public int? CountryID { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Fax
        /// </summary>
        [DataMember(Name="fax", EmitDefaultValue=false)]
        public string Fax { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="isActive", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets IsPrimary
        /// </summary>
        [DataMember(Name="isPrimary", EmitDefaultValue=false)]
        public bool? IsPrimary { get; set; }

        /// <summary>
        /// Gets or Sets IsTaxExempt
        /// </summary>
        [DataMember(Name="isTaxExempt", EmitDefaultValue=false)]
        public bool? IsTaxExempt { get; set; }

        /// <summary>
        /// Gets or Sets OverrideCompanyTaxSettings
        /// </summary>
        [DataMember(Name="overrideCompanyTaxSettings", EmitDefaultValue=false)]
        public bool? OverrideCompanyTaxSettings { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }

        /// <summary>
        /// Gets or Sets PostalCode
        /// </summary>
        [DataMember(Name="postalCode", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Gets or Sets RoundtripDistance
        /// </summary>
        [DataMember(Name="roundtripDistance", EmitDefaultValue=false)]
        public double? RoundtripDistance { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets TaxRegionID
        /// </summary>
        [DataMember(Name="taxRegionID", EmitDefaultValue=false)]
        public int? TaxRegionID { get; set; }

        /// <summary>
        /// Gets or Sets SoapParentPropertyId
        /// </summary>
        [DataMember(Name="soapParentPropertyId", EmitDefaultValue=false)]
        public ExpressionFuncAccountPhysicalLocationInt64 SoapParentPropertyId { get; private set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields", EmitDefaultValue=false)]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompanyLocationModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Address1: ").Append(Address1).Append("\n");
            sb.Append("  Address2: ").Append(Address2).Append("\n");
            sb.Append("  AlternatePhone1: ").Append(AlternatePhone1).Append("\n");
            sb.Append("  AlternatePhone2: ").Append(AlternatePhone2).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  CompanyID: ").Append(CompanyID).Append("\n");
            sb.Append("  CountryID: ").Append(CountryID).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Fax: ").Append(Fax).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsPrimary: ").Append(IsPrimary).Append("\n");
            sb.Append("  IsTaxExempt: ").Append(IsTaxExempt).Append("\n");
            sb.Append("  OverrideCompanyTaxSettings: ").Append(OverrideCompanyTaxSettings).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  RoundtripDistance: ").Append(RoundtripDistance).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  TaxRegionID: ").Append(TaxRegionID).Append("\n");
            sb.Append("  SoapParentPropertyId: ").Append(SoapParentPropertyId).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompanyLocationModel);
        }

        /// <summary>
        /// Returns true if CompanyLocationModel instances are equal
        /// </summary>
        /// <param name="input">Instance of CompanyLocationModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompanyLocationModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Address1 == input.Address1 ||
                    (this.Address1 != null &&
                    this.Address1.Equals(input.Address1))
                ) && 
                (
                    this.Address2 == input.Address2 ||
                    (this.Address2 != null &&
                    this.Address2.Equals(input.Address2))
                ) && 
                (
                    this.AlternatePhone1 == input.AlternatePhone1 ||
                    (this.AlternatePhone1 != null &&
                    this.AlternatePhone1.Equals(input.AlternatePhone1))
                ) && 
                (
                    this.AlternatePhone2 == input.AlternatePhone2 ||
                    (this.AlternatePhone2 != null &&
                    this.AlternatePhone2.Equals(input.AlternatePhone2))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.CompanyID == input.CompanyID ||
                    (this.CompanyID != null &&
                    this.CompanyID.Equals(input.CompanyID))
                ) && 
                (
                    this.CountryID == input.CountryID ||
                    (this.CountryID != null &&
                    this.CountryID.Equals(input.CountryID))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Fax == input.Fax ||
                    (this.Fax != null &&
                    this.Fax.Equals(input.Fax))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.IsPrimary == input.IsPrimary ||
                    (this.IsPrimary != null &&
                    this.IsPrimary.Equals(input.IsPrimary))
                ) && 
                (
                    this.IsTaxExempt == input.IsTaxExempt ||
                    (this.IsTaxExempt != null &&
                    this.IsTaxExempt.Equals(input.IsTaxExempt))
                ) && 
                (
                    this.OverrideCompanyTaxSettings == input.OverrideCompanyTaxSettings ||
                    (this.OverrideCompanyTaxSettings != null &&
                    this.OverrideCompanyTaxSettings.Equals(input.OverrideCompanyTaxSettings))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.RoundtripDistance == input.RoundtripDistance ||
                    (this.RoundtripDistance != null &&
                    this.RoundtripDistance.Equals(input.RoundtripDistance))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.TaxRegionID == input.TaxRegionID ||
                    (this.TaxRegionID != null &&
                    this.TaxRegionID.Equals(input.TaxRegionID))
                ) && 
                (
                    this.SoapParentPropertyId == input.SoapParentPropertyId ||
                    (this.SoapParentPropertyId != null &&
                    this.SoapParentPropertyId.Equals(input.SoapParentPropertyId))
                ) && 
                (
                    this.UserDefinedFields == input.UserDefinedFields ||
                    this.UserDefinedFields != null &&
                    this.UserDefinedFields.SequenceEqual(input.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Address1 != null)
                    hashCode = hashCode * 59 + this.Address1.GetHashCode();
                if (this.Address2 != null)
                    hashCode = hashCode * 59 + this.Address2.GetHashCode();
                if (this.AlternatePhone1 != null)
                    hashCode = hashCode * 59 + this.AlternatePhone1.GetHashCode();
                if (this.AlternatePhone2 != null)
                    hashCode = hashCode * 59 + this.AlternatePhone2.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.CompanyID != null)
                    hashCode = hashCode * 59 + this.CompanyID.GetHashCode();
                if (this.CountryID != null)
                    hashCode = hashCode * 59 + this.CountryID.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Fax != null)
                    hashCode = hashCode * 59 + this.Fax.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.IsPrimary != null)
                    hashCode = hashCode * 59 + this.IsPrimary.GetHashCode();
                if (this.IsTaxExempt != null)
                    hashCode = hashCode * 59 + this.IsTaxExempt.GetHashCode();
                if (this.OverrideCompanyTaxSettings != null)
                    hashCode = hashCode * 59 + this.OverrideCompanyTaxSettings.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this.PostalCode != null)
                    hashCode = hashCode * 59 + this.PostalCode.GetHashCode();
                if (this.RoundtripDistance != null)
                    hashCode = hashCode * 59 + this.RoundtripDistance.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.TaxRegionID != null)
                    hashCode = hashCode * 59 + this.TaxRegionID.GetHashCode();
                if (this.SoapParentPropertyId != null)
                    hashCode = hashCode * 59 + this.SoapParentPropertyId.GetHashCode();
                if (this.UserDefinedFields != null)
                    hashCode = hashCode * 59 + this.UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
