/* 
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TaxModel
    /// </summary>
    [DataContract]
    public partial class TaxModel :  IEquatable<TaxModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="isCompounded">isCompounded.</param>
        /// <param name="taxCategoryID">taxCategoryID.</param>
        /// <param name="taxName">taxName.</param>
        /// <param name="taxRate">taxRate.</param>
        /// <param name="taxRegionID">taxRegionID.</param>
        /// <param name="userDefinedFields">userDefinedFields.</param>
        public TaxModel(long? id = default(long?), bool? isCompounded = default(bool?), int? taxCategoryID = default(int?), string taxName = default(string), double? taxRate = default(double?), int? taxRegionID = default(int?), List<UserDefinedField> userDefinedFields = default(List<UserDefinedField>))
        {
            this.Id = id;
            this.IsCompounded = isCompounded;
            this.TaxCategoryID = taxCategoryID;
            this.TaxName = taxName;
            this.TaxRate = taxRate;
            this.TaxRegionID = taxRegionID;
            this.UserDefinedFields = userDefinedFields;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets IsCompounded
        /// </summary>
        [DataMember(Name="isCompounded", EmitDefaultValue=false)]
        public bool? IsCompounded { get; set; }

        /// <summary>
        /// Gets or Sets TaxCategoryID
        /// </summary>
        [DataMember(Name="taxCategoryID", EmitDefaultValue=false)]
        public int? TaxCategoryID { get; set; }

        /// <summary>
        /// Gets or Sets TaxName
        /// </summary>
        [DataMember(Name="taxName", EmitDefaultValue=false)]
        public string TaxName { get; set; }

        /// <summary>
        /// Gets or Sets TaxRate
        /// </summary>
        [DataMember(Name="taxRate", EmitDefaultValue=false)]
        public double? TaxRate { get; set; }

        /// <summary>
        /// Gets or Sets TaxRegionID
        /// </summary>
        [DataMember(Name="taxRegionID", EmitDefaultValue=false)]
        public int? TaxRegionID { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields", EmitDefaultValue=false)]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaxModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsCompounded: ").Append(IsCompounded).Append("\n");
            sb.Append("  TaxCategoryID: ").Append(TaxCategoryID).Append("\n");
            sb.Append("  TaxName: ").Append(TaxName).Append("\n");
            sb.Append("  TaxRate: ").Append(TaxRate).Append("\n");
            sb.Append("  TaxRegionID: ").Append(TaxRegionID).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaxModel);
        }

        /// <summary>
        /// Returns true if TaxModel instances are equal
        /// </summary>
        /// <param name="input">Instance of TaxModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaxModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsCompounded == input.IsCompounded ||
                    (this.IsCompounded != null &&
                    this.IsCompounded.Equals(input.IsCompounded))
                ) && 
                (
                    this.TaxCategoryID == input.TaxCategoryID ||
                    (this.TaxCategoryID != null &&
                    this.TaxCategoryID.Equals(input.TaxCategoryID))
                ) && 
                (
                    this.TaxName == input.TaxName ||
                    (this.TaxName != null &&
                    this.TaxName.Equals(input.TaxName))
                ) && 
                (
                    this.TaxRate == input.TaxRate ||
                    (this.TaxRate != null &&
                    this.TaxRate.Equals(input.TaxRate))
                ) && 
                (
                    this.TaxRegionID == input.TaxRegionID ||
                    (this.TaxRegionID != null &&
                    this.TaxRegionID.Equals(input.TaxRegionID))
                ) && 
                (
                    this.UserDefinedFields == input.UserDefinedFields ||
                    this.UserDefinedFields != null &&
                    this.UserDefinedFields.SequenceEqual(input.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsCompounded != null)
                    hashCode = hashCode * 59 + this.IsCompounded.GetHashCode();
                if (this.TaxCategoryID != null)
                    hashCode = hashCode * 59 + this.TaxCategoryID.GetHashCode();
                if (this.TaxName != null)
                    hashCode = hashCode * 59 + this.TaxName.GetHashCode();
                if (this.TaxRate != null)
                    hashCode = hashCode * 59 + this.TaxRate.GetHashCode();
                if (this.TaxRegionID != null)
                    hashCode = hashCode * 59 + this.TaxRegionID.GetHashCode();
                if (this.UserDefinedFields != null)
                    hashCode = hashCode * 59 + this.UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
