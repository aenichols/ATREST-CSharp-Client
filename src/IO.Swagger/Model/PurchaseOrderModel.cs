/* 
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PurchaseOrderModel
    /// </summary>
    [DataContract]
    public partial class PurchaseOrderModel :  IEquatable<PurchaseOrderModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseOrderModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="cancelDateTime">cancelDateTime.</param>
        /// <param name="createDateTime">createDateTime.</param>
        /// <param name="creatorResourceID">creatorResourceID.</param>
        /// <param name="externalPONumber">externalPONumber.</param>
        /// <param name="fax">fax.</param>
        /// <param name="freight">freight.</param>
        /// <param name="generalMemo">generalMemo.</param>
        /// <param name="impersonatorCreatorResourceID">impersonatorCreatorResourceID.</param>
        /// <param name="internalCurrencyFreight">internalCurrencyFreight.</param>
        /// <param name="latestEstimatedArrivalDate">latestEstimatedArrivalDate.</param>
        /// <param name="paymentTerm">paymentTerm.</param>
        /// <param name="phone">phone.</param>
        /// <param name="purchaseForCompanyID">purchaseForCompanyID.</param>
        /// <param name="purchaseOrderNumber">purchaseOrderNumber.</param>
        /// <param name="purchaseOrderTemplateID">purchaseOrderTemplateID.</param>
        /// <param name="shippingDate">shippingDate.</param>
        /// <param name="shippingType">shippingType.</param>
        /// <param name="shipToAddress1">shipToAddress1.</param>
        /// <param name="shipToAddress2">shipToAddress2.</param>
        /// <param name="shipToCity">shipToCity.</param>
        /// <param name="shipToName">shipToName.</param>
        /// <param name="shipToPostalCode">shipToPostalCode.</param>
        /// <param name="shipToState">shipToState.</param>
        /// <param name="showEachTaxInGroup">showEachTaxInGroup.</param>
        /// <param name="showTaxCategory">showTaxCategory.</param>
        /// <param name="status">status.</param>
        /// <param name="submitDateTime">submitDateTime.</param>
        /// <param name="taxRegionID">taxRegionID.</param>
        /// <param name="useItemDescriptionsFrom">useItemDescriptionsFrom.</param>
        /// <param name="vendorID">vendorID.</param>
        /// <param name="vendorInvoiceNumber">vendorInvoiceNumber.</param>
        /// <param name="userDefinedFields">userDefinedFields.</param>
        public PurchaseOrderModel(long? id = default(long?), DateTime? cancelDateTime = default(DateTime?), DateTime? createDateTime = default(DateTime?), int? creatorResourceID = default(int?), string externalPONumber = default(string), string fax = default(string), double? freight = default(double?), string generalMemo = default(string), int? impersonatorCreatorResourceID = default(int?), double? internalCurrencyFreight = default(double?), DateTime? latestEstimatedArrivalDate = default(DateTime?), int? paymentTerm = default(int?), string phone = default(string), int? purchaseForCompanyID = default(int?), string purchaseOrderNumber = default(string), int? purchaseOrderTemplateID = default(int?), DateTime? shippingDate = default(DateTime?), int? shippingType = default(int?), string shipToAddress1 = default(string), string shipToAddress2 = default(string), string shipToCity = default(string), string shipToName = default(string), string shipToPostalCode = default(string), string shipToState = default(string), bool? showEachTaxInGroup = default(bool?), bool? showTaxCategory = default(bool?), int? status = default(int?), DateTime? submitDateTime = default(DateTime?), int? taxRegionID = default(int?), int? useItemDescriptionsFrom = default(int?), int? vendorID = default(int?), string vendorInvoiceNumber = default(string), List<UserDefinedField> userDefinedFields = default(List<UserDefinedField>))
        {
            this.Id = id;
            this.CancelDateTime = cancelDateTime;
            this.CreateDateTime = createDateTime;
            this.CreatorResourceID = creatorResourceID;
            this.ExternalPONumber = externalPONumber;
            this.Fax = fax;
            this.Freight = freight;
            this.GeneralMemo = generalMemo;
            this.ImpersonatorCreatorResourceID = impersonatorCreatorResourceID;
            this.InternalCurrencyFreight = internalCurrencyFreight;
            this.LatestEstimatedArrivalDate = latestEstimatedArrivalDate;
            this.PaymentTerm = paymentTerm;
            this.Phone = phone;
            this.PurchaseForCompanyID = purchaseForCompanyID;
            this.PurchaseOrderNumber = purchaseOrderNumber;
            this.PurchaseOrderTemplateID = purchaseOrderTemplateID;
            this.ShippingDate = shippingDate;
            this.ShippingType = shippingType;
            this.ShipToAddress1 = shipToAddress1;
            this.ShipToAddress2 = shipToAddress2;
            this.ShipToCity = shipToCity;
            this.ShipToName = shipToName;
            this.ShipToPostalCode = shipToPostalCode;
            this.ShipToState = shipToState;
            this.ShowEachTaxInGroup = showEachTaxInGroup;
            this.ShowTaxCategory = showTaxCategory;
            this.Status = status;
            this.SubmitDateTime = submitDateTime;
            this.TaxRegionID = taxRegionID;
            this.UseItemDescriptionsFrom = useItemDescriptionsFrom;
            this.VendorID = vendorID;
            this.VendorInvoiceNumber = vendorInvoiceNumber;
            this.UserDefinedFields = userDefinedFields;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets CancelDateTime
        /// </summary>
        [DataMember(Name="cancelDateTime", EmitDefaultValue=false)]
        public DateTime? CancelDateTime { get; set; }

        /// <summary>
        /// Gets or Sets CreateDateTime
        /// </summary>
        [DataMember(Name="createDateTime", EmitDefaultValue=false)]
        public DateTime? CreateDateTime { get; set; }

        /// <summary>
        /// Gets or Sets CreatorResourceID
        /// </summary>
        [DataMember(Name="creatorResourceID", EmitDefaultValue=false)]
        public int? CreatorResourceID { get; set; }

        /// <summary>
        /// Gets or Sets ExternalPONumber
        /// </summary>
        [DataMember(Name="externalPONumber", EmitDefaultValue=false)]
        public string ExternalPONumber { get; set; }

        /// <summary>
        /// Gets or Sets Fax
        /// </summary>
        [DataMember(Name="fax", EmitDefaultValue=false)]
        public string Fax { get; set; }

        /// <summary>
        /// Gets or Sets Freight
        /// </summary>
        [DataMember(Name="freight", EmitDefaultValue=false)]
        public double? Freight { get; set; }

        /// <summary>
        /// Gets or Sets GeneralMemo
        /// </summary>
        [DataMember(Name="generalMemo", EmitDefaultValue=false)]
        public string GeneralMemo { get; set; }

        /// <summary>
        /// Gets or Sets ImpersonatorCreatorResourceID
        /// </summary>
        [DataMember(Name="impersonatorCreatorResourceID", EmitDefaultValue=false)]
        public int? ImpersonatorCreatorResourceID { get; set; }

        /// <summary>
        /// Gets or Sets InternalCurrencyFreight
        /// </summary>
        [DataMember(Name="internalCurrencyFreight", EmitDefaultValue=false)]
        public double? InternalCurrencyFreight { get; set; }

        /// <summary>
        /// Gets or Sets LatestEstimatedArrivalDate
        /// </summary>
        [DataMember(Name="latestEstimatedArrivalDate", EmitDefaultValue=false)]
        public DateTime? LatestEstimatedArrivalDate { get; set; }

        /// <summary>
        /// Gets or Sets PaymentTerm
        /// </summary>
        [DataMember(Name="paymentTerm", EmitDefaultValue=false)]
        public int? PaymentTerm { get; set; }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseForCompanyID
        /// </summary>
        [DataMember(Name="purchaseForCompanyID", EmitDefaultValue=false)]
        public int? PurchaseForCompanyID { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseOrderNumber
        /// </summary>
        [DataMember(Name="purchaseOrderNumber", EmitDefaultValue=false)]
        public string PurchaseOrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseOrderTemplateID
        /// </summary>
        [DataMember(Name="purchaseOrderTemplateID", EmitDefaultValue=false)]
        public int? PurchaseOrderTemplateID { get; set; }

        /// <summary>
        /// Gets or Sets ShippingDate
        /// </summary>
        [DataMember(Name="shippingDate", EmitDefaultValue=false)]
        public DateTime? ShippingDate { get; set; }

        /// <summary>
        /// Gets or Sets ShippingType
        /// </summary>
        [DataMember(Name="shippingType", EmitDefaultValue=false)]
        public int? ShippingType { get; set; }

        /// <summary>
        /// Gets or Sets ShipToAddress1
        /// </summary>
        [DataMember(Name="shipToAddress1", EmitDefaultValue=false)]
        public string ShipToAddress1 { get; set; }

        /// <summary>
        /// Gets or Sets ShipToAddress2
        /// </summary>
        [DataMember(Name="shipToAddress2", EmitDefaultValue=false)]
        public string ShipToAddress2 { get; set; }

        /// <summary>
        /// Gets or Sets ShipToCity
        /// </summary>
        [DataMember(Name="shipToCity", EmitDefaultValue=false)]
        public string ShipToCity { get; set; }

        /// <summary>
        /// Gets or Sets ShipToName
        /// </summary>
        [DataMember(Name="shipToName", EmitDefaultValue=false)]
        public string ShipToName { get; set; }

        /// <summary>
        /// Gets or Sets ShipToPostalCode
        /// </summary>
        [DataMember(Name="shipToPostalCode", EmitDefaultValue=false)]
        public string ShipToPostalCode { get; set; }

        /// <summary>
        /// Gets or Sets ShipToState
        /// </summary>
        [DataMember(Name="shipToState", EmitDefaultValue=false)]
        public string ShipToState { get; set; }

        /// <summary>
        /// Gets or Sets ShowEachTaxInGroup
        /// </summary>
        [DataMember(Name="showEachTaxInGroup", EmitDefaultValue=false)]
        public bool? ShowEachTaxInGroup { get; set; }

        /// <summary>
        /// Gets or Sets ShowTaxCategory
        /// </summary>
        [DataMember(Name="showTaxCategory", EmitDefaultValue=false)]
        public bool? ShowTaxCategory { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public int? Status { get; set; }

        /// <summary>
        /// Gets or Sets SubmitDateTime
        /// </summary>
        [DataMember(Name="submitDateTime", EmitDefaultValue=false)]
        public DateTime? SubmitDateTime { get; set; }

        /// <summary>
        /// Gets or Sets TaxRegionID
        /// </summary>
        [DataMember(Name="taxRegionID", EmitDefaultValue=false)]
        public int? TaxRegionID { get; set; }

        /// <summary>
        /// Gets or Sets UseItemDescriptionsFrom
        /// </summary>
        [DataMember(Name="useItemDescriptionsFrom", EmitDefaultValue=false)]
        public int? UseItemDescriptionsFrom { get; set; }

        /// <summary>
        /// Gets or Sets VendorID
        /// </summary>
        [DataMember(Name="vendorID", EmitDefaultValue=false)]
        public int? VendorID { get; set; }

        /// <summary>
        /// Gets or Sets VendorInvoiceNumber
        /// </summary>
        [DataMember(Name="vendorInvoiceNumber", EmitDefaultValue=false)]
        public string VendorInvoiceNumber { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields", EmitDefaultValue=false)]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PurchaseOrderModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CancelDateTime: ").Append(CancelDateTime).Append("\n");
            sb.Append("  CreateDateTime: ").Append(CreateDateTime).Append("\n");
            sb.Append("  CreatorResourceID: ").Append(CreatorResourceID).Append("\n");
            sb.Append("  ExternalPONumber: ").Append(ExternalPONumber).Append("\n");
            sb.Append("  Fax: ").Append(Fax).Append("\n");
            sb.Append("  Freight: ").Append(Freight).Append("\n");
            sb.Append("  GeneralMemo: ").Append(GeneralMemo).Append("\n");
            sb.Append("  ImpersonatorCreatorResourceID: ").Append(ImpersonatorCreatorResourceID).Append("\n");
            sb.Append("  InternalCurrencyFreight: ").Append(InternalCurrencyFreight).Append("\n");
            sb.Append("  LatestEstimatedArrivalDate: ").Append(LatestEstimatedArrivalDate).Append("\n");
            sb.Append("  PaymentTerm: ").Append(PaymentTerm).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  PurchaseForCompanyID: ").Append(PurchaseForCompanyID).Append("\n");
            sb.Append("  PurchaseOrderNumber: ").Append(PurchaseOrderNumber).Append("\n");
            sb.Append("  PurchaseOrderTemplateID: ").Append(PurchaseOrderTemplateID).Append("\n");
            sb.Append("  ShippingDate: ").Append(ShippingDate).Append("\n");
            sb.Append("  ShippingType: ").Append(ShippingType).Append("\n");
            sb.Append("  ShipToAddress1: ").Append(ShipToAddress1).Append("\n");
            sb.Append("  ShipToAddress2: ").Append(ShipToAddress2).Append("\n");
            sb.Append("  ShipToCity: ").Append(ShipToCity).Append("\n");
            sb.Append("  ShipToName: ").Append(ShipToName).Append("\n");
            sb.Append("  ShipToPostalCode: ").Append(ShipToPostalCode).Append("\n");
            sb.Append("  ShipToState: ").Append(ShipToState).Append("\n");
            sb.Append("  ShowEachTaxInGroup: ").Append(ShowEachTaxInGroup).Append("\n");
            sb.Append("  ShowTaxCategory: ").Append(ShowTaxCategory).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SubmitDateTime: ").Append(SubmitDateTime).Append("\n");
            sb.Append("  TaxRegionID: ").Append(TaxRegionID).Append("\n");
            sb.Append("  UseItemDescriptionsFrom: ").Append(UseItemDescriptionsFrom).Append("\n");
            sb.Append("  VendorID: ").Append(VendorID).Append("\n");
            sb.Append("  VendorInvoiceNumber: ").Append(VendorInvoiceNumber).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PurchaseOrderModel);
        }

        /// <summary>
        /// Returns true if PurchaseOrderModel instances are equal
        /// </summary>
        /// <param name="input">Instance of PurchaseOrderModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PurchaseOrderModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CancelDateTime == input.CancelDateTime ||
                    (this.CancelDateTime != null &&
                    this.CancelDateTime.Equals(input.CancelDateTime))
                ) && 
                (
                    this.CreateDateTime == input.CreateDateTime ||
                    (this.CreateDateTime != null &&
                    this.CreateDateTime.Equals(input.CreateDateTime))
                ) && 
                (
                    this.CreatorResourceID == input.CreatorResourceID ||
                    (this.CreatorResourceID != null &&
                    this.CreatorResourceID.Equals(input.CreatorResourceID))
                ) && 
                (
                    this.ExternalPONumber == input.ExternalPONumber ||
                    (this.ExternalPONumber != null &&
                    this.ExternalPONumber.Equals(input.ExternalPONumber))
                ) && 
                (
                    this.Fax == input.Fax ||
                    (this.Fax != null &&
                    this.Fax.Equals(input.Fax))
                ) && 
                (
                    this.Freight == input.Freight ||
                    (this.Freight != null &&
                    this.Freight.Equals(input.Freight))
                ) && 
                (
                    this.GeneralMemo == input.GeneralMemo ||
                    (this.GeneralMemo != null &&
                    this.GeneralMemo.Equals(input.GeneralMemo))
                ) && 
                (
                    this.ImpersonatorCreatorResourceID == input.ImpersonatorCreatorResourceID ||
                    (this.ImpersonatorCreatorResourceID != null &&
                    this.ImpersonatorCreatorResourceID.Equals(input.ImpersonatorCreatorResourceID))
                ) && 
                (
                    this.InternalCurrencyFreight == input.InternalCurrencyFreight ||
                    (this.InternalCurrencyFreight != null &&
                    this.InternalCurrencyFreight.Equals(input.InternalCurrencyFreight))
                ) && 
                (
                    this.LatestEstimatedArrivalDate == input.LatestEstimatedArrivalDate ||
                    (this.LatestEstimatedArrivalDate != null &&
                    this.LatestEstimatedArrivalDate.Equals(input.LatestEstimatedArrivalDate))
                ) && 
                (
                    this.PaymentTerm == input.PaymentTerm ||
                    (this.PaymentTerm != null &&
                    this.PaymentTerm.Equals(input.PaymentTerm))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.PurchaseForCompanyID == input.PurchaseForCompanyID ||
                    (this.PurchaseForCompanyID != null &&
                    this.PurchaseForCompanyID.Equals(input.PurchaseForCompanyID))
                ) && 
                (
                    this.PurchaseOrderNumber == input.PurchaseOrderNumber ||
                    (this.PurchaseOrderNumber != null &&
                    this.PurchaseOrderNumber.Equals(input.PurchaseOrderNumber))
                ) && 
                (
                    this.PurchaseOrderTemplateID == input.PurchaseOrderTemplateID ||
                    (this.PurchaseOrderTemplateID != null &&
                    this.PurchaseOrderTemplateID.Equals(input.PurchaseOrderTemplateID))
                ) && 
                (
                    this.ShippingDate == input.ShippingDate ||
                    (this.ShippingDate != null &&
                    this.ShippingDate.Equals(input.ShippingDate))
                ) && 
                (
                    this.ShippingType == input.ShippingType ||
                    (this.ShippingType != null &&
                    this.ShippingType.Equals(input.ShippingType))
                ) && 
                (
                    this.ShipToAddress1 == input.ShipToAddress1 ||
                    (this.ShipToAddress1 != null &&
                    this.ShipToAddress1.Equals(input.ShipToAddress1))
                ) && 
                (
                    this.ShipToAddress2 == input.ShipToAddress2 ||
                    (this.ShipToAddress2 != null &&
                    this.ShipToAddress2.Equals(input.ShipToAddress2))
                ) && 
                (
                    this.ShipToCity == input.ShipToCity ||
                    (this.ShipToCity != null &&
                    this.ShipToCity.Equals(input.ShipToCity))
                ) && 
                (
                    this.ShipToName == input.ShipToName ||
                    (this.ShipToName != null &&
                    this.ShipToName.Equals(input.ShipToName))
                ) && 
                (
                    this.ShipToPostalCode == input.ShipToPostalCode ||
                    (this.ShipToPostalCode != null &&
                    this.ShipToPostalCode.Equals(input.ShipToPostalCode))
                ) && 
                (
                    this.ShipToState == input.ShipToState ||
                    (this.ShipToState != null &&
                    this.ShipToState.Equals(input.ShipToState))
                ) && 
                (
                    this.ShowEachTaxInGroup == input.ShowEachTaxInGroup ||
                    (this.ShowEachTaxInGroup != null &&
                    this.ShowEachTaxInGroup.Equals(input.ShowEachTaxInGroup))
                ) && 
                (
                    this.ShowTaxCategory == input.ShowTaxCategory ||
                    (this.ShowTaxCategory != null &&
                    this.ShowTaxCategory.Equals(input.ShowTaxCategory))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.SubmitDateTime == input.SubmitDateTime ||
                    (this.SubmitDateTime != null &&
                    this.SubmitDateTime.Equals(input.SubmitDateTime))
                ) && 
                (
                    this.TaxRegionID == input.TaxRegionID ||
                    (this.TaxRegionID != null &&
                    this.TaxRegionID.Equals(input.TaxRegionID))
                ) && 
                (
                    this.UseItemDescriptionsFrom == input.UseItemDescriptionsFrom ||
                    (this.UseItemDescriptionsFrom != null &&
                    this.UseItemDescriptionsFrom.Equals(input.UseItemDescriptionsFrom))
                ) && 
                (
                    this.VendorID == input.VendorID ||
                    (this.VendorID != null &&
                    this.VendorID.Equals(input.VendorID))
                ) && 
                (
                    this.VendorInvoiceNumber == input.VendorInvoiceNumber ||
                    (this.VendorInvoiceNumber != null &&
                    this.VendorInvoiceNumber.Equals(input.VendorInvoiceNumber))
                ) && 
                (
                    this.UserDefinedFields == input.UserDefinedFields ||
                    this.UserDefinedFields != null &&
                    this.UserDefinedFields.SequenceEqual(input.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CancelDateTime != null)
                    hashCode = hashCode * 59 + this.CancelDateTime.GetHashCode();
                if (this.CreateDateTime != null)
                    hashCode = hashCode * 59 + this.CreateDateTime.GetHashCode();
                if (this.CreatorResourceID != null)
                    hashCode = hashCode * 59 + this.CreatorResourceID.GetHashCode();
                if (this.ExternalPONumber != null)
                    hashCode = hashCode * 59 + this.ExternalPONumber.GetHashCode();
                if (this.Fax != null)
                    hashCode = hashCode * 59 + this.Fax.GetHashCode();
                if (this.Freight != null)
                    hashCode = hashCode * 59 + this.Freight.GetHashCode();
                if (this.GeneralMemo != null)
                    hashCode = hashCode * 59 + this.GeneralMemo.GetHashCode();
                if (this.ImpersonatorCreatorResourceID != null)
                    hashCode = hashCode * 59 + this.ImpersonatorCreatorResourceID.GetHashCode();
                if (this.InternalCurrencyFreight != null)
                    hashCode = hashCode * 59 + this.InternalCurrencyFreight.GetHashCode();
                if (this.LatestEstimatedArrivalDate != null)
                    hashCode = hashCode * 59 + this.LatestEstimatedArrivalDate.GetHashCode();
                if (this.PaymentTerm != null)
                    hashCode = hashCode * 59 + this.PaymentTerm.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this.PurchaseForCompanyID != null)
                    hashCode = hashCode * 59 + this.PurchaseForCompanyID.GetHashCode();
                if (this.PurchaseOrderNumber != null)
                    hashCode = hashCode * 59 + this.PurchaseOrderNumber.GetHashCode();
                if (this.PurchaseOrderTemplateID != null)
                    hashCode = hashCode * 59 + this.PurchaseOrderTemplateID.GetHashCode();
                if (this.ShippingDate != null)
                    hashCode = hashCode * 59 + this.ShippingDate.GetHashCode();
                if (this.ShippingType != null)
                    hashCode = hashCode * 59 + this.ShippingType.GetHashCode();
                if (this.ShipToAddress1 != null)
                    hashCode = hashCode * 59 + this.ShipToAddress1.GetHashCode();
                if (this.ShipToAddress2 != null)
                    hashCode = hashCode * 59 + this.ShipToAddress2.GetHashCode();
                if (this.ShipToCity != null)
                    hashCode = hashCode * 59 + this.ShipToCity.GetHashCode();
                if (this.ShipToName != null)
                    hashCode = hashCode * 59 + this.ShipToName.GetHashCode();
                if (this.ShipToPostalCode != null)
                    hashCode = hashCode * 59 + this.ShipToPostalCode.GetHashCode();
                if (this.ShipToState != null)
                    hashCode = hashCode * 59 + this.ShipToState.GetHashCode();
                if (this.ShowEachTaxInGroup != null)
                    hashCode = hashCode * 59 + this.ShowEachTaxInGroup.GetHashCode();
                if (this.ShowTaxCategory != null)
                    hashCode = hashCode * 59 + this.ShowTaxCategory.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.SubmitDateTime != null)
                    hashCode = hashCode * 59 + this.SubmitDateTime.GetHashCode();
                if (this.TaxRegionID != null)
                    hashCode = hashCode * 59 + this.TaxRegionID.GetHashCode();
                if (this.UseItemDescriptionsFrom != null)
                    hashCode = hashCode * 59 + this.UseItemDescriptionsFrom.GetHashCode();
                if (this.VendorID != null)
                    hashCode = hashCode * 59 + this.VendorID.GetHashCode();
                if (this.VendorInvoiceNumber != null)
                    hashCode = hashCode * 59 + this.VendorInvoiceNumber.GetHashCode();
                if (this.UserDefinedFields != null)
                    hashCode = hashCode * 59 + this.UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
