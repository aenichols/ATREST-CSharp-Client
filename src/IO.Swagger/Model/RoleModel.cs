/* 
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// RoleModel
    /// </summary>
    [DataContract]
    public partial class RoleModel :  IEquatable<RoleModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RoleModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="description">description.</param>
        /// <param name="hourlyFactor">hourlyFactor.</param>
        /// <param name="hourlyRate">hourlyRate.</param>
        /// <param name="isActive">isActive.</param>
        /// <param name="isExcludedFromNewContracts">isExcludedFromNewContracts.</param>
        /// <param name="isSystemRole">isSystemRole.</param>
        /// <param name="name">name.</param>
        /// <param name="quoteItemDefaultTaxCategoryId">quoteItemDefaultTaxCategoryId.</param>
        /// <param name="roleType">roleType.</param>
        /// <param name="userDefinedFields">userDefinedFields.</param>
        public RoleModel(long? id = default(long?), string description = default(string), double? hourlyFactor = default(double?), double? hourlyRate = default(double?), bool? isActive = default(bool?), bool? isExcludedFromNewContracts = default(bool?), bool? isSystemRole = default(bool?), string name = default(string), int? quoteItemDefaultTaxCategoryId = default(int?), int? roleType = default(int?), List<UserDefinedField> userDefinedFields = default(List<UserDefinedField>))
        {
            this.Id = id;
            this.Description = description;
            this.HourlyFactor = hourlyFactor;
            this.HourlyRate = hourlyRate;
            this.IsActive = isActive;
            this.IsExcludedFromNewContracts = isExcludedFromNewContracts;
            this.IsSystemRole = isSystemRole;
            this.Name = name;
            this.QuoteItemDefaultTaxCategoryId = quoteItemDefaultTaxCategoryId;
            this.RoleType = roleType;
            this.UserDefinedFields = userDefinedFields;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets HourlyFactor
        /// </summary>
        [DataMember(Name="hourlyFactor", EmitDefaultValue=false)]
        public double? HourlyFactor { get; set; }

        /// <summary>
        /// Gets or Sets HourlyRate
        /// </summary>
        [DataMember(Name="hourlyRate", EmitDefaultValue=false)]
        public double? HourlyRate { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="isActive", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets IsExcludedFromNewContracts
        /// </summary>
        [DataMember(Name="isExcludedFromNewContracts", EmitDefaultValue=false)]
        public bool? IsExcludedFromNewContracts { get; set; }

        /// <summary>
        /// Gets or Sets IsSystemRole
        /// </summary>
        [DataMember(Name="isSystemRole", EmitDefaultValue=false)]
        public bool? IsSystemRole { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets QuoteItemDefaultTaxCategoryId
        /// </summary>
        [DataMember(Name="quoteItemDefaultTaxCategoryId", EmitDefaultValue=false)]
        public int? QuoteItemDefaultTaxCategoryId { get; set; }

        /// <summary>
        /// Gets or Sets RoleType
        /// </summary>
        [DataMember(Name="roleType", EmitDefaultValue=false)]
        public int? RoleType { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields", EmitDefaultValue=false)]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RoleModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  HourlyFactor: ").Append(HourlyFactor).Append("\n");
            sb.Append("  HourlyRate: ").Append(HourlyRate).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsExcludedFromNewContracts: ").Append(IsExcludedFromNewContracts).Append("\n");
            sb.Append("  IsSystemRole: ").Append(IsSystemRole).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  QuoteItemDefaultTaxCategoryId: ").Append(QuoteItemDefaultTaxCategoryId).Append("\n");
            sb.Append("  RoleType: ").Append(RoleType).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RoleModel);
        }

        /// <summary>
        /// Returns true if RoleModel instances are equal
        /// </summary>
        /// <param name="input">Instance of RoleModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RoleModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.HourlyFactor == input.HourlyFactor ||
                    (this.HourlyFactor != null &&
                    this.HourlyFactor.Equals(input.HourlyFactor))
                ) && 
                (
                    this.HourlyRate == input.HourlyRate ||
                    (this.HourlyRate != null &&
                    this.HourlyRate.Equals(input.HourlyRate))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.IsExcludedFromNewContracts == input.IsExcludedFromNewContracts ||
                    (this.IsExcludedFromNewContracts != null &&
                    this.IsExcludedFromNewContracts.Equals(input.IsExcludedFromNewContracts))
                ) && 
                (
                    this.IsSystemRole == input.IsSystemRole ||
                    (this.IsSystemRole != null &&
                    this.IsSystemRole.Equals(input.IsSystemRole))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.QuoteItemDefaultTaxCategoryId == input.QuoteItemDefaultTaxCategoryId ||
                    (this.QuoteItemDefaultTaxCategoryId != null &&
                    this.QuoteItemDefaultTaxCategoryId.Equals(input.QuoteItemDefaultTaxCategoryId))
                ) && 
                (
                    this.RoleType == input.RoleType ||
                    (this.RoleType != null &&
                    this.RoleType.Equals(input.RoleType))
                ) && 
                (
                    this.UserDefinedFields == input.UserDefinedFields ||
                    this.UserDefinedFields != null &&
                    this.UserDefinedFields.SequenceEqual(input.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.HourlyFactor != null)
                    hashCode = hashCode * 59 + this.HourlyFactor.GetHashCode();
                if (this.HourlyRate != null)
                    hashCode = hashCode * 59 + this.HourlyRate.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.IsExcludedFromNewContracts != null)
                    hashCode = hashCode * 59 + this.IsExcludedFromNewContracts.GetHashCode();
                if (this.IsSystemRole != null)
                    hashCode = hashCode * 59 + this.IsSystemRole.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.QuoteItemDefaultTaxCategoryId != null)
                    hashCode = hashCode * 59 + this.QuoteItemDefaultTaxCategoryId.GetHashCode();
                if (this.RoleType != null)
                    hashCode = hashCode * 59 + this.RoleType.GetHashCode();
                if (this.UserDefinedFields != null)
                    hashCode = hashCode * 59 + this.UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
