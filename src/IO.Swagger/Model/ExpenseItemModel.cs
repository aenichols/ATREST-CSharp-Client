/* 
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ExpenseItemModel
    /// </summary>
    [DataContract]
    public partial class ExpenseItemModel :  IEquatable<ExpenseItemModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExpenseItemModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="companyID">companyID.</param>
        /// <param name="description">description.</param>
        /// <param name="destination">destination.</param>
        /// <param name="entertainmentLocation">entertainmentLocation.</param>
        /// <param name="expenseCategory">expenseCategory.</param>
        /// <param name="expenseCurrencyExpenseAmount">expenseCurrencyExpenseAmount.</param>
        /// <param name="expenseCurrencyID">expenseCurrencyID.</param>
        /// <param name="expenseDate">expenseDate.</param>
        /// <param name="expenseReportID">expenseReportID.</param>
        /// <param name="glCode">glCode.</param>
        /// <param name="haveReceipt">haveReceipt.</param>
        /// <param name="internalCurrencyExpenseAmount">internalCurrencyExpenseAmount.</param>
        /// <param name="internalCurrencyReimbursementAmount">internalCurrencyReimbursementAmount.</param>
        /// <param name="isBillableToCompany">isBillableToCompany.</param>
        /// <param name="isReimbursable">isReimbursable.</param>
        /// <param name="isRejected">isRejected.</param>
        /// <param name="miles">miles.</param>
        /// <param name="odometerEnd">odometerEnd.</param>
        /// <param name="odometerStart">odometerStart.</param>
        /// <param name="origin">origin.</param>
        /// <param name="paymentType">paymentType.</param>
        /// <param name="projectID">projectID.</param>
        /// <param name="purchaseOrderNumber">purchaseOrderNumber.</param>
        /// <param name="reimbursementCurrencyReimbursementAmount">reimbursementCurrencyReimbursementAmount.</param>
        /// <param name="taskID">taskID.</param>
        /// <param name="ticketID">ticketID.</param>
        /// <param name="workType">workType.</param>
        /// <param name="userDefinedFields">userDefinedFields.</param>
        public ExpenseItemModel(long? id = default(long?), int? companyID = default(int?), string description = default(string), string destination = default(string), string entertainmentLocation = default(string), int? expenseCategory = default(int?), double? expenseCurrencyExpenseAmount = default(double?), int? expenseCurrencyID = default(int?), DateTime? expenseDate = default(DateTime?), int? expenseReportID = default(int?), string glCode = default(string), bool? haveReceipt = default(bool?), double? internalCurrencyExpenseAmount = default(double?), double? internalCurrencyReimbursementAmount = default(double?), bool? isBillableToCompany = default(bool?), bool? isReimbursable = default(bool?), bool? isRejected = default(bool?), double? miles = default(double?), double? odometerEnd = default(double?), double? odometerStart = default(double?), string origin = default(string), int? paymentType = default(int?), int? projectID = default(int?), string purchaseOrderNumber = default(string), double? reimbursementCurrencyReimbursementAmount = default(double?), int? taskID = default(int?), int? ticketID = default(int?), int? workType = default(int?), List<UserDefinedField> userDefinedFields = default(List<UserDefinedField>))
        {
            this.Id = id;
            this.CompanyID = companyID;
            this.Description = description;
            this.Destination = destination;
            this.EntertainmentLocation = entertainmentLocation;
            this.ExpenseCategory = expenseCategory;
            this.ExpenseCurrencyExpenseAmount = expenseCurrencyExpenseAmount;
            this.ExpenseCurrencyID = expenseCurrencyID;
            this.ExpenseDate = expenseDate;
            this.ExpenseReportID = expenseReportID;
            this.GlCode = glCode;
            this.HaveReceipt = haveReceipt;
            this.InternalCurrencyExpenseAmount = internalCurrencyExpenseAmount;
            this.InternalCurrencyReimbursementAmount = internalCurrencyReimbursementAmount;
            this.IsBillableToCompany = isBillableToCompany;
            this.IsReimbursable = isReimbursable;
            this.IsRejected = isRejected;
            this.Miles = miles;
            this.OdometerEnd = odometerEnd;
            this.OdometerStart = odometerStart;
            this.Origin = origin;
            this.PaymentType = paymentType;
            this.ProjectID = projectID;
            this.PurchaseOrderNumber = purchaseOrderNumber;
            this.ReimbursementCurrencyReimbursementAmount = reimbursementCurrencyReimbursementAmount;
            this.TaskID = taskID;
            this.TicketID = ticketID;
            this.WorkType = workType;
            this.UserDefinedFields = userDefinedFields;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets CompanyID
        /// </summary>
        [DataMember(Name="companyID", EmitDefaultValue=false)]
        public int? CompanyID { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Destination
        /// </summary>
        [DataMember(Name="destination", EmitDefaultValue=false)]
        public string Destination { get; set; }

        /// <summary>
        /// Gets or Sets EntertainmentLocation
        /// </summary>
        [DataMember(Name="entertainmentLocation", EmitDefaultValue=false)]
        public string EntertainmentLocation { get; set; }

        /// <summary>
        /// Gets or Sets ExpenseCategory
        /// </summary>
        [DataMember(Name="expenseCategory", EmitDefaultValue=false)]
        public int? ExpenseCategory { get; set; }

        /// <summary>
        /// Gets or Sets ExpenseCurrencyExpenseAmount
        /// </summary>
        [DataMember(Name="expenseCurrencyExpenseAmount", EmitDefaultValue=false)]
        public double? ExpenseCurrencyExpenseAmount { get; set; }

        /// <summary>
        /// Gets or Sets ExpenseCurrencyID
        /// </summary>
        [DataMember(Name="expenseCurrencyID", EmitDefaultValue=false)]
        public int? ExpenseCurrencyID { get; set; }

        /// <summary>
        /// Gets or Sets ExpenseDate
        /// </summary>
        [DataMember(Name="expenseDate", EmitDefaultValue=false)]
        public DateTime? ExpenseDate { get; set; }

        /// <summary>
        /// Gets or Sets ExpenseReportID
        /// </summary>
        [DataMember(Name="expenseReportID", EmitDefaultValue=false)]
        public int? ExpenseReportID { get; set; }

        /// <summary>
        /// Gets or Sets GlCode
        /// </summary>
        [DataMember(Name="glCode", EmitDefaultValue=false)]
        public string GlCode { get; set; }

        /// <summary>
        /// Gets or Sets HaveReceipt
        /// </summary>
        [DataMember(Name="haveReceipt", EmitDefaultValue=false)]
        public bool? HaveReceipt { get; set; }

        /// <summary>
        /// Gets or Sets InternalCurrencyExpenseAmount
        /// </summary>
        [DataMember(Name="internalCurrencyExpenseAmount", EmitDefaultValue=false)]
        public double? InternalCurrencyExpenseAmount { get; set; }

        /// <summary>
        /// Gets or Sets InternalCurrencyReimbursementAmount
        /// </summary>
        [DataMember(Name="internalCurrencyReimbursementAmount", EmitDefaultValue=false)]
        public double? InternalCurrencyReimbursementAmount { get; set; }

        /// <summary>
        /// Gets or Sets IsBillableToCompany
        /// </summary>
        [DataMember(Name="isBillableToCompany", EmitDefaultValue=false)]
        public bool? IsBillableToCompany { get; set; }

        /// <summary>
        /// Gets or Sets IsReimbursable
        /// </summary>
        [DataMember(Name="isReimbursable", EmitDefaultValue=false)]
        public bool? IsReimbursable { get; set; }

        /// <summary>
        /// Gets or Sets IsRejected
        /// </summary>
        [DataMember(Name="isRejected", EmitDefaultValue=false)]
        public bool? IsRejected { get; set; }

        /// <summary>
        /// Gets or Sets Miles
        /// </summary>
        [DataMember(Name="miles", EmitDefaultValue=false)]
        public double? Miles { get; set; }

        /// <summary>
        /// Gets or Sets OdometerEnd
        /// </summary>
        [DataMember(Name="odometerEnd", EmitDefaultValue=false)]
        public double? OdometerEnd { get; set; }

        /// <summary>
        /// Gets or Sets OdometerStart
        /// </summary>
        [DataMember(Name="odometerStart", EmitDefaultValue=false)]
        public double? OdometerStart { get; set; }

        /// <summary>
        /// Gets or Sets Origin
        /// </summary>
        [DataMember(Name="origin", EmitDefaultValue=false)]
        public string Origin { get; set; }

        /// <summary>
        /// Gets or Sets PaymentType
        /// </summary>
        [DataMember(Name="paymentType", EmitDefaultValue=false)]
        public int? PaymentType { get; set; }

        /// <summary>
        /// Gets or Sets ProjectID
        /// </summary>
        [DataMember(Name="projectID", EmitDefaultValue=false)]
        public int? ProjectID { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseOrderNumber
        /// </summary>
        [DataMember(Name="purchaseOrderNumber", EmitDefaultValue=false)]
        public string PurchaseOrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets ReimbursementCurrencyReimbursementAmount
        /// </summary>
        [DataMember(Name="reimbursementCurrencyReimbursementAmount", EmitDefaultValue=false)]
        public double? ReimbursementCurrencyReimbursementAmount { get; set; }

        /// <summary>
        /// Gets or Sets TaskID
        /// </summary>
        [DataMember(Name="taskID", EmitDefaultValue=false)]
        public int? TaskID { get; set; }

        /// <summary>
        /// Gets or Sets TicketID
        /// </summary>
        [DataMember(Name="ticketID", EmitDefaultValue=false)]
        public int? TicketID { get; set; }

        /// <summary>
        /// Gets or Sets WorkType
        /// </summary>
        [DataMember(Name="workType", EmitDefaultValue=false)]
        public int? WorkType { get; set; }

        /// <summary>
        /// Gets or Sets SoapParentPropertyId
        /// </summary>
        [DataMember(Name="soapParentPropertyId", EmitDefaultValue=false)]
        public ExpressionFuncExpenseItemInt64 SoapParentPropertyId { get; private set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields", EmitDefaultValue=false)]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExpenseItemModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CompanyID: ").Append(CompanyID).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  EntertainmentLocation: ").Append(EntertainmentLocation).Append("\n");
            sb.Append("  ExpenseCategory: ").Append(ExpenseCategory).Append("\n");
            sb.Append("  ExpenseCurrencyExpenseAmount: ").Append(ExpenseCurrencyExpenseAmount).Append("\n");
            sb.Append("  ExpenseCurrencyID: ").Append(ExpenseCurrencyID).Append("\n");
            sb.Append("  ExpenseDate: ").Append(ExpenseDate).Append("\n");
            sb.Append("  ExpenseReportID: ").Append(ExpenseReportID).Append("\n");
            sb.Append("  GlCode: ").Append(GlCode).Append("\n");
            sb.Append("  HaveReceipt: ").Append(HaveReceipt).Append("\n");
            sb.Append("  InternalCurrencyExpenseAmount: ").Append(InternalCurrencyExpenseAmount).Append("\n");
            sb.Append("  InternalCurrencyReimbursementAmount: ").Append(InternalCurrencyReimbursementAmount).Append("\n");
            sb.Append("  IsBillableToCompany: ").Append(IsBillableToCompany).Append("\n");
            sb.Append("  IsReimbursable: ").Append(IsReimbursable).Append("\n");
            sb.Append("  IsRejected: ").Append(IsRejected).Append("\n");
            sb.Append("  Miles: ").Append(Miles).Append("\n");
            sb.Append("  OdometerEnd: ").Append(OdometerEnd).Append("\n");
            sb.Append("  OdometerStart: ").Append(OdometerStart).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  PaymentType: ").Append(PaymentType).Append("\n");
            sb.Append("  ProjectID: ").Append(ProjectID).Append("\n");
            sb.Append("  PurchaseOrderNumber: ").Append(PurchaseOrderNumber).Append("\n");
            sb.Append("  ReimbursementCurrencyReimbursementAmount: ").Append(ReimbursementCurrencyReimbursementAmount).Append("\n");
            sb.Append("  TaskID: ").Append(TaskID).Append("\n");
            sb.Append("  TicketID: ").Append(TicketID).Append("\n");
            sb.Append("  WorkType: ").Append(WorkType).Append("\n");
            sb.Append("  SoapParentPropertyId: ").Append(SoapParentPropertyId).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExpenseItemModel);
        }

        /// <summary>
        /// Returns true if ExpenseItemModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ExpenseItemModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExpenseItemModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CompanyID == input.CompanyID ||
                    (this.CompanyID != null &&
                    this.CompanyID.Equals(input.CompanyID))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Destination == input.Destination ||
                    (this.Destination != null &&
                    this.Destination.Equals(input.Destination))
                ) && 
                (
                    this.EntertainmentLocation == input.EntertainmentLocation ||
                    (this.EntertainmentLocation != null &&
                    this.EntertainmentLocation.Equals(input.EntertainmentLocation))
                ) && 
                (
                    this.ExpenseCategory == input.ExpenseCategory ||
                    (this.ExpenseCategory != null &&
                    this.ExpenseCategory.Equals(input.ExpenseCategory))
                ) && 
                (
                    this.ExpenseCurrencyExpenseAmount == input.ExpenseCurrencyExpenseAmount ||
                    (this.ExpenseCurrencyExpenseAmount != null &&
                    this.ExpenseCurrencyExpenseAmount.Equals(input.ExpenseCurrencyExpenseAmount))
                ) && 
                (
                    this.ExpenseCurrencyID == input.ExpenseCurrencyID ||
                    (this.ExpenseCurrencyID != null &&
                    this.ExpenseCurrencyID.Equals(input.ExpenseCurrencyID))
                ) && 
                (
                    this.ExpenseDate == input.ExpenseDate ||
                    (this.ExpenseDate != null &&
                    this.ExpenseDate.Equals(input.ExpenseDate))
                ) && 
                (
                    this.ExpenseReportID == input.ExpenseReportID ||
                    (this.ExpenseReportID != null &&
                    this.ExpenseReportID.Equals(input.ExpenseReportID))
                ) && 
                (
                    this.GlCode == input.GlCode ||
                    (this.GlCode != null &&
                    this.GlCode.Equals(input.GlCode))
                ) && 
                (
                    this.HaveReceipt == input.HaveReceipt ||
                    (this.HaveReceipt != null &&
                    this.HaveReceipt.Equals(input.HaveReceipt))
                ) && 
                (
                    this.InternalCurrencyExpenseAmount == input.InternalCurrencyExpenseAmount ||
                    (this.InternalCurrencyExpenseAmount != null &&
                    this.InternalCurrencyExpenseAmount.Equals(input.InternalCurrencyExpenseAmount))
                ) && 
                (
                    this.InternalCurrencyReimbursementAmount == input.InternalCurrencyReimbursementAmount ||
                    (this.InternalCurrencyReimbursementAmount != null &&
                    this.InternalCurrencyReimbursementAmount.Equals(input.InternalCurrencyReimbursementAmount))
                ) && 
                (
                    this.IsBillableToCompany == input.IsBillableToCompany ||
                    (this.IsBillableToCompany != null &&
                    this.IsBillableToCompany.Equals(input.IsBillableToCompany))
                ) && 
                (
                    this.IsReimbursable == input.IsReimbursable ||
                    (this.IsReimbursable != null &&
                    this.IsReimbursable.Equals(input.IsReimbursable))
                ) && 
                (
                    this.IsRejected == input.IsRejected ||
                    (this.IsRejected != null &&
                    this.IsRejected.Equals(input.IsRejected))
                ) && 
                (
                    this.Miles == input.Miles ||
                    (this.Miles != null &&
                    this.Miles.Equals(input.Miles))
                ) && 
                (
                    this.OdometerEnd == input.OdometerEnd ||
                    (this.OdometerEnd != null &&
                    this.OdometerEnd.Equals(input.OdometerEnd))
                ) && 
                (
                    this.OdometerStart == input.OdometerStart ||
                    (this.OdometerStart != null &&
                    this.OdometerStart.Equals(input.OdometerStart))
                ) && 
                (
                    this.Origin == input.Origin ||
                    (this.Origin != null &&
                    this.Origin.Equals(input.Origin))
                ) && 
                (
                    this.PaymentType == input.PaymentType ||
                    (this.PaymentType != null &&
                    this.PaymentType.Equals(input.PaymentType))
                ) && 
                (
                    this.ProjectID == input.ProjectID ||
                    (this.ProjectID != null &&
                    this.ProjectID.Equals(input.ProjectID))
                ) && 
                (
                    this.PurchaseOrderNumber == input.PurchaseOrderNumber ||
                    (this.PurchaseOrderNumber != null &&
                    this.PurchaseOrderNumber.Equals(input.PurchaseOrderNumber))
                ) && 
                (
                    this.ReimbursementCurrencyReimbursementAmount == input.ReimbursementCurrencyReimbursementAmount ||
                    (this.ReimbursementCurrencyReimbursementAmount != null &&
                    this.ReimbursementCurrencyReimbursementAmount.Equals(input.ReimbursementCurrencyReimbursementAmount))
                ) && 
                (
                    this.TaskID == input.TaskID ||
                    (this.TaskID != null &&
                    this.TaskID.Equals(input.TaskID))
                ) && 
                (
                    this.TicketID == input.TicketID ||
                    (this.TicketID != null &&
                    this.TicketID.Equals(input.TicketID))
                ) && 
                (
                    this.WorkType == input.WorkType ||
                    (this.WorkType != null &&
                    this.WorkType.Equals(input.WorkType))
                ) && 
                (
                    this.SoapParentPropertyId == input.SoapParentPropertyId ||
                    (this.SoapParentPropertyId != null &&
                    this.SoapParentPropertyId.Equals(input.SoapParentPropertyId))
                ) && 
                (
                    this.UserDefinedFields == input.UserDefinedFields ||
                    this.UserDefinedFields != null &&
                    this.UserDefinedFields.SequenceEqual(input.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CompanyID != null)
                    hashCode = hashCode * 59 + this.CompanyID.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Destination != null)
                    hashCode = hashCode * 59 + this.Destination.GetHashCode();
                if (this.EntertainmentLocation != null)
                    hashCode = hashCode * 59 + this.EntertainmentLocation.GetHashCode();
                if (this.ExpenseCategory != null)
                    hashCode = hashCode * 59 + this.ExpenseCategory.GetHashCode();
                if (this.ExpenseCurrencyExpenseAmount != null)
                    hashCode = hashCode * 59 + this.ExpenseCurrencyExpenseAmount.GetHashCode();
                if (this.ExpenseCurrencyID != null)
                    hashCode = hashCode * 59 + this.ExpenseCurrencyID.GetHashCode();
                if (this.ExpenseDate != null)
                    hashCode = hashCode * 59 + this.ExpenseDate.GetHashCode();
                if (this.ExpenseReportID != null)
                    hashCode = hashCode * 59 + this.ExpenseReportID.GetHashCode();
                if (this.GlCode != null)
                    hashCode = hashCode * 59 + this.GlCode.GetHashCode();
                if (this.HaveReceipt != null)
                    hashCode = hashCode * 59 + this.HaveReceipt.GetHashCode();
                if (this.InternalCurrencyExpenseAmount != null)
                    hashCode = hashCode * 59 + this.InternalCurrencyExpenseAmount.GetHashCode();
                if (this.InternalCurrencyReimbursementAmount != null)
                    hashCode = hashCode * 59 + this.InternalCurrencyReimbursementAmount.GetHashCode();
                if (this.IsBillableToCompany != null)
                    hashCode = hashCode * 59 + this.IsBillableToCompany.GetHashCode();
                if (this.IsReimbursable != null)
                    hashCode = hashCode * 59 + this.IsReimbursable.GetHashCode();
                if (this.IsRejected != null)
                    hashCode = hashCode * 59 + this.IsRejected.GetHashCode();
                if (this.Miles != null)
                    hashCode = hashCode * 59 + this.Miles.GetHashCode();
                if (this.OdometerEnd != null)
                    hashCode = hashCode * 59 + this.OdometerEnd.GetHashCode();
                if (this.OdometerStart != null)
                    hashCode = hashCode * 59 + this.OdometerStart.GetHashCode();
                if (this.Origin != null)
                    hashCode = hashCode * 59 + this.Origin.GetHashCode();
                if (this.PaymentType != null)
                    hashCode = hashCode * 59 + this.PaymentType.GetHashCode();
                if (this.ProjectID != null)
                    hashCode = hashCode * 59 + this.ProjectID.GetHashCode();
                if (this.PurchaseOrderNumber != null)
                    hashCode = hashCode * 59 + this.PurchaseOrderNumber.GetHashCode();
                if (this.ReimbursementCurrencyReimbursementAmount != null)
                    hashCode = hashCode * 59 + this.ReimbursementCurrencyReimbursementAmount.GetHashCode();
                if (this.TaskID != null)
                    hashCode = hashCode * 59 + this.TaskID.GetHashCode();
                if (this.TicketID != null)
                    hashCode = hashCode * 59 + this.TicketID.GetHashCode();
                if (this.WorkType != null)
                    hashCode = hashCode * 59 + this.WorkType.GetHashCode();
                if (this.SoapParentPropertyId != null)
                    hashCode = hashCode * 59 + this.SoapParentPropertyId.GetHashCode();
                if (this.UserDefinedFields != null)
                    hashCode = hashCode * 59 + this.UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
