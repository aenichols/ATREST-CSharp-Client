/* 
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ConfigurationItemCategoryModel
    /// </summary>
    [DataContract]
    public partial class ConfigurationItemCategoryModel :  IEquatable<ConfigurationItemCategoryModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationItemCategoryModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="displayColorRGB">displayColorRGB.</param>
        /// <param name="isActive">isActive.</param>
        /// <param name="isClientPortalDefault">isClientPortalDefault.</param>
        /// <param name="isGlobalDefault">isGlobalDefault.</param>
        /// <param name="name">name.</param>
        /// <param name="nickname">nickname.</param>
        /// <param name="userDefinedFields">userDefinedFields.</param>
        public ConfigurationItemCategoryModel(long? id = default(long?), int? displayColorRGB = default(int?), bool? isActive = default(bool?), bool? isClientPortalDefault = default(bool?), bool? isGlobalDefault = default(bool?), string name = default(string), string nickname = default(string), List<UserDefinedField> userDefinedFields = default(List<UserDefinedField>))
        {
            this.Id = id;
            this.DisplayColorRGB = displayColorRGB;
            this.IsActive = isActive;
            this.IsClientPortalDefault = isClientPortalDefault;
            this.IsGlobalDefault = isGlobalDefault;
            this.Name = name;
            this.Nickname = nickname;
            this.UserDefinedFields = userDefinedFields;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets DisplayColorRGB
        /// </summary>
        [DataMember(Name="displayColorRGB", EmitDefaultValue=false)]
        public int? DisplayColorRGB { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="isActive", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets IsClientPortalDefault
        /// </summary>
        [DataMember(Name="isClientPortalDefault", EmitDefaultValue=false)]
        public bool? IsClientPortalDefault { get; set; }

        /// <summary>
        /// Gets or Sets IsGlobalDefault
        /// </summary>
        [DataMember(Name="isGlobalDefault", EmitDefaultValue=false)]
        public bool? IsGlobalDefault { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Nickname
        /// </summary>
        [DataMember(Name="nickname", EmitDefaultValue=false)]
        public string Nickname { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields", EmitDefaultValue=false)]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConfigurationItemCategoryModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DisplayColorRGB: ").Append(DisplayColorRGB).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsClientPortalDefault: ").Append(IsClientPortalDefault).Append("\n");
            sb.Append("  IsGlobalDefault: ").Append(IsGlobalDefault).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Nickname: ").Append(Nickname).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConfigurationItemCategoryModel);
        }

        /// <summary>
        /// Returns true if ConfigurationItemCategoryModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ConfigurationItemCategoryModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConfigurationItemCategoryModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DisplayColorRGB == input.DisplayColorRGB ||
                    (this.DisplayColorRGB != null &&
                    this.DisplayColorRGB.Equals(input.DisplayColorRGB))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.IsClientPortalDefault == input.IsClientPortalDefault ||
                    (this.IsClientPortalDefault != null &&
                    this.IsClientPortalDefault.Equals(input.IsClientPortalDefault))
                ) && 
                (
                    this.IsGlobalDefault == input.IsGlobalDefault ||
                    (this.IsGlobalDefault != null &&
                    this.IsGlobalDefault.Equals(input.IsGlobalDefault))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Nickname == input.Nickname ||
                    (this.Nickname != null &&
                    this.Nickname.Equals(input.Nickname))
                ) && 
                (
                    this.UserDefinedFields == input.UserDefinedFields ||
                    this.UserDefinedFields != null &&
                    this.UserDefinedFields.SequenceEqual(input.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DisplayColorRGB != null)
                    hashCode = hashCode * 59 + this.DisplayColorRGB.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.IsClientPortalDefault != null)
                    hashCode = hashCode * 59 + this.IsClientPortalDefault.GetHashCode();
                if (this.IsGlobalDefault != null)
                    hashCode = hashCode * 59 + this.IsGlobalDefault.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Nickname != null)
                    hashCode = hashCode * 59 + this.Nickname.GetHashCode();
                if (this.UserDefinedFields != null)
                    hashCode = hashCode * 59 + this.UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
