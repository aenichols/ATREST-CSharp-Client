/* 
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// QuoteTemplateModel
    /// </summary>
    [DataContract]
    public partial class QuoteTemplateModel :  IEquatable<QuoteTemplateModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QuoteTemplateModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="calculateTaxSeparately">calculateTaxSeparately.</param>
        /// <param name="createDate">createDate.</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="currencyNegativeFormat">currencyNegativeFormat.</param>
        /// <param name="currencyPositiveFormat">currencyPositiveFormat.</param>
        /// <param name="dateFormat">dateFormat.</param>
        /// <param name="description">description.</param>
        /// <param name="displayTaxCategorySuperscripts">displayTaxCategorySuperscripts.</param>
        /// <param name="isActive">isActive.</param>
        /// <param name="lastActivityBy">lastActivityBy.</param>
        /// <param name="lastActivityDate">lastActivityDate.</param>
        /// <param name="name">name.</param>
        /// <param name="numberFormat">numberFormat.</param>
        /// <param name="pageLayout">pageLayout.</param>
        /// <param name="pageNumberFormat">pageNumberFormat.</param>
        /// <param name="showEachTaxInGroup">showEachTaxInGroup.</param>
        /// <param name="showGridHeader">showGridHeader.</param>
        /// <param name="showTaxCategory">showTaxCategory.</param>
        /// <param name="showVerticalGridLines">showVerticalGridLines.</param>
        /// <param name="userDefinedFields">userDefinedFields.</param>
        public QuoteTemplateModel(long? id = default(long?), bool? calculateTaxSeparately = default(bool?), DateTime? createDate = default(DateTime?), int? createdBy = default(int?), string currencyNegativeFormat = default(string), string currencyPositiveFormat = default(string), int? dateFormat = default(int?), string description = default(string), bool? displayTaxCategorySuperscripts = default(bool?), bool? isActive = default(bool?), int? lastActivityBy = default(int?), DateTime? lastActivityDate = default(DateTime?), string name = default(string), int? numberFormat = default(int?), int? pageLayout = default(int?), int? pageNumberFormat = default(int?), bool? showEachTaxInGroup = default(bool?), bool? showGridHeader = default(bool?), bool? showTaxCategory = default(bool?), bool? showVerticalGridLines = default(bool?), List<UserDefinedField> userDefinedFields = default(List<UserDefinedField>))
        {
            this.Id = id;
            this.CalculateTaxSeparately = calculateTaxSeparately;
            this.CreateDate = createDate;
            this.CreatedBy = createdBy;
            this.CurrencyNegativeFormat = currencyNegativeFormat;
            this.CurrencyPositiveFormat = currencyPositiveFormat;
            this.DateFormat = dateFormat;
            this.Description = description;
            this.DisplayTaxCategorySuperscripts = displayTaxCategorySuperscripts;
            this.IsActive = isActive;
            this.LastActivityBy = lastActivityBy;
            this.LastActivityDate = lastActivityDate;
            this.Name = name;
            this.NumberFormat = numberFormat;
            this.PageLayout = pageLayout;
            this.PageNumberFormat = pageNumberFormat;
            this.ShowEachTaxInGroup = showEachTaxInGroup;
            this.ShowGridHeader = showGridHeader;
            this.ShowTaxCategory = showTaxCategory;
            this.ShowVerticalGridLines = showVerticalGridLines;
            this.UserDefinedFields = userDefinedFields;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets CalculateTaxSeparately
        /// </summary>
        [DataMember(Name="calculateTaxSeparately", EmitDefaultValue=false)]
        public bool? CalculateTaxSeparately { get; set; }

        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [DataMember(Name="createDate", EmitDefaultValue=false)]
        public DateTime? CreateDate { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="createdBy", EmitDefaultValue=false)]
        public int? CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyNegativeFormat
        /// </summary>
        [DataMember(Name="currencyNegativeFormat", EmitDefaultValue=false)]
        public string CurrencyNegativeFormat { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyPositiveFormat
        /// </summary>
        [DataMember(Name="currencyPositiveFormat", EmitDefaultValue=false)]
        public string CurrencyPositiveFormat { get; set; }

        /// <summary>
        /// Gets or Sets DateFormat
        /// </summary>
        [DataMember(Name="dateFormat", EmitDefaultValue=false)]
        public int? DateFormat { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DisplayTaxCategorySuperscripts
        /// </summary>
        [DataMember(Name="displayTaxCategorySuperscripts", EmitDefaultValue=false)]
        public bool? DisplayTaxCategorySuperscripts { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="isActive", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets LastActivityBy
        /// </summary>
        [DataMember(Name="lastActivityBy", EmitDefaultValue=false)]
        public int? LastActivityBy { get; set; }

        /// <summary>
        /// Gets or Sets LastActivityDate
        /// </summary>
        [DataMember(Name="lastActivityDate", EmitDefaultValue=false)]
        public DateTime? LastActivityDate { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets NumberFormat
        /// </summary>
        [DataMember(Name="numberFormat", EmitDefaultValue=false)]
        public int? NumberFormat { get; set; }

        /// <summary>
        /// Gets or Sets PageLayout
        /// </summary>
        [DataMember(Name="pageLayout", EmitDefaultValue=false)]
        public int? PageLayout { get; set; }

        /// <summary>
        /// Gets or Sets PageNumberFormat
        /// </summary>
        [DataMember(Name="pageNumberFormat", EmitDefaultValue=false)]
        public int? PageNumberFormat { get; set; }

        /// <summary>
        /// Gets or Sets ShowEachTaxInGroup
        /// </summary>
        [DataMember(Name="showEachTaxInGroup", EmitDefaultValue=false)]
        public bool? ShowEachTaxInGroup { get; set; }

        /// <summary>
        /// Gets or Sets ShowGridHeader
        /// </summary>
        [DataMember(Name="showGridHeader", EmitDefaultValue=false)]
        public bool? ShowGridHeader { get; set; }

        /// <summary>
        /// Gets or Sets ShowTaxCategory
        /// </summary>
        [DataMember(Name="showTaxCategory", EmitDefaultValue=false)]
        public bool? ShowTaxCategory { get; set; }

        /// <summary>
        /// Gets or Sets ShowVerticalGridLines
        /// </summary>
        [DataMember(Name="showVerticalGridLines", EmitDefaultValue=false)]
        public bool? ShowVerticalGridLines { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields", EmitDefaultValue=false)]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QuoteTemplateModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CalculateTaxSeparately: ").Append(CalculateTaxSeparately).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CurrencyNegativeFormat: ").Append(CurrencyNegativeFormat).Append("\n");
            sb.Append("  CurrencyPositiveFormat: ").Append(CurrencyPositiveFormat).Append("\n");
            sb.Append("  DateFormat: ").Append(DateFormat).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayTaxCategorySuperscripts: ").Append(DisplayTaxCategorySuperscripts).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  LastActivityBy: ").Append(LastActivityBy).Append("\n");
            sb.Append("  LastActivityDate: ").Append(LastActivityDate).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NumberFormat: ").Append(NumberFormat).Append("\n");
            sb.Append("  PageLayout: ").Append(PageLayout).Append("\n");
            sb.Append("  PageNumberFormat: ").Append(PageNumberFormat).Append("\n");
            sb.Append("  ShowEachTaxInGroup: ").Append(ShowEachTaxInGroup).Append("\n");
            sb.Append("  ShowGridHeader: ").Append(ShowGridHeader).Append("\n");
            sb.Append("  ShowTaxCategory: ").Append(ShowTaxCategory).Append("\n");
            sb.Append("  ShowVerticalGridLines: ").Append(ShowVerticalGridLines).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QuoteTemplateModel);
        }

        /// <summary>
        /// Returns true if QuoteTemplateModel instances are equal
        /// </summary>
        /// <param name="input">Instance of QuoteTemplateModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuoteTemplateModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CalculateTaxSeparately == input.CalculateTaxSeparately ||
                    (this.CalculateTaxSeparately != null &&
                    this.CalculateTaxSeparately.Equals(input.CalculateTaxSeparately))
                ) && 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.CurrencyNegativeFormat == input.CurrencyNegativeFormat ||
                    (this.CurrencyNegativeFormat != null &&
                    this.CurrencyNegativeFormat.Equals(input.CurrencyNegativeFormat))
                ) && 
                (
                    this.CurrencyPositiveFormat == input.CurrencyPositiveFormat ||
                    (this.CurrencyPositiveFormat != null &&
                    this.CurrencyPositiveFormat.Equals(input.CurrencyPositiveFormat))
                ) && 
                (
                    this.DateFormat == input.DateFormat ||
                    (this.DateFormat != null &&
                    this.DateFormat.Equals(input.DateFormat))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DisplayTaxCategorySuperscripts == input.DisplayTaxCategorySuperscripts ||
                    (this.DisplayTaxCategorySuperscripts != null &&
                    this.DisplayTaxCategorySuperscripts.Equals(input.DisplayTaxCategorySuperscripts))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.LastActivityBy == input.LastActivityBy ||
                    (this.LastActivityBy != null &&
                    this.LastActivityBy.Equals(input.LastActivityBy))
                ) && 
                (
                    this.LastActivityDate == input.LastActivityDate ||
                    (this.LastActivityDate != null &&
                    this.LastActivityDate.Equals(input.LastActivityDate))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NumberFormat == input.NumberFormat ||
                    (this.NumberFormat != null &&
                    this.NumberFormat.Equals(input.NumberFormat))
                ) && 
                (
                    this.PageLayout == input.PageLayout ||
                    (this.PageLayout != null &&
                    this.PageLayout.Equals(input.PageLayout))
                ) && 
                (
                    this.PageNumberFormat == input.PageNumberFormat ||
                    (this.PageNumberFormat != null &&
                    this.PageNumberFormat.Equals(input.PageNumberFormat))
                ) && 
                (
                    this.ShowEachTaxInGroup == input.ShowEachTaxInGroup ||
                    (this.ShowEachTaxInGroup != null &&
                    this.ShowEachTaxInGroup.Equals(input.ShowEachTaxInGroup))
                ) && 
                (
                    this.ShowGridHeader == input.ShowGridHeader ||
                    (this.ShowGridHeader != null &&
                    this.ShowGridHeader.Equals(input.ShowGridHeader))
                ) && 
                (
                    this.ShowTaxCategory == input.ShowTaxCategory ||
                    (this.ShowTaxCategory != null &&
                    this.ShowTaxCategory.Equals(input.ShowTaxCategory))
                ) && 
                (
                    this.ShowVerticalGridLines == input.ShowVerticalGridLines ||
                    (this.ShowVerticalGridLines != null &&
                    this.ShowVerticalGridLines.Equals(input.ShowVerticalGridLines))
                ) && 
                (
                    this.UserDefinedFields == input.UserDefinedFields ||
                    this.UserDefinedFields != null &&
                    this.UserDefinedFields.SequenceEqual(input.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CalculateTaxSeparately != null)
                    hashCode = hashCode * 59 + this.CalculateTaxSeparately.GetHashCode();
                if (this.CreateDate != null)
                    hashCode = hashCode * 59 + this.CreateDate.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.CurrencyNegativeFormat != null)
                    hashCode = hashCode * 59 + this.CurrencyNegativeFormat.GetHashCode();
                if (this.CurrencyPositiveFormat != null)
                    hashCode = hashCode * 59 + this.CurrencyPositiveFormat.GetHashCode();
                if (this.DateFormat != null)
                    hashCode = hashCode * 59 + this.DateFormat.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DisplayTaxCategorySuperscripts != null)
                    hashCode = hashCode * 59 + this.DisplayTaxCategorySuperscripts.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.LastActivityBy != null)
                    hashCode = hashCode * 59 + this.LastActivityBy.GetHashCode();
                if (this.LastActivityDate != null)
                    hashCode = hashCode * 59 + this.LastActivityDate.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.NumberFormat != null)
                    hashCode = hashCode * 59 + this.NumberFormat.GetHashCode();
                if (this.PageLayout != null)
                    hashCode = hashCode * 59 + this.PageLayout.GetHashCode();
                if (this.PageNumberFormat != null)
                    hashCode = hashCode * 59 + this.PageNumberFormat.GetHashCode();
                if (this.ShowEachTaxInGroup != null)
                    hashCode = hashCode * 59 + this.ShowEachTaxInGroup.GetHashCode();
                if (this.ShowGridHeader != null)
                    hashCode = hashCode * 59 + this.ShowGridHeader.GetHashCode();
                if (this.ShowTaxCategory != null)
                    hashCode = hashCode * 59 + this.ShowTaxCategory.GetHashCode();
                if (this.ShowVerticalGridLines != null)
                    hashCode = hashCode * 59 + this.ShowVerticalGridLines.GetHashCode();
                if (this.UserDefinedFields != null)
                    hashCode = hashCode * 59 + this.UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
