/* 
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CompanyWebhookModel
    /// </summary>
    [DataContract]
    public partial class CompanyWebhookModel :  IEquatable<CompanyWebhookModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyWebhookModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="deactivationUrl">deactivationUrl.</param>
        /// <param name="isActive">isActive.</param>
        /// <param name="isReady">isReady.</param>
        /// <param name="isSubscribedToCreateEvents">isSubscribedToCreateEvents.</param>
        /// <param name="isSubscribedToDeleteEvents">isSubscribedToDeleteEvents.</param>
        /// <param name="isSubscribedToUpdateEvents">isSubscribedToUpdateEvents.</param>
        /// <param name="name">name.</param>
        /// <param name="notificationEmailAddress">notificationEmailAddress.</param>
        /// <param name="ownerResourceID">ownerResourceID.</param>
        /// <param name="secretKey">secretKey.</param>
        /// <param name="sendThresholdExceededNotification">sendThresholdExceededNotification.</param>
        /// <param name="webhookGUID">webhookGUID.</param>
        /// <param name="webhookUrl">webhookUrl.</param>
        /// <param name="userDefinedFields">userDefinedFields.</param>
        public CompanyWebhookModel(long? id = default(long?), string deactivationUrl = default(string), bool? isActive = default(bool?), bool? isReady = default(bool?), bool? isSubscribedToCreateEvents = default(bool?), bool? isSubscribedToDeleteEvents = default(bool?), bool? isSubscribedToUpdateEvents = default(bool?), string name = default(string), string notificationEmailAddress = default(string), int? ownerResourceID = default(int?), string secretKey = default(string), bool? sendThresholdExceededNotification = default(bool?), string webhookGUID = default(string), string webhookUrl = default(string), List<UserDefinedField> userDefinedFields = default(List<UserDefinedField>))
        {
            this.Id = id;
            this.DeactivationUrl = deactivationUrl;
            this.IsActive = isActive;
            this.IsReady = isReady;
            this.IsSubscribedToCreateEvents = isSubscribedToCreateEvents;
            this.IsSubscribedToDeleteEvents = isSubscribedToDeleteEvents;
            this.IsSubscribedToUpdateEvents = isSubscribedToUpdateEvents;
            this.Name = name;
            this.NotificationEmailAddress = notificationEmailAddress;
            this.OwnerResourceID = ownerResourceID;
            this.SecretKey = secretKey;
            this.SendThresholdExceededNotification = sendThresholdExceededNotification;
            this.WebhookGUID = webhookGUID;
            this.WebhookUrl = webhookUrl;
            this.UserDefinedFields = userDefinedFields;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets DeactivationUrl
        /// </summary>
        [DataMember(Name="deactivationUrl", EmitDefaultValue=false)]
        public string DeactivationUrl { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="isActive", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets IsReady
        /// </summary>
        [DataMember(Name="isReady", EmitDefaultValue=false)]
        public bool? IsReady { get; set; }

        /// <summary>
        /// Gets or Sets IsSubscribedToCreateEvents
        /// </summary>
        [DataMember(Name="isSubscribedToCreateEvents", EmitDefaultValue=false)]
        public bool? IsSubscribedToCreateEvents { get; set; }

        /// <summary>
        /// Gets or Sets IsSubscribedToDeleteEvents
        /// </summary>
        [DataMember(Name="isSubscribedToDeleteEvents", EmitDefaultValue=false)]
        public bool? IsSubscribedToDeleteEvents { get; set; }

        /// <summary>
        /// Gets or Sets IsSubscribedToUpdateEvents
        /// </summary>
        [DataMember(Name="isSubscribedToUpdateEvents", EmitDefaultValue=false)]
        public bool? IsSubscribedToUpdateEvents { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets NotificationEmailAddress
        /// </summary>
        [DataMember(Name="notificationEmailAddress", EmitDefaultValue=false)]
        public string NotificationEmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets OwnerResourceID
        /// </summary>
        [DataMember(Name="ownerResourceID", EmitDefaultValue=false)]
        public int? OwnerResourceID { get; set; }

        /// <summary>
        /// Gets or Sets SecretKey
        /// </summary>
        [DataMember(Name="secretKey", EmitDefaultValue=false)]
        public string SecretKey { get; set; }

        /// <summary>
        /// Gets or Sets SendThresholdExceededNotification
        /// </summary>
        [DataMember(Name="sendThresholdExceededNotification", EmitDefaultValue=false)]
        public bool? SendThresholdExceededNotification { get; set; }

        /// <summary>
        /// Gets or Sets WebhookGUID
        /// </summary>
        [DataMember(Name="webhookGUID", EmitDefaultValue=false)]
        public string WebhookGUID { get; set; }

        /// <summary>
        /// Gets or Sets WebhookUrl
        /// </summary>
        [DataMember(Name="webhookUrl", EmitDefaultValue=false)]
        public string WebhookUrl { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields", EmitDefaultValue=false)]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompanyWebhookModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DeactivationUrl: ").Append(DeactivationUrl).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsReady: ").Append(IsReady).Append("\n");
            sb.Append("  IsSubscribedToCreateEvents: ").Append(IsSubscribedToCreateEvents).Append("\n");
            sb.Append("  IsSubscribedToDeleteEvents: ").Append(IsSubscribedToDeleteEvents).Append("\n");
            sb.Append("  IsSubscribedToUpdateEvents: ").Append(IsSubscribedToUpdateEvents).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NotificationEmailAddress: ").Append(NotificationEmailAddress).Append("\n");
            sb.Append("  OwnerResourceID: ").Append(OwnerResourceID).Append("\n");
            sb.Append("  SecretKey: ").Append(SecretKey).Append("\n");
            sb.Append("  SendThresholdExceededNotification: ").Append(SendThresholdExceededNotification).Append("\n");
            sb.Append("  WebhookGUID: ").Append(WebhookGUID).Append("\n");
            sb.Append("  WebhookUrl: ").Append(WebhookUrl).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompanyWebhookModel);
        }

        /// <summary>
        /// Returns true if CompanyWebhookModel instances are equal
        /// </summary>
        /// <param name="input">Instance of CompanyWebhookModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompanyWebhookModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DeactivationUrl == input.DeactivationUrl ||
                    (this.DeactivationUrl != null &&
                    this.DeactivationUrl.Equals(input.DeactivationUrl))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.IsReady == input.IsReady ||
                    (this.IsReady != null &&
                    this.IsReady.Equals(input.IsReady))
                ) && 
                (
                    this.IsSubscribedToCreateEvents == input.IsSubscribedToCreateEvents ||
                    (this.IsSubscribedToCreateEvents != null &&
                    this.IsSubscribedToCreateEvents.Equals(input.IsSubscribedToCreateEvents))
                ) && 
                (
                    this.IsSubscribedToDeleteEvents == input.IsSubscribedToDeleteEvents ||
                    (this.IsSubscribedToDeleteEvents != null &&
                    this.IsSubscribedToDeleteEvents.Equals(input.IsSubscribedToDeleteEvents))
                ) && 
                (
                    this.IsSubscribedToUpdateEvents == input.IsSubscribedToUpdateEvents ||
                    (this.IsSubscribedToUpdateEvents != null &&
                    this.IsSubscribedToUpdateEvents.Equals(input.IsSubscribedToUpdateEvents))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NotificationEmailAddress == input.NotificationEmailAddress ||
                    (this.NotificationEmailAddress != null &&
                    this.NotificationEmailAddress.Equals(input.NotificationEmailAddress))
                ) && 
                (
                    this.OwnerResourceID == input.OwnerResourceID ||
                    (this.OwnerResourceID != null &&
                    this.OwnerResourceID.Equals(input.OwnerResourceID))
                ) && 
                (
                    this.SecretKey == input.SecretKey ||
                    (this.SecretKey != null &&
                    this.SecretKey.Equals(input.SecretKey))
                ) && 
                (
                    this.SendThresholdExceededNotification == input.SendThresholdExceededNotification ||
                    (this.SendThresholdExceededNotification != null &&
                    this.SendThresholdExceededNotification.Equals(input.SendThresholdExceededNotification))
                ) && 
                (
                    this.WebhookGUID == input.WebhookGUID ||
                    (this.WebhookGUID != null &&
                    this.WebhookGUID.Equals(input.WebhookGUID))
                ) && 
                (
                    this.WebhookUrl == input.WebhookUrl ||
                    (this.WebhookUrl != null &&
                    this.WebhookUrl.Equals(input.WebhookUrl))
                ) && 
                (
                    this.UserDefinedFields == input.UserDefinedFields ||
                    this.UserDefinedFields != null &&
                    this.UserDefinedFields.SequenceEqual(input.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DeactivationUrl != null)
                    hashCode = hashCode * 59 + this.DeactivationUrl.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.IsReady != null)
                    hashCode = hashCode * 59 + this.IsReady.GetHashCode();
                if (this.IsSubscribedToCreateEvents != null)
                    hashCode = hashCode * 59 + this.IsSubscribedToCreateEvents.GetHashCode();
                if (this.IsSubscribedToDeleteEvents != null)
                    hashCode = hashCode * 59 + this.IsSubscribedToDeleteEvents.GetHashCode();
                if (this.IsSubscribedToUpdateEvents != null)
                    hashCode = hashCode * 59 + this.IsSubscribedToUpdateEvents.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.NotificationEmailAddress != null)
                    hashCode = hashCode * 59 + this.NotificationEmailAddress.GetHashCode();
                if (this.OwnerResourceID != null)
                    hashCode = hashCode * 59 + this.OwnerResourceID.GetHashCode();
                if (this.SecretKey != null)
                    hashCode = hashCode * 59 + this.SecretKey.GetHashCode();
                if (this.SendThresholdExceededNotification != null)
                    hashCode = hashCode * 59 + this.SendThresholdExceededNotification.GetHashCode();
                if (this.WebhookGUID != null)
                    hashCode = hashCode * 59 + this.WebhookGUID.GetHashCode();
                if (this.WebhookUrl != null)
                    hashCode = hashCode * 59 + this.WebhookUrl.GetHashCode();
                if (this.UserDefinedFields != null)
                    hashCode = hashCode * 59 + this.UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
