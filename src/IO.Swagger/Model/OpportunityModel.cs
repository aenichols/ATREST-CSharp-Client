/* 
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// OpportunityModel
    /// </summary>
    [DataContract]
    public partial class OpportunityModel :  IEquatable<OpportunityModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OpportunityModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="advancedField1">advancedField1.</param>
        /// <param name="advancedField2">advancedField2.</param>
        /// <param name="advancedField3">advancedField3.</param>
        /// <param name="advancedField4">advancedField4.</param>
        /// <param name="advancedField5">advancedField5.</param>
        /// <param name="amount">amount.</param>
        /// <param name="assessmentScore">assessmentScore.</param>
        /// <param name="barriers">barriers.</param>
        /// <param name="closedDate">closedDate.</param>
        /// <param name="companyID">companyID.</param>
        /// <param name="contactID">contactID.</param>
        /// <param name="cost">cost.</param>
        /// <param name="createDate">createDate.</param>
        /// <param name="creatorResourceID">creatorResourceID.</param>
        /// <param name="description">description.</param>
        /// <param name="helpNeeded">helpNeeded.</param>
        /// <param name="impersonatorCreatorResourceID">impersonatorCreatorResourceID.</param>
        /// <param name="lastActivity">lastActivity.</param>
        /// <param name="leadSource">leadSource.</param>
        /// <param name="lossReason">lossReason.</param>
        /// <param name="lossReasonDetail">lossReasonDetail.</param>
        /// <param name="lostDate">lostDate.</param>
        /// <param name="market">market.</param>
        /// <param name="monthlyCost">monthlyCost.</param>
        /// <param name="monthlyRevenue">monthlyRevenue.</param>
        /// <param name="nextStep">nextStep.</param>
        /// <param name="onetimeCost">onetimeCost.</param>
        /// <param name="onetimeRevenue">onetimeRevenue.</param>
        /// <param name="opportunityCategoryID">opportunityCategoryID.</param>
        /// <param name="organizationalLevelAssociationID">organizationalLevelAssociationID.</param>
        /// <param name="ownerResourceID">ownerResourceID.</param>
        /// <param name="primaryCompetitor">primaryCompetitor.</param>
        /// <param name="probability">probability.</param>
        /// <param name="productID">productID.</param>
        /// <param name="projectedCloseDate">projectedCloseDate.</param>
        /// <param name="promisedFulfillmentDate">promisedFulfillmentDate.</param>
        /// <param name="promotionName">promotionName.</param>
        /// <param name="quarterlyCost">quarterlyCost.</param>
        /// <param name="quarterlyRevenue">quarterlyRevenue.</param>
        /// <param name="rating">rating.</param>
        /// <param name="relationshipAssessmentScore">relationshipAssessmentScore.</param>
        /// <param name="revenueSpread">revenueSpread.</param>
        /// <param name="revenueSpreadUnit">revenueSpreadUnit.</param>
        /// <param name="salesOrderID">salesOrderID.</param>
        /// <param name="salesProcessPercentComplete">salesProcessPercentComplete.</param>
        /// <param name="semiannualCost">semiannualCost.</param>
        /// <param name="semiannualRevenue">semiannualRevenue.</param>
        /// <param name="stage">stage.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="status">status.</param>
        /// <param name="technicalAssessmentScore">technicalAssessmentScore.</param>
        /// <param name="throughDate">throughDate.</param>
        /// <param name="title">title.</param>
        /// <param name="totalAmountMonths">totalAmountMonths.</param>
        /// <param name="useQuoteTotals">useQuoteTotals.</param>
        /// <param name="winReason">winReason.</param>
        /// <param name="winReasonDetail">winReasonDetail.</param>
        /// <param name="yearlyCost">yearlyCost.</param>
        /// <param name="yearlyRevenue">yearlyRevenue.</param>
        /// <param name="userDefinedFields">userDefinedFields.</param>
        public OpportunityModel(long? id = default(long?), double? advancedField1 = default(double?), double? advancedField2 = default(double?), double? advancedField3 = default(double?), double? advancedField4 = default(double?), double? advancedField5 = default(double?), double? amount = default(double?), double? assessmentScore = default(double?), string barriers = default(string), DateTime? closedDate = default(DateTime?), int? companyID = default(int?), int? contactID = default(int?), double? cost = default(double?), DateTime? createDate = default(DateTime?), int? creatorResourceID = default(int?), string description = default(string), string helpNeeded = default(string), int? impersonatorCreatorResourceID = default(int?), DateTime? lastActivity = default(DateTime?), int? leadSource = default(int?), int? lossReason = default(int?), string lossReasonDetail = default(string), DateTime? lostDate = default(DateTime?), string market = default(string), double? monthlyCost = default(double?), double? monthlyRevenue = default(double?), string nextStep = default(string), double? onetimeCost = default(double?), double? onetimeRevenue = default(double?), int? opportunityCategoryID = default(int?), int? organizationalLevelAssociationID = default(int?), int? ownerResourceID = default(int?), int? primaryCompetitor = default(int?), int? probability = default(int?), int? productID = default(int?), DateTime? projectedCloseDate = default(DateTime?), DateTime? promisedFulfillmentDate = default(DateTime?), string promotionName = default(string), double? quarterlyCost = default(double?), double? quarterlyRevenue = default(double?), int? rating = default(int?), double? relationshipAssessmentScore = default(double?), int? revenueSpread = default(int?), string revenueSpreadUnit = default(string), int? salesOrderID = default(int?), double? salesProcessPercentComplete = default(double?), double? semiannualCost = default(double?), double? semiannualRevenue = default(double?), int? stage = default(int?), DateTime? startDate = default(DateTime?), int? status = default(int?), double? technicalAssessmentScore = default(double?), DateTime? throughDate = default(DateTime?), string title = default(string), int? totalAmountMonths = default(int?), bool? useQuoteTotals = default(bool?), int? winReason = default(int?), string winReasonDetail = default(string), double? yearlyCost = default(double?), double? yearlyRevenue = default(double?), List<UserDefinedField> userDefinedFields = default(List<UserDefinedField>))
        {
            this.Id = id;
            this.AdvancedField1 = advancedField1;
            this.AdvancedField2 = advancedField2;
            this.AdvancedField3 = advancedField3;
            this.AdvancedField4 = advancedField4;
            this.AdvancedField5 = advancedField5;
            this.Amount = amount;
            this.AssessmentScore = assessmentScore;
            this.Barriers = barriers;
            this.ClosedDate = closedDate;
            this.CompanyID = companyID;
            this.ContactID = contactID;
            this.Cost = cost;
            this.CreateDate = createDate;
            this.CreatorResourceID = creatorResourceID;
            this.Description = description;
            this.HelpNeeded = helpNeeded;
            this.ImpersonatorCreatorResourceID = impersonatorCreatorResourceID;
            this.LastActivity = lastActivity;
            this.LeadSource = leadSource;
            this.LossReason = lossReason;
            this.LossReasonDetail = lossReasonDetail;
            this.LostDate = lostDate;
            this.Market = market;
            this.MonthlyCost = monthlyCost;
            this.MonthlyRevenue = monthlyRevenue;
            this.NextStep = nextStep;
            this.OnetimeCost = onetimeCost;
            this.OnetimeRevenue = onetimeRevenue;
            this.OpportunityCategoryID = opportunityCategoryID;
            this.OrganizationalLevelAssociationID = organizationalLevelAssociationID;
            this.OwnerResourceID = ownerResourceID;
            this.PrimaryCompetitor = primaryCompetitor;
            this.Probability = probability;
            this.ProductID = productID;
            this.ProjectedCloseDate = projectedCloseDate;
            this.PromisedFulfillmentDate = promisedFulfillmentDate;
            this.PromotionName = promotionName;
            this.QuarterlyCost = quarterlyCost;
            this.QuarterlyRevenue = quarterlyRevenue;
            this.Rating = rating;
            this.RelationshipAssessmentScore = relationshipAssessmentScore;
            this.RevenueSpread = revenueSpread;
            this.RevenueSpreadUnit = revenueSpreadUnit;
            this.SalesOrderID = salesOrderID;
            this.SalesProcessPercentComplete = salesProcessPercentComplete;
            this.SemiannualCost = semiannualCost;
            this.SemiannualRevenue = semiannualRevenue;
            this.Stage = stage;
            this.StartDate = startDate;
            this.Status = status;
            this.TechnicalAssessmentScore = technicalAssessmentScore;
            this.ThroughDate = throughDate;
            this.Title = title;
            this.TotalAmountMonths = totalAmountMonths;
            this.UseQuoteTotals = useQuoteTotals;
            this.WinReason = winReason;
            this.WinReasonDetail = winReasonDetail;
            this.YearlyCost = yearlyCost;
            this.YearlyRevenue = yearlyRevenue;
            this.UserDefinedFields = userDefinedFields;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets AdvancedField1
        /// </summary>
        [DataMember(Name="advancedField1", EmitDefaultValue=false)]
        public double? AdvancedField1 { get; set; }

        /// <summary>
        /// Gets or Sets AdvancedField2
        /// </summary>
        [DataMember(Name="advancedField2", EmitDefaultValue=false)]
        public double? AdvancedField2 { get; set; }

        /// <summary>
        /// Gets or Sets AdvancedField3
        /// </summary>
        [DataMember(Name="advancedField3", EmitDefaultValue=false)]
        public double? AdvancedField3 { get; set; }

        /// <summary>
        /// Gets or Sets AdvancedField4
        /// </summary>
        [DataMember(Name="advancedField4", EmitDefaultValue=false)]
        public double? AdvancedField4 { get; set; }

        /// <summary>
        /// Gets or Sets AdvancedField5
        /// </summary>
        [DataMember(Name="advancedField5", EmitDefaultValue=false)]
        public double? AdvancedField5 { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public double? Amount { get; set; }

        /// <summary>
        /// Gets or Sets AssessmentScore
        /// </summary>
        [DataMember(Name="assessmentScore", EmitDefaultValue=false)]
        public double? AssessmentScore { get; set; }

        /// <summary>
        /// Gets or Sets Barriers
        /// </summary>
        [DataMember(Name="barriers", EmitDefaultValue=false)]
        public string Barriers { get; set; }

        /// <summary>
        /// Gets or Sets ClosedDate
        /// </summary>
        [DataMember(Name="closedDate", EmitDefaultValue=false)]
        public DateTime? ClosedDate { get; set; }

        /// <summary>
        /// Gets or Sets CompanyID
        /// </summary>
        [DataMember(Name="companyID", EmitDefaultValue=false)]
        public int? CompanyID { get; set; }

        /// <summary>
        /// Gets or Sets ContactID
        /// </summary>
        [DataMember(Name="contactID", EmitDefaultValue=false)]
        public int? ContactID { get; set; }

        /// <summary>
        /// Gets or Sets Cost
        /// </summary>
        [DataMember(Name="cost", EmitDefaultValue=false)]
        public double? Cost { get; set; }

        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [DataMember(Name="createDate", EmitDefaultValue=false)]
        public DateTime? CreateDate { get; set; }

        /// <summary>
        /// Gets or Sets CreatorResourceID
        /// </summary>
        [DataMember(Name="creatorResourceID", EmitDefaultValue=false)]
        public int? CreatorResourceID { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets HelpNeeded
        /// </summary>
        [DataMember(Name="helpNeeded", EmitDefaultValue=false)]
        public string HelpNeeded { get; set; }

        /// <summary>
        /// Gets or Sets ImpersonatorCreatorResourceID
        /// </summary>
        [DataMember(Name="impersonatorCreatorResourceID", EmitDefaultValue=false)]
        public int? ImpersonatorCreatorResourceID { get; set; }

        /// <summary>
        /// Gets or Sets LastActivity
        /// </summary>
        [DataMember(Name="lastActivity", EmitDefaultValue=false)]
        public DateTime? LastActivity { get; set; }

        /// <summary>
        /// Gets or Sets LeadSource
        /// </summary>
        [DataMember(Name="leadSource", EmitDefaultValue=false)]
        public int? LeadSource { get; set; }

        /// <summary>
        /// Gets or Sets LossReason
        /// </summary>
        [DataMember(Name="lossReason", EmitDefaultValue=false)]
        public int? LossReason { get; set; }

        /// <summary>
        /// Gets or Sets LossReasonDetail
        /// </summary>
        [DataMember(Name="lossReasonDetail", EmitDefaultValue=false)]
        public string LossReasonDetail { get; set; }

        /// <summary>
        /// Gets or Sets LostDate
        /// </summary>
        [DataMember(Name="lostDate", EmitDefaultValue=false)]
        public DateTime? LostDate { get; set; }

        /// <summary>
        /// Gets or Sets Market
        /// </summary>
        [DataMember(Name="market", EmitDefaultValue=false)]
        public string Market { get; set; }

        /// <summary>
        /// Gets or Sets MonthlyCost
        /// </summary>
        [DataMember(Name="monthlyCost", EmitDefaultValue=false)]
        public double? MonthlyCost { get; set; }

        /// <summary>
        /// Gets or Sets MonthlyRevenue
        /// </summary>
        [DataMember(Name="monthlyRevenue", EmitDefaultValue=false)]
        public double? MonthlyRevenue { get; set; }

        /// <summary>
        /// Gets or Sets NextStep
        /// </summary>
        [DataMember(Name="nextStep", EmitDefaultValue=false)]
        public string NextStep { get; set; }

        /// <summary>
        /// Gets or Sets OnetimeCost
        /// </summary>
        [DataMember(Name="onetimeCost", EmitDefaultValue=false)]
        public double? OnetimeCost { get; set; }

        /// <summary>
        /// Gets or Sets OnetimeRevenue
        /// </summary>
        [DataMember(Name="onetimeRevenue", EmitDefaultValue=false)]
        public double? OnetimeRevenue { get; set; }

        /// <summary>
        /// Gets or Sets OpportunityCategoryID
        /// </summary>
        [DataMember(Name="opportunityCategoryID", EmitDefaultValue=false)]
        public int? OpportunityCategoryID { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationalLevelAssociationID
        /// </summary>
        [DataMember(Name="organizationalLevelAssociationID", EmitDefaultValue=false)]
        public int? OrganizationalLevelAssociationID { get; set; }

        /// <summary>
        /// Gets or Sets OwnerResourceID
        /// </summary>
        [DataMember(Name="ownerResourceID", EmitDefaultValue=false)]
        public int? OwnerResourceID { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryCompetitor
        /// </summary>
        [DataMember(Name="primaryCompetitor", EmitDefaultValue=false)]
        public int? PrimaryCompetitor { get; set; }

        /// <summary>
        /// Gets or Sets Probability
        /// </summary>
        [DataMember(Name="probability", EmitDefaultValue=false)]
        public int? Probability { get; set; }

        /// <summary>
        /// Gets or Sets ProductID
        /// </summary>
        [DataMember(Name="productID", EmitDefaultValue=false)]
        public int? ProductID { get; set; }

        /// <summary>
        /// Gets or Sets ProjectedCloseDate
        /// </summary>
        [DataMember(Name="projectedCloseDate", EmitDefaultValue=false)]
        public DateTime? ProjectedCloseDate { get; set; }

        /// <summary>
        /// Gets or Sets PromisedFulfillmentDate
        /// </summary>
        [DataMember(Name="promisedFulfillmentDate", EmitDefaultValue=false)]
        public DateTime? PromisedFulfillmentDate { get; set; }

        /// <summary>
        /// Gets or Sets PromotionName
        /// </summary>
        [DataMember(Name="promotionName", EmitDefaultValue=false)]
        public string PromotionName { get; set; }

        /// <summary>
        /// Gets or Sets QuarterlyCost
        /// </summary>
        [DataMember(Name="quarterlyCost", EmitDefaultValue=false)]
        public double? QuarterlyCost { get; set; }

        /// <summary>
        /// Gets or Sets QuarterlyRevenue
        /// </summary>
        [DataMember(Name="quarterlyRevenue", EmitDefaultValue=false)]
        public double? QuarterlyRevenue { get; set; }

        /// <summary>
        /// Gets or Sets Rating
        /// </summary>
        [DataMember(Name="rating", EmitDefaultValue=false)]
        public int? Rating { get; set; }

        /// <summary>
        /// Gets or Sets RelationshipAssessmentScore
        /// </summary>
        [DataMember(Name="relationshipAssessmentScore", EmitDefaultValue=false)]
        public double? RelationshipAssessmentScore { get; set; }

        /// <summary>
        /// Gets or Sets RevenueSpread
        /// </summary>
        [DataMember(Name="revenueSpread", EmitDefaultValue=false)]
        public int? RevenueSpread { get; set; }

        /// <summary>
        /// Gets or Sets RevenueSpreadUnit
        /// </summary>
        [DataMember(Name="revenueSpreadUnit", EmitDefaultValue=false)]
        public string RevenueSpreadUnit { get; set; }

        /// <summary>
        /// Gets or Sets SalesOrderID
        /// </summary>
        [DataMember(Name="salesOrderID", EmitDefaultValue=false)]
        public int? SalesOrderID { get; set; }

        /// <summary>
        /// Gets or Sets SalesProcessPercentComplete
        /// </summary>
        [DataMember(Name="salesProcessPercentComplete", EmitDefaultValue=false)]
        public double? SalesProcessPercentComplete { get; set; }

        /// <summary>
        /// Gets or Sets SemiannualCost
        /// </summary>
        [DataMember(Name="semiannualCost", EmitDefaultValue=false)]
        public double? SemiannualCost { get; set; }

        /// <summary>
        /// Gets or Sets SemiannualRevenue
        /// </summary>
        [DataMember(Name="semiannualRevenue", EmitDefaultValue=false)]
        public double? SemiannualRevenue { get; set; }

        /// <summary>
        /// Gets or Sets Stage
        /// </summary>
        [DataMember(Name="stage", EmitDefaultValue=false)]
        public int? Stage { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public int? Status { get; set; }

        /// <summary>
        /// Gets or Sets TechnicalAssessmentScore
        /// </summary>
        [DataMember(Name="technicalAssessmentScore", EmitDefaultValue=false)]
        public double? TechnicalAssessmentScore { get; set; }

        /// <summary>
        /// Gets or Sets ThroughDate
        /// </summary>
        [DataMember(Name="throughDate", EmitDefaultValue=false)]
        public DateTime? ThroughDate { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets TotalAmountMonths
        /// </summary>
        [DataMember(Name="totalAmountMonths", EmitDefaultValue=false)]
        public int? TotalAmountMonths { get; set; }

        /// <summary>
        /// Gets or Sets UseQuoteTotals
        /// </summary>
        [DataMember(Name="useQuoteTotals", EmitDefaultValue=false)]
        public bool? UseQuoteTotals { get; set; }

        /// <summary>
        /// Gets or Sets WinReason
        /// </summary>
        [DataMember(Name="winReason", EmitDefaultValue=false)]
        public int? WinReason { get; set; }

        /// <summary>
        /// Gets or Sets WinReasonDetail
        /// </summary>
        [DataMember(Name="winReasonDetail", EmitDefaultValue=false)]
        public string WinReasonDetail { get; set; }

        /// <summary>
        /// Gets or Sets YearlyCost
        /// </summary>
        [DataMember(Name="yearlyCost", EmitDefaultValue=false)]
        public double? YearlyCost { get; set; }

        /// <summary>
        /// Gets or Sets YearlyRevenue
        /// </summary>
        [DataMember(Name="yearlyRevenue", EmitDefaultValue=false)]
        public double? YearlyRevenue { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields", EmitDefaultValue=false)]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OpportunityModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AdvancedField1: ").Append(AdvancedField1).Append("\n");
            sb.Append("  AdvancedField2: ").Append(AdvancedField2).Append("\n");
            sb.Append("  AdvancedField3: ").Append(AdvancedField3).Append("\n");
            sb.Append("  AdvancedField4: ").Append(AdvancedField4).Append("\n");
            sb.Append("  AdvancedField5: ").Append(AdvancedField5).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  AssessmentScore: ").Append(AssessmentScore).Append("\n");
            sb.Append("  Barriers: ").Append(Barriers).Append("\n");
            sb.Append("  ClosedDate: ").Append(ClosedDate).Append("\n");
            sb.Append("  CompanyID: ").Append(CompanyID).Append("\n");
            sb.Append("  ContactID: ").Append(ContactID).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  CreatorResourceID: ").Append(CreatorResourceID).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  HelpNeeded: ").Append(HelpNeeded).Append("\n");
            sb.Append("  ImpersonatorCreatorResourceID: ").Append(ImpersonatorCreatorResourceID).Append("\n");
            sb.Append("  LastActivity: ").Append(LastActivity).Append("\n");
            sb.Append("  LeadSource: ").Append(LeadSource).Append("\n");
            sb.Append("  LossReason: ").Append(LossReason).Append("\n");
            sb.Append("  LossReasonDetail: ").Append(LossReasonDetail).Append("\n");
            sb.Append("  LostDate: ").Append(LostDate).Append("\n");
            sb.Append("  Market: ").Append(Market).Append("\n");
            sb.Append("  MonthlyCost: ").Append(MonthlyCost).Append("\n");
            sb.Append("  MonthlyRevenue: ").Append(MonthlyRevenue).Append("\n");
            sb.Append("  NextStep: ").Append(NextStep).Append("\n");
            sb.Append("  OnetimeCost: ").Append(OnetimeCost).Append("\n");
            sb.Append("  OnetimeRevenue: ").Append(OnetimeRevenue).Append("\n");
            sb.Append("  OpportunityCategoryID: ").Append(OpportunityCategoryID).Append("\n");
            sb.Append("  OrganizationalLevelAssociationID: ").Append(OrganizationalLevelAssociationID).Append("\n");
            sb.Append("  OwnerResourceID: ").Append(OwnerResourceID).Append("\n");
            sb.Append("  PrimaryCompetitor: ").Append(PrimaryCompetitor).Append("\n");
            sb.Append("  Probability: ").Append(Probability).Append("\n");
            sb.Append("  ProductID: ").Append(ProductID).Append("\n");
            sb.Append("  ProjectedCloseDate: ").Append(ProjectedCloseDate).Append("\n");
            sb.Append("  PromisedFulfillmentDate: ").Append(PromisedFulfillmentDate).Append("\n");
            sb.Append("  PromotionName: ").Append(PromotionName).Append("\n");
            sb.Append("  QuarterlyCost: ").Append(QuarterlyCost).Append("\n");
            sb.Append("  QuarterlyRevenue: ").Append(QuarterlyRevenue).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  RelationshipAssessmentScore: ").Append(RelationshipAssessmentScore).Append("\n");
            sb.Append("  RevenueSpread: ").Append(RevenueSpread).Append("\n");
            sb.Append("  RevenueSpreadUnit: ").Append(RevenueSpreadUnit).Append("\n");
            sb.Append("  SalesOrderID: ").Append(SalesOrderID).Append("\n");
            sb.Append("  SalesProcessPercentComplete: ").Append(SalesProcessPercentComplete).Append("\n");
            sb.Append("  SemiannualCost: ").Append(SemiannualCost).Append("\n");
            sb.Append("  SemiannualRevenue: ").Append(SemiannualRevenue).Append("\n");
            sb.Append("  Stage: ").Append(Stage).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TechnicalAssessmentScore: ").Append(TechnicalAssessmentScore).Append("\n");
            sb.Append("  ThroughDate: ").Append(ThroughDate).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  TotalAmountMonths: ").Append(TotalAmountMonths).Append("\n");
            sb.Append("  UseQuoteTotals: ").Append(UseQuoteTotals).Append("\n");
            sb.Append("  WinReason: ").Append(WinReason).Append("\n");
            sb.Append("  WinReasonDetail: ").Append(WinReasonDetail).Append("\n");
            sb.Append("  YearlyCost: ").Append(YearlyCost).Append("\n");
            sb.Append("  YearlyRevenue: ").Append(YearlyRevenue).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OpportunityModel);
        }

        /// <summary>
        /// Returns true if OpportunityModel instances are equal
        /// </summary>
        /// <param name="input">Instance of OpportunityModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OpportunityModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.AdvancedField1 == input.AdvancedField1 ||
                    (this.AdvancedField1 != null &&
                    this.AdvancedField1.Equals(input.AdvancedField1))
                ) && 
                (
                    this.AdvancedField2 == input.AdvancedField2 ||
                    (this.AdvancedField2 != null &&
                    this.AdvancedField2.Equals(input.AdvancedField2))
                ) && 
                (
                    this.AdvancedField3 == input.AdvancedField3 ||
                    (this.AdvancedField3 != null &&
                    this.AdvancedField3.Equals(input.AdvancedField3))
                ) && 
                (
                    this.AdvancedField4 == input.AdvancedField4 ||
                    (this.AdvancedField4 != null &&
                    this.AdvancedField4.Equals(input.AdvancedField4))
                ) && 
                (
                    this.AdvancedField5 == input.AdvancedField5 ||
                    (this.AdvancedField5 != null &&
                    this.AdvancedField5.Equals(input.AdvancedField5))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.AssessmentScore == input.AssessmentScore ||
                    (this.AssessmentScore != null &&
                    this.AssessmentScore.Equals(input.AssessmentScore))
                ) && 
                (
                    this.Barriers == input.Barriers ||
                    (this.Barriers != null &&
                    this.Barriers.Equals(input.Barriers))
                ) && 
                (
                    this.ClosedDate == input.ClosedDate ||
                    (this.ClosedDate != null &&
                    this.ClosedDate.Equals(input.ClosedDate))
                ) && 
                (
                    this.CompanyID == input.CompanyID ||
                    (this.CompanyID != null &&
                    this.CompanyID.Equals(input.CompanyID))
                ) && 
                (
                    this.ContactID == input.ContactID ||
                    (this.ContactID != null &&
                    this.ContactID.Equals(input.ContactID))
                ) && 
                (
                    this.Cost == input.Cost ||
                    (this.Cost != null &&
                    this.Cost.Equals(input.Cost))
                ) && 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) && 
                (
                    this.CreatorResourceID == input.CreatorResourceID ||
                    (this.CreatorResourceID != null &&
                    this.CreatorResourceID.Equals(input.CreatorResourceID))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.HelpNeeded == input.HelpNeeded ||
                    (this.HelpNeeded != null &&
                    this.HelpNeeded.Equals(input.HelpNeeded))
                ) && 
                (
                    this.ImpersonatorCreatorResourceID == input.ImpersonatorCreatorResourceID ||
                    (this.ImpersonatorCreatorResourceID != null &&
                    this.ImpersonatorCreatorResourceID.Equals(input.ImpersonatorCreatorResourceID))
                ) && 
                (
                    this.LastActivity == input.LastActivity ||
                    (this.LastActivity != null &&
                    this.LastActivity.Equals(input.LastActivity))
                ) && 
                (
                    this.LeadSource == input.LeadSource ||
                    (this.LeadSource != null &&
                    this.LeadSource.Equals(input.LeadSource))
                ) && 
                (
                    this.LossReason == input.LossReason ||
                    (this.LossReason != null &&
                    this.LossReason.Equals(input.LossReason))
                ) && 
                (
                    this.LossReasonDetail == input.LossReasonDetail ||
                    (this.LossReasonDetail != null &&
                    this.LossReasonDetail.Equals(input.LossReasonDetail))
                ) && 
                (
                    this.LostDate == input.LostDate ||
                    (this.LostDate != null &&
                    this.LostDate.Equals(input.LostDate))
                ) && 
                (
                    this.Market == input.Market ||
                    (this.Market != null &&
                    this.Market.Equals(input.Market))
                ) && 
                (
                    this.MonthlyCost == input.MonthlyCost ||
                    (this.MonthlyCost != null &&
                    this.MonthlyCost.Equals(input.MonthlyCost))
                ) && 
                (
                    this.MonthlyRevenue == input.MonthlyRevenue ||
                    (this.MonthlyRevenue != null &&
                    this.MonthlyRevenue.Equals(input.MonthlyRevenue))
                ) && 
                (
                    this.NextStep == input.NextStep ||
                    (this.NextStep != null &&
                    this.NextStep.Equals(input.NextStep))
                ) && 
                (
                    this.OnetimeCost == input.OnetimeCost ||
                    (this.OnetimeCost != null &&
                    this.OnetimeCost.Equals(input.OnetimeCost))
                ) && 
                (
                    this.OnetimeRevenue == input.OnetimeRevenue ||
                    (this.OnetimeRevenue != null &&
                    this.OnetimeRevenue.Equals(input.OnetimeRevenue))
                ) && 
                (
                    this.OpportunityCategoryID == input.OpportunityCategoryID ||
                    (this.OpportunityCategoryID != null &&
                    this.OpportunityCategoryID.Equals(input.OpportunityCategoryID))
                ) && 
                (
                    this.OrganizationalLevelAssociationID == input.OrganizationalLevelAssociationID ||
                    (this.OrganizationalLevelAssociationID != null &&
                    this.OrganizationalLevelAssociationID.Equals(input.OrganizationalLevelAssociationID))
                ) && 
                (
                    this.OwnerResourceID == input.OwnerResourceID ||
                    (this.OwnerResourceID != null &&
                    this.OwnerResourceID.Equals(input.OwnerResourceID))
                ) && 
                (
                    this.PrimaryCompetitor == input.PrimaryCompetitor ||
                    (this.PrimaryCompetitor != null &&
                    this.PrimaryCompetitor.Equals(input.PrimaryCompetitor))
                ) && 
                (
                    this.Probability == input.Probability ||
                    (this.Probability != null &&
                    this.Probability.Equals(input.Probability))
                ) && 
                (
                    this.ProductID == input.ProductID ||
                    (this.ProductID != null &&
                    this.ProductID.Equals(input.ProductID))
                ) && 
                (
                    this.ProjectedCloseDate == input.ProjectedCloseDate ||
                    (this.ProjectedCloseDate != null &&
                    this.ProjectedCloseDate.Equals(input.ProjectedCloseDate))
                ) && 
                (
                    this.PromisedFulfillmentDate == input.PromisedFulfillmentDate ||
                    (this.PromisedFulfillmentDate != null &&
                    this.PromisedFulfillmentDate.Equals(input.PromisedFulfillmentDate))
                ) && 
                (
                    this.PromotionName == input.PromotionName ||
                    (this.PromotionName != null &&
                    this.PromotionName.Equals(input.PromotionName))
                ) && 
                (
                    this.QuarterlyCost == input.QuarterlyCost ||
                    (this.QuarterlyCost != null &&
                    this.QuarterlyCost.Equals(input.QuarterlyCost))
                ) && 
                (
                    this.QuarterlyRevenue == input.QuarterlyRevenue ||
                    (this.QuarterlyRevenue != null &&
                    this.QuarterlyRevenue.Equals(input.QuarterlyRevenue))
                ) && 
                (
                    this.Rating == input.Rating ||
                    (this.Rating != null &&
                    this.Rating.Equals(input.Rating))
                ) && 
                (
                    this.RelationshipAssessmentScore == input.RelationshipAssessmentScore ||
                    (this.RelationshipAssessmentScore != null &&
                    this.RelationshipAssessmentScore.Equals(input.RelationshipAssessmentScore))
                ) && 
                (
                    this.RevenueSpread == input.RevenueSpread ||
                    (this.RevenueSpread != null &&
                    this.RevenueSpread.Equals(input.RevenueSpread))
                ) && 
                (
                    this.RevenueSpreadUnit == input.RevenueSpreadUnit ||
                    (this.RevenueSpreadUnit != null &&
                    this.RevenueSpreadUnit.Equals(input.RevenueSpreadUnit))
                ) && 
                (
                    this.SalesOrderID == input.SalesOrderID ||
                    (this.SalesOrderID != null &&
                    this.SalesOrderID.Equals(input.SalesOrderID))
                ) && 
                (
                    this.SalesProcessPercentComplete == input.SalesProcessPercentComplete ||
                    (this.SalesProcessPercentComplete != null &&
                    this.SalesProcessPercentComplete.Equals(input.SalesProcessPercentComplete))
                ) && 
                (
                    this.SemiannualCost == input.SemiannualCost ||
                    (this.SemiannualCost != null &&
                    this.SemiannualCost.Equals(input.SemiannualCost))
                ) && 
                (
                    this.SemiannualRevenue == input.SemiannualRevenue ||
                    (this.SemiannualRevenue != null &&
                    this.SemiannualRevenue.Equals(input.SemiannualRevenue))
                ) && 
                (
                    this.Stage == input.Stage ||
                    (this.Stage != null &&
                    this.Stage.Equals(input.Stage))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.TechnicalAssessmentScore == input.TechnicalAssessmentScore ||
                    (this.TechnicalAssessmentScore != null &&
                    this.TechnicalAssessmentScore.Equals(input.TechnicalAssessmentScore))
                ) && 
                (
                    this.ThroughDate == input.ThroughDate ||
                    (this.ThroughDate != null &&
                    this.ThroughDate.Equals(input.ThroughDate))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.TotalAmountMonths == input.TotalAmountMonths ||
                    (this.TotalAmountMonths != null &&
                    this.TotalAmountMonths.Equals(input.TotalAmountMonths))
                ) && 
                (
                    this.UseQuoteTotals == input.UseQuoteTotals ||
                    (this.UseQuoteTotals != null &&
                    this.UseQuoteTotals.Equals(input.UseQuoteTotals))
                ) && 
                (
                    this.WinReason == input.WinReason ||
                    (this.WinReason != null &&
                    this.WinReason.Equals(input.WinReason))
                ) && 
                (
                    this.WinReasonDetail == input.WinReasonDetail ||
                    (this.WinReasonDetail != null &&
                    this.WinReasonDetail.Equals(input.WinReasonDetail))
                ) && 
                (
                    this.YearlyCost == input.YearlyCost ||
                    (this.YearlyCost != null &&
                    this.YearlyCost.Equals(input.YearlyCost))
                ) && 
                (
                    this.YearlyRevenue == input.YearlyRevenue ||
                    (this.YearlyRevenue != null &&
                    this.YearlyRevenue.Equals(input.YearlyRevenue))
                ) && 
                (
                    this.UserDefinedFields == input.UserDefinedFields ||
                    this.UserDefinedFields != null &&
                    this.UserDefinedFields.SequenceEqual(input.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.AdvancedField1 != null)
                    hashCode = hashCode * 59 + this.AdvancedField1.GetHashCode();
                if (this.AdvancedField2 != null)
                    hashCode = hashCode * 59 + this.AdvancedField2.GetHashCode();
                if (this.AdvancedField3 != null)
                    hashCode = hashCode * 59 + this.AdvancedField3.GetHashCode();
                if (this.AdvancedField4 != null)
                    hashCode = hashCode * 59 + this.AdvancedField4.GetHashCode();
                if (this.AdvancedField5 != null)
                    hashCode = hashCode * 59 + this.AdvancedField5.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.AssessmentScore != null)
                    hashCode = hashCode * 59 + this.AssessmentScore.GetHashCode();
                if (this.Barriers != null)
                    hashCode = hashCode * 59 + this.Barriers.GetHashCode();
                if (this.ClosedDate != null)
                    hashCode = hashCode * 59 + this.ClosedDate.GetHashCode();
                if (this.CompanyID != null)
                    hashCode = hashCode * 59 + this.CompanyID.GetHashCode();
                if (this.ContactID != null)
                    hashCode = hashCode * 59 + this.ContactID.GetHashCode();
                if (this.Cost != null)
                    hashCode = hashCode * 59 + this.Cost.GetHashCode();
                if (this.CreateDate != null)
                    hashCode = hashCode * 59 + this.CreateDate.GetHashCode();
                if (this.CreatorResourceID != null)
                    hashCode = hashCode * 59 + this.CreatorResourceID.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.HelpNeeded != null)
                    hashCode = hashCode * 59 + this.HelpNeeded.GetHashCode();
                if (this.ImpersonatorCreatorResourceID != null)
                    hashCode = hashCode * 59 + this.ImpersonatorCreatorResourceID.GetHashCode();
                if (this.LastActivity != null)
                    hashCode = hashCode * 59 + this.LastActivity.GetHashCode();
                if (this.LeadSource != null)
                    hashCode = hashCode * 59 + this.LeadSource.GetHashCode();
                if (this.LossReason != null)
                    hashCode = hashCode * 59 + this.LossReason.GetHashCode();
                if (this.LossReasonDetail != null)
                    hashCode = hashCode * 59 + this.LossReasonDetail.GetHashCode();
                if (this.LostDate != null)
                    hashCode = hashCode * 59 + this.LostDate.GetHashCode();
                if (this.Market != null)
                    hashCode = hashCode * 59 + this.Market.GetHashCode();
                if (this.MonthlyCost != null)
                    hashCode = hashCode * 59 + this.MonthlyCost.GetHashCode();
                if (this.MonthlyRevenue != null)
                    hashCode = hashCode * 59 + this.MonthlyRevenue.GetHashCode();
                if (this.NextStep != null)
                    hashCode = hashCode * 59 + this.NextStep.GetHashCode();
                if (this.OnetimeCost != null)
                    hashCode = hashCode * 59 + this.OnetimeCost.GetHashCode();
                if (this.OnetimeRevenue != null)
                    hashCode = hashCode * 59 + this.OnetimeRevenue.GetHashCode();
                if (this.OpportunityCategoryID != null)
                    hashCode = hashCode * 59 + this.OpportunityCategoryID.GetHashCode();
                if (this.OrganizationalLevelAssociationID != null)
                    hashCode = hashCode * 59 + this.OrganizationalLevelAssociationID.GetHashCode();
                if (this.OwnerResourceID != null)
                    hashCode = hashCode * 59 + this.OwnerResourceID.GetHashCode();
                if (this.PrimaryCompetitor != null)
                    hashCode = hashCode * 59 + this.PrimaryCompetitor.GetHashCode();
                if (this.Probability != null)
                    hashCode = hashCode * 59 + this.Probability.GetHashCode();
                if (this.ProductID != null)
                    hashCode = hashCode * 59 + this.ProductID.GetHashCode();
                if (this.ProjectedCloseDate != null)
                    hashCode = hashCode * 59 + this.ProjectedCloseDate.GetHashCode();
                if (this.PromisedFulfillmentDate != null)
                    hashCode = hashCode * 59 + this.PromisedFulfillmentDate.GetHashCode();
                if (this.PromotionName != null)
                    hashCode = hashCode * 59 + this.PromotionName.GetHashCode();
                if (this.QuarterlyCost != null)
                    hashCode = hashCode * 59 + this.QuarterlyCost.GetHashCode();
                if (this.QuarterlyRevenue != null)
                    hashCode = hashCode * 59 + this.QuarterlyRevenue.GetHashCode();
                if (this.Rating != null)
                    hashCode = hashCode * 59 + this.Rating.GetHashCode();
                if (this.RelationshipAssessmentScore != null)
                    hashCode = hashCode * 59 + this.RelationshipAssessmentScore.GetHashCode();
                if (this.RevenueSpread != null)
                    hashCode = hashCode * 59 + this.RevenueSpread.GetHashCode();
                if (this.RevenueSpreadUnit != null)
                    hashCode = hashCode * 59 + this.RevenueSpreadUnit.GetHashCode();
                if (this.SalesOrderID != null)
                    hashCode = hashCode * 59 + this.SalesOrderID.GetHashCode();
                if (this.SalesProcessPercentComplete != null)
                    hashCode = hashCode * 59 + this.SalesProcessPercentComplete.GetHashCode();
                if (this.SemiannualCost != null)
                    hashCode = hashCode * 59 + this.SemiannualCost.GetHashCode();
                if (this.SemiannualRevenue != null)
                    hashCode = hashCode * 59 + this.SemiannualRevenue.GetHashCode();
                if (this.Stage != null)
                    hashCode = hashCode * 59 + this.Stage.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TechnicalAssessmentScore != null)
                    hashCode = hashCode * 59 + this.TechnicalAssessmentScore.GetHashCode();
                if (this.ThroughDate != null)
                    hashCode = hashCode * 59 + this.ThroughDate.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.TotalAmountMonths != null)
                    hashCode = hashCode * 59 + this.TotalAmountMonths.GetHashCode();
                if (this.UseQuoteTotals != null)
                    hashCode = hashCode * 59 + this.UseQuoteTotals.GetHashCode();
                if (this.WinReason != null)
                    hashCode = hashCode * 59 + this.WinReason.GetHashCode();
                if (this.WinReasonDetail != null)
                    hashCode = hashCode * 59 + this.WinReasonDetail.GetHashCode();
                if (this.YearlyCost != null)
                    hashCode = hashCode * 59 + this.YearlyCost.GetHashCode();
                if (this.YearlyRevenue != null)
                    hashCode = hashCode * 59 + this.YearlyRevenue.GetHashCode();
                if (this.UserDefinedFields != null)
                    hashCode = hashCode * 59 + this.UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
