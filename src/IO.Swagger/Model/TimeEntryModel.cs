/* 
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TimeEntryModel
    /// </summary>
    [DataContract]
    public partial class TimeEntryModel :  IEquatable<TimeEntryModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeEntryModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="billingApprovalDateTime">billingApprovalDateTime.</param>
        /// <param name="billingApprovalLevelMostRecent">billingApprovalLevelMostRecent.</param>
        /// <param name="billingApprovalResourceID">billingApprovalResourceID.</param>
        /// <param name="billingCodeID">billingCodeID.</param>
        /// <param name="contractID">contractID.</param>
        /// <param name="contractServiceBundleID">contractServiceBundleID.</param>
        /// <param name="contractServiceID">contractServiceID.</param>
        /// <param name="createDateTime">createDateTime.</param>
        /// <param name="creatorUserID">creatorUserID.</param>
        /// <param name="dateWorked">dateWorked.</param>
        /// <param name="endDateTime">endDateTime.</param>
        /// <param name="hoursToBill">hoursToBill.</param>
        /// <param name="hoursWorked">hoursWorked.</param>
        /// <param name="impersonatorCreatorResourceID">impersonatorCreatorResourceID.</param>
        /// <param name="impersonatorUpdaterResourceID">impersonatorUpdaterResourceID.</param>
        /// <param name="internalBillingCodeID">internalBillingCodeID.</param>
        /// <param name="internalNotes">internalNotes.</param>
        /// <param name="isNonBillable">isNonBillable.</param>
        /// <param name="lastModifiedDateTime">lastModifiedDateTime.</param>
        /// <param name="lastModifiedUserID">lastModifiedUserID.</param>
        /// <param name="offsetHours">offsetHours.</param>
        /// <param name="resourceID">resourceID.</param>
        /// <param name="roleID">roleID.</param>
        /// <param name="showOnInvoice">showOnInvoice.</param>
        /// <param name="startDateTime">startDateTime.</param>
        /// <param name="summaryNotes">summaryNotes.</param>
        /// <param name="taskID">taskID.</param>
        /// <param name="ticketID">ticketID.</param>
        /// <param name="timeEntryType">timeEntryType.</param>
        /// <param name="userDefinedFields">userDefinedFields.</param>
        public TimeEntryModel(long? id = default(long?), DateTime? billingApprovalDateTime = default(DateTime?), int? billingApprovalLevelMostRecent = default(int?), int? billingApprovalResourceID = default(int?), int? billingCodeID = default(int?), int? contractID = default(int?), long? contractServiceBundleID = default(long?), long? contractServiceID = default(long?), DateTime? createDateTime = default(DateTime?), int? creatorUserID = default(int?), DateTime? dateWorked = default(DateTime?), DateTime? endDateTime = default(DateTime?), double? hoursToBill = default(double?), double? hoursWorked = default(double?), int? impersonatorCreatorResourceID = default(int?), int? impersonatorUpdaterResourceID = default(int?), int? internalBillingCodeID = default(int?), string internalNotes = default(string), bool? isNonBillable = default(bool?), DateTime? lastModifiedDateTime = default(DateTime?), int? lastModifiedUserID = default(int?), double? offsetHours = default(double?), int? resourceID = default(int?), int? roleID = default(int?), bool? showOnInvoice = default(bool?), DateTime? startDateTime = default(DateTime?), string summaryNotes = default(string), int? taskID = default(int?), int? ticketID = default(int?), int? timeEntryType = default(int?), List<UserDefinedField> userDefinedFields = default(List<UserDefinedField>))
        {
            this.Id = id;
            this.BillingApprovalDateTime = billingApprovalDateTime;
            this.BillingApprovalLevelMostRecent = billingApprovalLevelMostRecent;
            this.BillingApprovalResourceID = billingApprovalResourceID;
            this.BillingCodeID = billingCodeID;
            this.ContractID = contractID;
            this.ContractServiceBundleID = contractServiceBundleID;
            this.ContractServiceID = contractServiceID;
            this.CreateDateTime = createDateTime;
            this.CreatorUserID = creatorUserID;
            this.DateWorked = dateWorked;
            this.EndDateTime = endDateTime;
            this.HoursToBill = hoursToBill;
            this.HoursWorked = hoursWorked;
            this.ImpersonatorCreatorResourceID = impersonatorCreatorResourceID;
            this.ImpersonatorUpdaterResourceID = impersonatorUpdaterResourceID;
            this.InternalBillingCodeID = internalBillingCodeID;
            this.InternalNotes = internalNotes;
            this.IsNonBillable = isNonBillable;
            this.LastModifiedDateTime = lastModifiedDateTime;
            this.LastModifiedUserID = lastModifiedUserID;
            this.OffsetHours = offsetHours;
            this.ResourceID = resourceID;
            this.RoleID = roleID;
            this.ShowOnInvoice = showOnInvoice;
            this.StartDateTime = startDateTime;
            this.SummaryNotes = summaryNotes;
            this.TaskID = taskID;
            this.TicketID = ticketID;
            this.TimeEntryType = timeEntryType;
            this.UserDefinedFields = userDefinedFields;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets BillingApprovalDateTime
        /// </summary>
        [DataMember(Name="billingApprovalDateTime", EmitDefaultValue=false)]
        public DateTime? BillingApprovalDateTime { get; set; }

        /// <summary>
        /// Gets or Sets BillingApprovalLevelMostRecent
        /// </summary>
        [DataMember(Name="billingApprovalLevelMostRecent", EmitDefaultValue=false)]
        public int? BillingApprovalLevelMostRecent { get; set; }

        /// <summary>
        /// Gets or Sets BillingApprovalResourceID
        /// </summary>
        [DataMember(Name="billingApprovalResourceID", EmitDefaultValue=false)]
        public int? BillingApprovalResourceID { get; set; }

        /// <summary>
        /// Gets or Sets BillingCodeID
        /// </summary>
        [DataMember(Name="billingCodeID", EmitDefaultValue=false)]
        public int? BillingCodeID { get; set; }

        /// <summary>
        /// Gets or Sets ContractID
        /// </summary>
        [DataMember(Name="contractID", EmitDefaultValue=false)]
        public int? ContractID { get; set; }

        /// <summary>
        /// Gets or Sets ContractServiceBundleID
        /// </summary>
        [DataMember(Name="contractServiceBundleID", EmitDefaultValue=false)]
        public long? ContractServiceBundleID { get; set; }

        /// <summary>
        /// Gets or Sets ContractServiceID
        /// </summary>
        [DataMember(Name="contractServiceID", EmitDefaultValue=false)]
        public long? ContractServiceID { get; set; }

        /// <summary>
        /// Gets or Sets CreateDateTime
        /// </summary>
        [DataMember(Name="createDateTime", EmitDefaultValue=false)]
        public DateTime? CreateDateTime { get; set; }

        /// <summary>
        /// Gets or Sets CreatorUserID
        /// </summary>
        [DataMember(Name="creatorUserID", EmitDefaultValue=false)]
        public int? CreatorUserID { get; set; }

        /// <summary>
        /// Gets or Sets DateWorked
        /// </summary>
        [DataMember(Name="dateWorked", EmitDefaultValue=false)]
        public DateTime? DateWorked { get; set; }

        /// <summary>
        /// Gets or Sets EndDateTime
        /// </summary>
        [DataMember(Name="endDateTime", EmitDefaultValue=false)]
        public DateTime? EndDateTime { get; set; }

        /// <summary>
        /// Gets or Sets HoursToBill
        /// </summary>
        [DataMember(Name="hoursToBill", EmitDefaultValue=false)]
        public double? HoursToBill { get; set; }

        /// <summary>
        /// Gets or Sets HoursWorked
        /// </summary>
        [DataMember(Name="hoursWorked", EmitDefaultValue=false)]
        public double? HoursWorked { get; set; }

        /// <summary>
        /// Gets or Sets ImpersonatorCreatorResourceID
        /// </summary>
        [DataMember(Name="impersonatorCreatorResourceID", EmitDefaultValue=false)]
        public int? ImpersonatorCreatorResourceID { get; set; }

        /// <summary>
        /// Gets or Sets ImpersonatorUpdaterResourceID
        /// </summary>
        [DataMember(Name="impersonatorUpdaterResourceID", EmitDefaultValue=false)]
        public int? ImpersonatorUpdaterResourceID { get; set; }

        /// <summary>
        /// Gets or Sets InternalBillingCodeID
        /// </summary>
        [DataMember(Name="internalBillingCodeID", EmitDefaultValue=false)]
        public int? InternalBillingCodeID { get; set; }

        /// <summary>
        /// Gets or Sets InternalNotes
        /// </summary>
        [DataMember(Name="internalNotes", EmitDefaultValue=false)]
        public string InternalNotes { get; set; }

        /// <summary>
        /// Gets or Sets IsNonBillable
        /// </summary>
        [DataMember(Name="isNonBillable", EmitDefaultValue=false)]
        public bool? IsNonBillable { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedDateTime
        /// </summary>
        [DataMember(Name="lastModifiedDateTime", EmitDefaultValue=false)]
        public DateTime? LastModifiedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedUserID
        /// </summary>
        [DataMember(Name="lastModifiedUserID", EmitDefaultValue=false)]
        public int? LastModifiedUserID { get; set; }

        /// <summary>
        /// Gets or Sets OffsetHours
        /// </summary>
        [DataMember(Name="offsetHours", EmitDefaultValue=false)]
        public double? OffsetHours { get; set; }

        /// <summary>
        /// Gets or Sets ResourceID
        /// </summary>
        [DataMember(Name="resourceID", EmitDefaultValue=false)]
        public int? ResourceID { get; set; }

        /// <summary>
        /// Gets or Sets RoleID
        /// </summary>
        [DataMember(Name="roleID", EmitDefaultValue=false)]
        public int? RoleID { get; set; }

        /// <summary>
        /// Gets or Sets ShowOnInvoice
        /// </summary>
        [DataMember(Name="showOnInvoice", EmitDefaultValue=false)]
        public bool? ShowOnInvoice { get; set; }

        /// <summary>
        /// Gets or Sets StartDateTime
        /// </summary>
        [DataMember(Name="startDateTime", EmitDefaultValue=false)]
        public DateTime? StartDateTime { get; set; }

        /// <summary>
        /// Gets or Sets SummaryNotes
        /// </summary>
        [DataMember(Name="summaryNotes", EmitDefaultValue=false)]
        public string SummaryNotes { get; set; }

        /// <summary>
        /// Gets or Sets TaskID
        /// </summary>
        [DataMember(Name="taskID", EmitDefaultValue=false)]
        public int? TaskID { get; set; }

        /// <summary>
        /// Gets or Sets TicketID
        /// </summary>
        [DataMember(Name="ticketID", EmitDefaultValue=false)]
        public int? TicketID { get; set; }

        /// <summary>
        /// Gets or Sets TimeEntryType
        /// </summary>
        [DataMember(Name="timeEntryType", EmitDefaultValue=false)]
        public int? TimeEntryType { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields", EmitDefaultValue=false)]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TimeEntryModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BillingApprovalDateTime: ").Append(BillingApprovalDateTime).Append("\n");
            sb.Append("  BillingApprovalLevelMostRecent: ").Append(BillingApprovalLevelMostRecent).Append("\n");
            sb.Append("  BillingApprovalResourceID: ").Append(BillingApprovalResourceID).Append("\n");
            sb.Append("  BillingCodeID: ").Append(BillingCodeID).Append("\n");
            sb.Append("  ContractID: ").Append(ContractID).Append("\n");
            sb.Append("  ContractServiceBundleID: ").Append(ContractServiceBundleID).Append("\n");
            sb.Append("  ContractServiceID: ").Append(ContractServiceID).Append("\n");
            sb.Append("  CreateDateTime: ").Append(CreateDateTime).Append("\n");
            sb.Append("  CreatorUserID: ").Append(CreatorUserID).Append("\n");
            sb.Append("  DateWorked: ").Append(DateWorked).Append("\n");
            sb.Append("  EndDateTime: ").Append(EndDateTime).Append("\n");
            sb.Append("  HoursToBill: ").Append(HoursToBill).Append("\n");
            sb.Append("  HoursWorked: ").Append(HoursWorked).Append("\n");
            sb.Append("  ImpersonatorCreatorResourceID: ").Append(ImpersonatorCreatorResourceID).Append("\n");
            sb.Append("  ImpersonatorUpdaterResourceID: ").Append(ImpersonatorUpdaterResourceID).Append("\n");
            sb.Append("  InternalBillingCodeID: ").Append(InternalBillingCodeID).Append("\n");
            sb.Append("  InternalNotes: ").Append(InternalNotes).Append("\n");
            sb.Append("  IsNonBillable: ").Append(IsNonBillable).Append("\n");
            sb.Append("  LastModifiedDateTime: ").Append(LastModifiedDateTime).Append("\n");
            sb.Append("  LastModifiedUserID: ").Append(LastModifiedUserID).Append("\n");
            sb.Append("  OffsetHours: ").Append(OffsetHours).Append("\n");
            sb.Append("  ResourceID: ").Append(ResourceID).Append("\n");
            sb.Append("  RoleID: ").Append(RoleID).Append("\n");
            sb.Append("  ShowOnInvoice: ").Append(ShowOnInvoice).Append("\n");
            sb.Append("  StartDateTime: ").Append(StartDateTime).Append("\n");
            sb.Append("  SummaryNotes: ").Append(SummaryNotes).Append("\n");
            sb.Append("  TaskID: ").Append(TaskID).Append("\n");
            sb.Append("  TicketID: ").Append(TicketID).Append("\n");
            sb.Append("  TimeEntryType: ").Append(TimeEntryType).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TimeEntryModel);
        }

        /// <summary>
        /// Returns true if TimeEntryModel instances are equal
        /// </summary>
        /// <param name="input">Instance of TimeEntryModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimeEntryModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.BillingApprovalDateTime == input.BillingApprovalDateTime ||
                    (this.BillingApprovalDateTime != null &&
                    this.BillingApprovalDateTime.Equals(input.BillingApprovalDateTime))
                ) && 
                (
                    this.BillingApprovalLevelMostRecent == input.BillingApprovalLevelMostRecent ||
                    (this.BillingApprovalLevelMostRecent != null &&
                    this.BillingApprovalLevelMostRecent.Equals(input.BillingApprovalLevelMostRecent))
                ) && 
                (
                    this.BillingApprovalResourceID == input.BillingApprovalResourceID ||
                    (this.BillingApprovalResourceID != null &&
                    this.BillingApprovalResourceID.Equals(input.BillingApprovalResourceID))
                ) && 
                (
                    this.BillingCodeID == input.BillingCodeID ||
                    (this.BillingCodeID != null &&
                    this.BillingCodeID.Equals(input.BillingCodeID))
                ) && 
                (
                    this.ContractID == input.ContractID ||
                    (this.ContractID != null &&
                    this.ContractID.Equals(input.ContractID))
                ) && 
                (
                    this.ContractServiceBundleID == input.ContractServiceBundleID ||
                    (this.ContractServiceBundleID != null &&
                    this.ContractServiceBundleID.Equals(input.ContractServiceBundleID))
                ) && 
                (
                    this.ContractServiceID == input.ContractServiceID ||
                    (this.ContractServiceID != null &&
                    this.ContractServiceID.Equals(input.ContractServiceID))
                ) && 
                (
                    this.CreateDateTime == input.CreateDateTime ||
                    (this.CreateDateTime != null &&
                    this.CreateDateTime.Equals(input.CreateDateTime))
                ) && 
                (
                    this.CreatorUserID == input.CreatorUserID ||
                    (this.CreatorUserID != null &&
                    this.CreatorUserID.Equals(input.CreatorUserID))
                ) && 
                (
                    this.DateWorked == input.DateWorked ||
                    (this.DateWorked != null &&
                    this.DateWorked.Equals(input.DateWorked))
                ) && 
                (
                    this.EndDateTime == input.EndDateTime ||
                    (this.EndDateTime != null &&
                    this.EndDateTime.Equals(input.EndDateTime))
                ) && 
                (
                    this.HoursToBill == input.HoursToBill ||
                    (this.HoursToBill != null &&
                    this.HoursToBill.Equals(input.HoursToBill))
                ) && 
                (
                    this.HoursWorked == input.HoursWorked ||
                    (this.HoursWorked != null &&
                    this.HoursWorked.Equals(input.HoursWorked))
                ) && 
                (
                    this.ImpersonatorCreatorResourceID == input.ImpersonatorCreatorResourceID ||
                    (this.ImpersonatorCreatorResourceID != null &&
                    this.ImpersonatorCreatorResourceID.Equals(input.ImpersonatorCreatorResourceID))
                ) && 
                (
                    this.ImpersonatorUpdaterResourceID == input.ImpersonatorUpdaterResourceID ||
                    (this.ImpersonatorUpdaterResourceID != null &&
                    this.ImpersonatorUpdaterResourceID.Equals(input.ImpersonatorUpdaterResourceID))
                ) && 
                (
                    this.InternalBillingCodeID == input.InternalBillingCodeID ||
                    (this.InternalBillingCodeID != null &&
                    this.InternalBillingCodeID.Equals(input.InternalBillingCodeID))
                ) && 
                (
                    this.InternalNotes == input.InternalNotes ||
                    (this.InternalNotes != null &&
                    this.InternalNotes.Equals(input.InternalNotes))
                ) && 
                (
                    this.IsNonBillable == input.IsNonBillable ||
                    (this.IsNonBillable != null &&
                    this.IsNonBillable.Equals(input.IsNonBillable))
                ) && 
                (
                    this.LastModifiedDateTime == input.LastModifiedDateTime ||
                    (this.LastModifiedDateTime != null &&
                    this.LastModifiedDateTime.Equals(input.LastModifiedDateTime))
                ) && 
                (
                    this.LastModifiedUserID == input.LastModifiedUserID ||
                    (this.LastModifiedUserID != null &&
                    this.LastModifiedUserID.Equals(input.LastModifiedUserID))
                ) && 
                (
                    this.OffsetHours == input.OffsetHours ||
                    (this.OffsetHours != null &&
                    this.OffsetHours.Equals(input.OffsetHours))
                ) && 
                (
                    this.ResourceID == input.ResourceID ||
                    (this.ResourceID != null &&
                    this.ResourceID.Equals(input.ResourceID))
                ) && 
                (
                    this.RoleID == input.RoleID ||
                    (this.RoleID != null &&
                    this.RoleID.Equals(input.RoleID))
                ) && 
                (
                    this.ShowOnInvoice == input.ShowOnInvoice ||
                    (this.ShowOnInvoice != null &&
                    this.ShowOnInvoice.Equals(input.ShowOnInvoice))
                ) && 
                (
                    this.StartDateTime == input.StartDateTime ||
                    (this.StartDateTime != null &&
                    this.StartDateTime.Equals(input.StartDateTime))
                ) && 
                (
                    this.SummaryNotes == input.SummaryNotes ||
                    (this.SummaryNotes != null &&
                    this.SummaryNotes.Equals(input.SummaryNotes))
                ) && 
                (
                    this.TaskID == input.TaskID ||
                    (this.TaskID != null &&
                    this.TaskID.Equals(input.TaskID))
                ) && 
                (
                    this.TicketID == input.TicketID ||
                    (this.TicketID != null &&
                    this.TicketID.Equals(input.TicketID))
                ) && 
                (
                    this.TimeEntryType == input.TimeEntryType ||
                    (this.TimeEntryType != null &&
                    this.TimeEntryType.Equals(input.TimeEntryType))
                ) && 
                (
                    this.UserDefinedFields == input.UserDefinedFields ||
                    this.UserDefinedFields != null &&
                    this.UserDefinedFields.SequenceEqual(input.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.BillingApprovalDateTime != null)
                    hashCode = hashCode * 59 + this.BillingApprovalDateTime.GetHashCode();
                if (this.BillingApprovalLevelMostRecent != null)
                    hashCode = hashCode * 59 + this.BillingApprovalLevelMostRecent.GetHashCode();
                if (this.BillingApprovalResourceID != null)
                    hashCode = hashCode * 59 + this.BillingApprovalResourceID.GetHashCode();
                if (this.BillingCodeID != null)
                    hashCode = hashCode * 59 + this.BillingCodeID.GetHashCode();
                if (this.ContractID != null)
                    hashCode = hashCode * 59 + this.ContractID.GetHashCode();
                if (this.ContractServiceBundleID != null)
                    hashCode = hashCode * 59 + this.ContractServiceBundleID.GetHashCode();
                if (this.ContractServiceID != null)
                    hashCode = hashCode * 59 + this.ContractServiceID.GetHashCode();
                if (this.CreateDateTime != null)
                    hashCode = hashCode * 59 + this.CreateDateTime.GetHashCode();
                if (this.CreatorUserID != null)
                    hashCode = hashCode * 59 + this.CreatorUserID.GetHashCode();
                if (this.DateWorked != null)
                    hashCode = hashCode * 59 + this.DateWorked.GetHashCode();
                if (this.EndDateTime != null)
                    hashCode = hashCode * 59 + this.EndDateTime.GetHashCode();
                if (this.HoursToBill != null)
                    hashCode = hashCode * 59 + this.HoursToBill.GetHashCode();
                if (this.HoursWorked != null)
                    hashCode = hashCode * 59 + this.HoursWorked.GetHashCode();
                if (this.ImpersonatorCreatorResourceID != null)
                    hashCode = hashCode * 59 + this.ImpersonatorCreatorResourceID.GetHashCode();
                if (this.ImpersonatorUpdaterResourceID != null)
                    hashCode = hashCode * 59 + this.ImpersonatorUpdaterResourceID.GetHashCode();
                if (this.InternalBillingCodeID != null)
                    hashCode = hashCode * 59 + this.InternalBillingCodeID.GetHashCode();
                if (this.InternalNotes != null)
                    hashCode = hashCode * 59 + this.InternalNotes.GetHashCode();
                if (this.IsNonBillable != null)
                    hashCode = hashCode * 59 + this.IsNonBillable.GetHashCode();
                if (this.LastModifiedDateTime != null)
                    hashCode = hashCode * 59 + this.LastModifiedDateTime.GetHashCode();
                if (this.LastModifiedUserID != null)
                    hashCode = hashCode * 59 + this.LastModifiedUserID.GetHashCode();
                if (this.OffsetHours != null)
                    hashCode = hashCode * 59 + this.OffsetHours.GetHashCode();
                if (this.ResourceID != null)
                    hashCode = hashCode * 59 + this.ResourceID.GetHashCode();
                if (this.RoleID != null)
                    hashCode = hashCode * 59 + this.RoleID.GetHashCode();
                if (this.ShowOnInvoice != null)
                    hashCode = hashCode * 59 + this.ShowOnInvoice.GetHashCode();
                if (this.StartDateTime != null)
                    hashCode = hashCode * 59 + this.StartDateTime.GetHashCode();
                if (this.SummaryNotes != null)
                    hashCode = hashCode * 59 + this.SummaryNotes.GetHashCode();
                if (this.TaskID != null)
                    hashCode = hashCode * 59 + this.TaskID.GetHashCode();
                if (this.TicketID != null)
                    hashCode = hashCode * 59 + this.TicketID.GetHashCode();
                if (this.TimeEntryType != null)
                    hashCode = hashCode * 59 + this.TimeEntryType.GetHashCode();
                if (this.UserDefinedFields != null)
                    hashCode = hashCode * 59 + this.UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
