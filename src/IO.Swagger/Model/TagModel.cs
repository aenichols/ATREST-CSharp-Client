/* 
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TagModel
    /// </summary>
    [DataContract]
    public partial class TagModel :  IEquatable<TagModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TagModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="createDateTime">createDateTime.</param>
        /// <param name="isActive">isActive.</param>
        /// <param name="isExcludedFromAutomaticTagging">isExcludedFromAutomaticTagging.</param>
        /// <param name="isSystem">isSystem.</param>
        /// <param name="label">label.</param>
        /// <param name="lastModifiedDateTime">lastModifiedDateTime.</param>
        /// <param name="tagGroupID">tagGroupID.</param>
        /// <param name="userDefinedFields">userDefinedFields.</param>
        public TagModel(long? id = default(long?), DateTime? createDateTime = default(DateTime?), bool? isActive = default(bool?), bool? isExcludedFromAutomaticTagging = default(bool?), bool? isSystem = default(bool?), string label = default(string), DateTime? lastModifiedDateTime = default(DateTime?), int? tagGroupID = default(int?), List<UserDefinedField> userDefinedFields = default(List<UserDefinedField>))
        {
            this.Id = id;
            this.CreateDateTime = createDateTime;
            this.IsActive = isActive;
            this.IsExcludedFromAutomaticTagging = isExcludedFromAutomaticTagging;
            this.IsSystem = isSystem;
            this.Label = label;
            this.LastModifiedDateTime = lastModifiedDateTime;
            this.TagGroupID = tagGroupID;
            this.UserDefinedFields = userDefinedFields;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets CreateDateTime
        /// </summary>
        [DataMember(Name="createDateTime", EmitDefaultValue=false)]
        public DateTime? CreateDateTime { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="isActive", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets IsExcludedFromAutomaticTagging
        /// </summary>
        [DataMember(Name="isExcludedFromAutomaticTagging", EmitDefaultValue=false)]
        public bool? IsExcludedFromAutomaticTagging { get; set; }

        /// <summary>
        /// Gets or Sets IsSystem
        /// </summary>
        [DataMember(Name="isSystem", EmitDefaultValue=false)]
        public bool? IsSystem { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedDateTime
        /// </summary>
        [DataMember(Name="lastModifiedDateTime", EmitDefaultValue=false)]
        public DateTime? LastModifiedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets TagGroupID
        /// </summary>
        [DataMember(Name="tagGroupID", EmitDefaultValue=false)]
        public int? TagGroupID { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields", EmitDefaultValue=false)]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TagModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreateDateTime: ").Append(CreateDateTime).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsExcludedFromAutomaticTagging: ").Append(IsExcludedFromAutomaticTagging).Append("\n");
            sb.Append("  IsSystem: ").Append(IsSystem).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  LastModifiedDateTime: ").Append(LastModifiedDateTime).Append("\n");
            sb.Append("  TagGroupID: ").Append(TagGroupID).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TagModel);
        }

        /// <summary>
        /// Returns true if TagModel instances are equal
        /// </summary>
        /// <param name="input">Instance of TagModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TagModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CreateDateTime == input.CreateDateTime ||
                    (this.CreateDateTime != null &&
                    this.CreateDateTime.Equals(input.CreateDateTime))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.IsExcludedFromAutomaticTagging == input.IsExcludedFromAutomaticTagging ||
                    (this.IsExcludedFromAutomaticTagging != null &&
                    this.IsExcludedFromAutomaticTagging.Equals(input.IsExcludedFromAutomaticTagging))
                ) && 
                (
                    this.IsSystem == input.IsSystem ||
                    (this.IsSystem != null &&
                    this.IsSystem.Equals(input.IsSystem))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.LastModifiedDateTime == input.LastModifiedDateTime ||
                    (this.LastModifiedDateTime != null &&
                    this.LastModifiedDateTime.Equals(input.LastModifiedDateTime))
                ) && 
                (
                    this.TagGroupID == input.TagGroupID ||
                    (this.TagGroupID != null &&
                    this.TagGroupID.Equals(input.TagGroupID))
                ) && 
                (
                    this.UserDefinedFields == input.UserDefinedFields ||
                    this.UserDefinedFields != null &&
                    this.UserDefinedFields.SequenceEqual(input.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CreateDateTime != null)
                    hashCode = hashCode * 59 + this.CreateDateTime.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.IsExcludedFromAutomaticTagging != null)
                    hashCode = hashCode * 59 + this.IsExcludedFromAutomaticTagging.GetHashCode();
                if (this.IsSystem != null)
                    hashCode = hashCode * 59 + this.IsSystem.GetHashCode();
                if (this.Label != null)
                    hashCode = hashCode * 59 + this.Label.GetHashCode();
                if (this.LastModifiedDateTime != null)
                    hashCode = hashCode * 59 + this.LastModifiedDateTime.GetHashCode();
                if (this.TagGroupID != null)
                    hashCode = hashCode * 59 + this.TagGroupID.GetHashCode();
                if (this.UserDefinedFields != null)
                    hashCode = hashCode * 59 + this.UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
