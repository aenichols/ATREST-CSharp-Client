/* 
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ServiceCallModel
    /// </summary>
    [DataContract]
    public partial class ServiceCallModel :  IEquatable<ServiceCallModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceCallModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="cancelationNoticeHours">cancelationNoticeHours.</param>
        /// <param name="canceledByResourceID">canceledByResourceID.</param>
        /// <param name="canceledDateTime">canceledDateTime.</param>
        /// <param name="companyID">companyID.</param>
        /// <param name="companyLocationID">companyLocationID.</param>
        /// <param name="createDateTime">createDateTime.</param>
        /// <param name="creatorResourceID">creatorResourceID.</param>
        /// <param name="description">description.</param>
        /// <param name="duration">duration.</param>
        /// <param name="endDateTime">endDateTime.</param>
        /// <param name="impersonatorCreatorResourceID">impersonatorCreatorResourceID.</param>
        /// <param name="isComplete">isComplete.</param>
        /// <param name="lastModifiedDateTime">lastModifiedDateTime.</param>
        /// <param name="startDateTime">startDateTime.</param>
        /// <param name="status">status.</param>
        /// <param name="userDefinedFields">userDefinedFields.</param>
        public ServiceCallModel(long? id = default(long?), double? cancelationNoticeHours = default(double?), int? canceledByResourceID = default(int?), DateTime? canceledDateTime = default(DateTime?), int? companyID = default(int?), int? companyLocationID = default(int?), DateTime? createDateTime = default(DateTime?), int? creatorResourceID = default(int?), string description = default(string), double? duration = default(double?), DateTime? endDateTime = default(DateTime?), int? impersonatorCreatorResourceID = default(int?), int? isComplete = default(int?), DateTime? lastModifiedDateTime = default(DateTime?), DateTime? startDateTime = default(DateTime?), int? status = default(int?), List<UserDefinedField> userDefinedFields = default(List<UserDefinedField>))
        {
            this.Id = id;
            this.CancelationNoticeHours = cancelationNoticeHours;
            this.CanceledByResourceID = canceledByResourceID;
            this.CanceledDateTime = canceledDateTime;
            this.CompanyID = companyID;
            this.CompanyLocationID = companyLocationID;
            this.CreateDateTime = createDateTime;
            this.CreatorResourceID = creatorResourceID;
            this.Description = description;
            this.Duration = duration;
            this.EndDateTime = endDateTime;
            this.ImpersonatorCreatorResourceID = impersonatorCreatorResourceID;
            this.IsComplete = isComplete;
            this.LastModifiedDateTime = lastModifiedDateTime;
            this.StartDateTime = startDateTime;
            this.Status = status;
            this.UserDefinedFields = userDefinedFields;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets CancelationNoticeHours
        /// </summary>
        [DataMember(Name="cancelationNoticeHours", EmitDefaultValue=false)]
        public double? CancelationNoticeHours { get; set; }

        /// <summary>
        /// Gets or Sets CanceledByResourceID
        /// </summary>
        [DataMember(Name="canceledByResourceID", EmitDefaultValue=false)]
        public int? CanceledByResourceID { get; set; }

        /// <summary>
        /// Gets or Sets CanceledDateTime
        /// </summary>
        [DataMember(Name="canceledDateTime", EmitDefaultValue=false)]
        public DateTime? CanceledDateTime { get; set; }

        /// <summary>
        /// Gets or Sets CompanyID
        /// </summary>
        [DataMember(Name="companyID", EmitDefaultValue=false)]
        public int? CompanyID { get; set; }

        /// <summary>
        /// Gets or Sets CompanyLocationID
        /// </summary>
        [DataMember(Name="companyLocationID", EmitDefaultValue=false)]
        public int? CompanyLocationID { get; set; }

        /// <summary>
        /// Gets or Sets CreateDateTime
        /// </summary>
        [DataMember(Name="createDateTime", EmitDefaultValue=false)]
        public DateTime? CreateDateTime { get; set; }

        /// <summary>
        /// Gets or Sets CreatorResourceID
        /// </summary>
        [DataMember(Name="creatorResourceID", EmitDefaultValue=false)]
        public int? CreatorResourceID { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public double? Duration { get; set; }

        /// <summary>
        /// Gets or Sets EndDateTime
        /// </summary>
        [DataMember(Name="endDateTime", EmitDefaultValue=false)]
        public DateTime? EndDateTime { get; set; }

        /// <summary>
        /// Gets or Sets ImpersonatorCreatorResourceID
        /// </summary>
        [DataMember(Name="impersonatorCreatorResourceID", EmitDefaultValue=false)]
        public int? ImpersonatorCreatorResourceID { get; set; }

        /// <summary>
        /// Gets or Sets IsComplete
        /// </summary>
        [DataMember(Name="isComplete", EmitDefaultValue=false)]
        public int? IsComplete { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedDateTime
        /// </summary>
        [DataMember(Name="lastModifiedDateTime", EmitDefaultValue=false)]
        public DateTime? LastModifiedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets StartDateTime
        /// </summary>
        [DataMember(Name="startDateTime", EmitDefaultValue=false)]
        public DateTime? StartDateTime { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public int? Status { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields", EmitDefaultValue=false)]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServiceCallModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CancelationNoticeHours: ").Append(CancelationNoticeHours).Append("\n");
            sb.Append("  CanceledByResourceID: ").Append(CanceledByResourceID).Append("\n");
            sb.Append("  CanceledDateTime: ").Append(CanceledDateTime).Append("\n");
            sb.Append("  CompanyID: ").Append(CompanyID).Append("\n");
            sb.Append("  CompanyLocationID: ").Append(CompanyLocationID).Append("\n");
            sb.Append("  CreateDateTime: ").Append(CreateDateTime).Append("\n");
            sb.Append("  CreatorResourceID: ").Append(CreatorResourceID).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  EndDateTime: ").Append(EndDateTime).Append("\n");
            sb.Append("  ImpersonatorCreatorResourceID: ").Append(ImpersonatorCreatorResourceID).Append("\n");
            sb.Append("  IsComplete: ").Append(IsComplete).Append("\n");
            sb.Append("  LastModifiedDateTime: ").Append(LastModifiedDateTime).Append("\n");
            sb.Append("  StartDateTime: ").Append(StartDateTime).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ServiceCallModel);
        }

        /// <summary>
        /// Returns true if ServiceCallModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ServiceCallModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServiceCallModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CancelationNoticeHours == input.CancelationNoticeHours ||
                    (this.CancelationNoticeHours != null &&
                    this.CancelationNoticeHours.Equals(input.CancelationNoticeHours))
                ) && 
                (
                    this.CanceledByResourceID == input.CanceledByResourceID ||
                    (this.CanceledByResourceID != null &&
                    this.CanceledByResourceID.Equals(input.CanceledByResourceID))
                ) && 
                (
                    this.CanceledDateTime == input.CanceledDateTime ||
                    (this.CanceledDateTime != null &&
                    this.CanceledDateTime.Equals(input.CanceledDateTime))
                ) && 
                (
                    this.CompanyID == input.CompanyID ||
                    (this.CompanyID != null &&
                    this.CompanyID.Equals(input.CompanyID))
                ) && 
                (
                    this.CompanyLocationID == input.CompanyLocationID ||
                    (this.CompanyLocationID != null &&
                    this.CompanyLocationID.Equals(input.CompanyLocationID))
                ) && 
                (
                    this.CreateDateTime == input.CreateDateTime ||
                    (this.CreateDateTime != null &&
                    this.CreateDateTime.Equals(input.CreateDateTime))
                ) && 
                (
                    this.CreatorResourceID == input.CreatorResourceID ||
                    (this.CreatorResourceID != null &&
                    this.CreatorResourceID.Equals(input.CreatorResourceID))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.EndDateTime == input.EndDateTime ||
                    (this.EndDateTime != null &&
                    this.EndDateTime.Equals(input.EndDateTime))
                ) && 
                (
                    this.ImpersonatorCreatorResourceID == input.ImpersonatorCreatorResourceID ||
                    (this.ImpersonatorCreatorResourceID != null &&
                    this.ImpersonatorCreatorResourceID.Equals(input.ImpersonatorCreatorResourceID))
                ) && 
                (
                    this.IsComplete == input.IsComplete ||
                    (this.IsComplete != null &&
                    this.IsComplete.Equals(input.IsComplete))
                ) && 
                (
                    this.LastModifiedDateTime == input.LastModifiedDateTime ||
                    (this.LastModifiedDateTime != null &&
                    this.LastModifiedDateTime.Equals(input.LastModifiedDateTime))
                ) && 
                (
                    this.StartDateTime == input.StartDateTime ||
                    (this.StartDateTime != null &&
                    this.StartDateTime.Equals(input.StartDateTime))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.UserDefinedFields == input.UserDefinedFields ||
                    this.UserDefinedFields != null &&
                    this.UserDefinedFields.SequenceEqual(input.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CancelationNoticeHours != null)
                    hashCode = hashCode * 59 + this.CancelationNoticeHours.GetHashCode();
                if (this.CanceledByResourceID != null)
                    hashCode = hashCode * 59 + this.CanceledByResourceID.GetHashCode();
                if (this.CanceledDateTime != null)
                    hashCode = hashCode * 59 + this.CanceledDateTime.GetHashCode();
                if (this.CompanyID != null)
                    hashCode = hashCode * 59 + this.CompanyID.GetHashCode();
                if (this.CompanyLocationID != null)
                    hashCode = hashCode * 59 + this.CompanyLocationID.GetHashCode();
                if (this.CreateDateTime != null)
                    hashCode = hashCode * 59 + this.CreateDateTime.GetHashCode();
                if (this.CreatorResourceID != null)
                    hashCode = hashCode * 59 + this.CreatorResourceID.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.EndDateTime != null)
                    hashCode = hashCode * 59 + this.EndDateTime.GetHashCode();
                if (this.ImpersonatorCreatorResourceID != null)
                    hashCode = hashCode * 59 + this.ImpersonatorCreatorResourceID.GetHashCode();
                if (this.IsComplete != null)
                    hashCode = hashCode * 59 + this.IsComplete.GetHashCode();
                if (this.LastModifiedDateTime != null)
                    hashCode = hashCode * 59 + this.LastModifiedDateTime.GetHashCode();
                if (this.StartDateTime != null)
                    hashCode = hashCode * 59 + this.StartDateTime.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.UserDefinedFields != null)
                    hashCode = hashCode * 59 + this.UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
