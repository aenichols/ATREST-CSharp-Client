/* 
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ConfigurationItemCategoryUdfAssociationModel
    /// </summary>
    [DataContract]
    public partial class ConfigurationItemCategoryUdfAssociationModel :  IEquatable<ConfigurationItemCategoryUdfAssociationModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationItemCategoryUdfAssociationModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="configurationItemCategoryID">configurationItemCategoryID.</param>
        /// <param name="isRequired">isRequired.</param>
        /// <param name="userDefinedFieldDefinitionID">userDefinedFieldDefinitionID.</param>
        /// <param name="userDefinedFields">userDefinedFields.</param>
        public ConfigurationItemCategoryUdfAssociationModel(long? id = default(long?), int? configurationItemCategoryID = default(int?), bool? isRequired = default(bool?), int? userDefinedFieldDefinitionID = default(int?), List<UserDefinedField> userDefinedFields = default(List<UserDefinedField>))
        {
            this.Id = id;
            this.ConfigurationItemCategoryID = configurationItemCategoryID;
            this.IsRequired = isRequired;
            this.UserDefinedFieldDefinitionID = userDefinedFieldDefinitionID;
            this.UserDefinedFields = userDefinedFields;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets ConfigurationItemCategoryID
        /// </summary>
        [DataMember(Name="configurationItemCategoryID", EmitDefaultValue=false)]
        public int? ConfigurationItemCategoryID { get; set; }

        /// <summary>
        /// Gets or Sets IsRequired
        /// </summary>
        [DataMember(Name="isRequired", EmitDefaultValue=false)]
        public bool? IsRequired { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedFieldDefinitionID
        /// </summary>
        [DataMember(Name="userDefinedFieldDefinitionID", EmitDefaultValue=false)]
        public int? UserDefinedFieldDefinitionID { get; set; }

        /// <summary>
        /// Gets or Sets SoapParentPropertyId
        /// </summary>
        [DataMember(Name="soapParentPropertyId", EmitDefaultValue=false)]
        public ExpressionFuncInstalledProductCategoryUdfAssociationInt64 SoapParentPropertyId { get; private set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields", EmitDefaultValue=false)]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConfigurationItemCategoryUdfAssociationModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ConfigurationItemCategoryID: ").Append(ConfigurationItemCategoryID).Append("\n");
            sb.Append("  IsRequired: ").Append(IsRequired).Append("\n");
            sb.Append("  UserDefinedFieldDefinitionID: ").Append(UserDefinedFieldDefinitionID).Append("\n");
            sb.Append("  SoapParentPropertyId: ").Append(SoapParentPropertyId).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConfigurationItemCategoryUdfAssociationModel);
        }

        /// <summary>
        /// Returns true if ConfigurationItemCategoryUdfAssociationModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ConfigurationItemCategoryUdfAssociationModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConfigurationItemCategoryUdfAssociationModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ConfigurationItemCategoryID == input.ConfigurationItemCategoryID ||
                    (this.ConfigurationItemCategoryID != null &&
                    this.ConfigurationItemCategoryID.Equals(input.ConfigurationItemCategoryID))
                ) && 
                (
                    this.IsRequired == input.IsRequired ||
                    (this.IsRequired != null &&
                    this.IsRequired.Equals(input.IsRequired))
                ) && 
                (
                    this.UserDefinedFieldDefinitionID == input.UserDefinedFieldDefinitionID ||
                    (this.UserDefinedFieldDefinitionID != null &&
                    this.UserDefinedFieldDefinitionID.Equals(input.UserDefinedFieldDefinitionID))
                ) && 
                (
                    this.SoapParentPropertyId == input.SoapParentPropertyId ||
                    (this.SoapParentPropertyId != null &&
                    this.SoapParentPropertyId.Equals(input.SoapParentPropertyId))
                ) && 
                (
                    this.UserDefinedFields == input.UserDefinedFields ||
                    this.UserDefinedFields != null &&
                    this.UserDefinedFields.SequenceEqual(input.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ConfigurationItemCategoryID != null)
                    hashCode = hashCode * 59 + this.ConfigurationItemCategoryID.GetHashCode();
                if (this.IsRequired != null)
                    hashCode = hashCode * 59 + this.IsRequired.GetHashCode();
                if (this.UserDefinedFieldDefinitionID != null)
                    hashCode = hashCode * 59 + this.UserDefinedFieldDefinitionID.GetHashCode();
                if (this.SoapParentPropertyId != null)
                    hashCode = hashCode * 59 + this.SoapParentPropertyId.GetHashCode();
                if (this.UserDefinedFields != null)
                    hashCode = hashCode * 59 + this.UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
