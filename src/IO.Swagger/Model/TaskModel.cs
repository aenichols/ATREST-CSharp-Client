/* 
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TaskModel
    /// </summary>
    [DataContract]
    public partial class TaskModel :  IEquatable<TaskModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="assignedResourceID">assignedResourceID.</param>
        /// <param name="assignedResourceRoleID">assignedResourceRoleID.</param>
        /// <param name="billingCodeID">billingCodeID.</param>
        /// <param name="canClientPortalUserCompleteTask">canClientPortalUserCompleteTask.</param>
        /// <param name="companyLocationID">companyLocationID.</param>
        /// <param name="completedByResourceID">completedByResourceID.</param>
        /// <param name="completedByType">completedByType.</param>
        /// <param name="completedDateTime">completedDateTime.</param>
        /// <param name="createDateTime">createDateTime.</param>
        /// <param name="creatorResourceID">creatorResourceID.</param>
        /// <param name="creatorType">creatorType.</param>
        /// <param name="departmentID">departmentID.</param>
        /// <param name="description">description.</param>
        /// <param name="endDateTime">endDateTime.</param>
        /// <param name="estimatedHours">estimatedHours.</param>
        /// <param name="externalID">externalID.</param>
        /// <param name="hoursToBeScheduled">hoursToBeScheduled.</param>
        /// <param name="isTaskBillable">isTaskBillable.</param>
        /// <param name="isVisibleInClientPortal">isVisibleInClientPortal.</param>
        /// <param name="lastActivityDateTime">lastActivityDateTime.</param>
        /// <param name="lastActivityPersonType">lastActivityPersonType.</param>
        /// <param name="lastActivityResourceID">lastActivityResourceID.</param>
        /// <param name="phaseID">phaseID.</param>
        /// <param name="priority">priority.</param>
        /// <param name="priorityLabel">priorityLabel.</param>
        /// <param name="projectID">projectID.</param>
        /// <param name="purchaseOrderNumber">purchaseOrderNumber.</param>
        /// <param name="remainingHours">remainingHours.</param>
        /// <param name="startDateTime">startDateTime.</param>
        /// <param name="status">status.</param>
        /// <param name="taskCategoryID">taskCategoryID.</param>
        /// <param name="taskNumber">taskNumber.</param>
        /// <param name="taskType">taskType.</param>
        /// <param name="title">title.</param>
        /// <param name="userDefinedFields">userDefinedFields.</param>
        public TaskModel(long? id = default(long?), int? assignedResourceID = default(int?), int? assignedResourceRoleID = default(int?), int? billingCodeID = default(int?), bool? canClientPortalUserCompleteTask = default(bool?), int? companyLocationID = default(int?), int? completedByResourceID = default(int?), int? completedByType = default(int?), DateTime? completedDateTime = default(DateTime?), DateTime? createDateTime = default(DateTime?), int? creatorResourceID = default(int?), int? creatorType = default(int?), int? departmentID = default(int?), string description = default(string), DateTime? endDateTime = default(DateTime?), double? estimatedHours = default(double?), string externalID = default(string), double? hoursToBeScheduled = default(double?), bool? isTaskBillable = default(bool?), bool? isVisibleInClientPortal = default(bool?), DateTime? lastActivityDateTime = default(DateTime?), int? lastActivityPersonType = default(int?), int? lastActivityResourceID = default(int?), int? phaseID = default(int?), int? priority = default(int?), int? priorityLabel = default(int?), int? projectID = default(int?), string purchaseOrderNumber = default(string), double? remainingHours = default(double?), DateTime? startDateTime = default(DateTime?), int? status = default(int?), int? taskCategoryID = default(int?), string taskNumber = default(string), int? taskType = default(int?), string title = default(string), List<UserDefinedField> userDefinedFields = default(List<UserDefinedField>))
        {
            this.Id = id;
            this.AssignedResourceID = assignedResourceID;
            this.AssignedResourceRoleID = assignedResourceRoleID;
            this.BillingCodeID = billingCodeID;
            this.CanClientPortalUserCompleteTask = canClientPortalUserCompleteTask;
            this.CompanyLocationID = companyLocationID;
            this.CompletedByResourceID = completedByResourceID;
            this.CompletedByType = completedByType;
            this.CompletedDateTime = completedDateTime;
            this.CreateDateTime = createDateTime;
            this.CreatorResourceID = creatorResourceID;
            this.CreatorType = creatorType;
            this.DepartmentID = departmentID;
            this.Description = description;
            this.EndDateTime = endDateTime;
            this.EstimatedHours = estimatedHours;
            this.ExternalID = externalID;
            this.HoursToBeScheduled = hoursToBeScheduled;
            this.IsTaskBillable = isTaskBillable;
            this.IsVisibleInClientPortal = isVisibleInClientPortal;
            this.LastActivityDateTime = lastActivityDateTime;
            this.LastActivityPersonType = lastActivityPersonType;
            this.LastActivityResourceID = lastActivityResourceID;
            this.PhaseID = phaseID;
            this.Priority = priority;
            this.PriorityLabel = priorityLabel;
            this.ProjectID = projectID;
            this.PurchaseOrderNumber = purchaseOrderNumber;
            this.RemainingHours = remainingHours;
            this.StartDateTime = startDateTime;
            this.Status = status;
            this.TaskCategoryID = taskCategoryID;
            this.TaskNumber = taskNumber;
            this.TaskType = taskType;
            this.Title = title;
            this.UserDefinedFields = userDefinedFields;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets AssignedResourceID
        /// </summary>
        [DataMember(Name="assignedResourceID", EmitDefaultValue=false)]
        public int? AssignedResourceID { get; set; }

        /// <summary>
        /// Gets or Sets AssignedResourceRoleID
        /// </summary>
        [DataMember(Name="assignedResourceRoleID", EmitDefaultValue=false)]
        public int? AssignedResourceRoleID { get; set; }

        /// <summary>
        /// Gets or Sets BillingCodeID
        /// </summary>
        [DataMember(Name="billingCodeID", EmitDefaultValue=false)]
        public int? BillingCodeID { get; set; }

        /// <summary>
        /// Gets or Sets CanClientPortalUserCompleteTask
        /// </summary>
        [DataMember(Name="canClientPortalUserCompleteTask", EmitDefaultValue=false)]
        public bool? CanClientPortalUserCompleteTask { get; set; }

        /// <summary>
        /// Gets or Sets CompanyLocationID
        /// </summary>
        [DataMember(Name="companyLocationID", EmitDefaultValue=false)]
        public int? CompanyLocationID { get; set; }

        /// <summary>
        /// Gets or Sets CompletedByResourceID
        /// </summary>
        [DataMember(Name="completedByResourceID", EmitDefaultValue=false)]
        public int? CompletedByResourceID { get; set; }

        /// <summary>
        /// Gets or Sets CompletedByType
        /// </summary>
        [DataMember(Name="completedByType", EmitDefaultValue=false)]
        public int? CompletedByType { get; set; }

        /// <summary>
        /// Gets or Sets CompletedDateTime
        /// </summary>
        [DataMember(Name="completedDateTime", EmitDefaultValue=false)]
        public DateTime? CompletedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets CreateDateTime
        /// </summary>
        [DataMember(Name="createDateTime", EmitDefaultValue=false)]
        public DateTime? CreateDateTime { get; set; }

        /// <summary>
        /// Gets or Sets CreatorResourceID
        /// </summary>
        [DataMember(Name="creatorResourceID", EmitDefaultValue=false)]
        public int? CreatorResourceID { get; set; }

        /// <summary>
        /// Gets or Sets CreatorType
        /// </summary>
        [DataMember(Name="creatorType", EmitDefaultValue=false)]
        public int? CreatorType { get; set; }

        /// <summary>
        /// Gets or Sets DepartmentID
        /// </summary>
        [DataMember(Name="departmentID", EmitDefaultValue=false)]
        public int? DepartmentID { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets EndDateTime
        /// </summary>
        [DataMember(Name="endDateTime", EmitDefaultValue=false)]
        public DateTime? EndDateTime { get; set; }

        /// <summary>
        /// Gets or Sets EstimatedHours
        /// </summary>
        [DataMember(Name="estimatedHours", EmitDefaultValue=false)]
        public double? EstimatedHours { get; set; }

        /// <summary>
        /// Gets or Sets ExternalID
        /// </summary>
        [DataMember(Name="externalID", EmitDefaultValue=false)]
        public string ExternalID { get; set; }

        /// <summary>
        /// Gets or Sets HoursToBeScheduled
        /// </summary>
        [DataMember(Name="hoursToBeScheduled", EmitDefaultValue=false)]
        public double? HoursToBeScheduled { get; set; }

        /// <summary>
        /// Gets or Sets IsTaskBillable
        /// </summary>
        [DataMember(Name="isTaskBillable", EmitDefaultValue=false)]
        public bool? IsTaskBillable { get; set; }

        /// <summary>
        /// Gets or Sets IsVisibleInClientPortal
        /// </summary>
        [DataMember(Name="isVisibleInClientPortal", EmitDefaultValue=false)]
        public bool? IsVisibleInClientPortal { get; set; }

        /// <summary>
        /// Gets or Sets LastActivityDateTime
        /// </summary>
        [DataMember(Name="lastActivityDateTime", EmitDefaultValue=false)]
        public DateTime? LastActivityDateTime { get; set; }

        /// <summary>
        /// Gets or Sets LastActivityPersonType
        /// </summary>
        [DataMember(Name="lastActivityPersonType", EmitDefaultValue=false)]
        public int? LastActivityPersonType { get; set; }

        /// <summary>
        /// Gets or Sets LastActivityResourceID
        /// </summary>
        [DataMember(Name="lastActivityResourceID", EmitDefaultValue=false)]
        public int? LastActivityResourceID { get; set; }

        /// <summary>
        /// Gets or Sets PhaseID
        /// </summary>
        [DataMember(Name="phaseID", EmitDefaultValue=false)]
        public int? PhaseID { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public int? Priority { get; set; }

        /// <summary>
        /// Gets or Sets PriorityLabel
        /// </summary>
        [DataMember(Name="priorityLabel", EmitDefaultValue=false)]
        public int? PriorityLabel { get; set; }

        /// <summary>
        /// Gets or Sets ProjectID
        /// </summary>
        [DataMember(Name="projectID", EmitDefaultValue=false)]
        public int? ProjectID { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseOrderNumber
        /// </summary>
        [DataMember(Name="purchaseOrderNumber", EmitDefaultValue=false)]
        public string PurchaseOrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets RemainingHours
        /// </summary>
        [DataMember(Name="remainingHours", EmitDefaultValue=false)]
        public double? RemainingHours { get; set; }

        /// <summary>
        /// Gets or Sets StartDateTime
        /// </summary>
        [DataMember(Name="startDateTime", EmitDefaultValue=false)]
        public DateTime? StartDateTime { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public int? Status { get; set; }

        /// <summary>
        /// Gets or Sets TaskCategoryID
        /// </summary>
        [DataMember(Name="taskCategoryID", EmitDefaultValue=false)]
        public int? TaskCategoryID { get; set; }

        /// <summary>
        /// Gets or Sets TaskNumber
        /// </summary>
        [DataMember(Name="taskNumber", EmitDefaultValue=false)]
        public string TaskNumber { get; set; }

        /// <summary>
        /// Gets or Sets TaskType
        /// </summary>
        [DataMember(Name="taskType", EmitDefaultValue=false)]
        public int? TaskType { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets SoapParentPropertyId
        /// </summary>
        [DataMember(Name="soapParentPropertyId", EmitDefaultValue=false)]
        public ExpressionFuncTaskInt64 SoapParentPropertyId { get; private set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields", EmitDefaultValue=false)]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AssignedResourceID: ").Append(AssignedResourceID).Append("\n");
            sb.Append("  AssignedResourceRoleID: ").Append(AssignedResourceRoleID).Append("\n");
            sb.Append("  BillingCodeID: ").Append(BillingCodeID).Append("\n");
            sb.Append("  CanClientPortalUserCompleteTask: ").Append(CanClientPortalUserCompleteTask).Append("\n");
            sb.Append("  CompanyLocationID: ").Append(CompanyLocationID).Append("\n");
            sb.Append("  CompletedByResourceID: ").Append(CompletedByResourceID).Append("\n");
            sb.Append("  CompletedByType: ").Append(CompletedByType).Append("\n");
            sb.Append("  CompletedDateTime: ").Append(CompletedDateTime).Append("\n");
            sb.Append("  CreateDateTime: ").Append(CreateDateTime).Append("\n");
            sb.Append("  CreatorResourceID: ").Append(CreatorResourceID).Append("\n");
            sb.Append("  CreatorType: ").Append(CreatorType).Append("\n");
            sb.Append("  DepartmentID: ").Append(DepartmentID).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EndDateTime: ").Append(EndDateTime).Append("\n");
            sb.Append("  EstimatedHours: ").Append(EstimatedHours).Append("\n");
            sb.Append("  ExternalID: ").Append(ExternalID).Append("\n");
            sb.Append("  HoursToBeScheduled: ").Append(HoursToBeScheduled).Append("\n");
            sb.Append("  IsTaskBillable: ").Append(IsTaskBillable).Append("\n");
            sb.Append("  IsVisibleInClientPortal: ").Append(IsVisibleInClientPortal).Append("\n");
            sb.Append("  LastActivityDateTime: ").Append(LastActivityDateTime).Append("\n");
            sb.Append("  LastActivityPersonType: ").Append(LastActivityPersonType).Append("\n");
            sb.Append("  LastActivityResourceID: ").Append(LastActivityResourceID).Append("\n");
            sb.Append("  PhaseID: ").Append(PhaseID).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  PriorityLabel: ").Append(PriorityLabel).Append("\n");
            sb.Append("  ProjectID: ").Append(ProjectID).Append("\n");
            sb.Append("  PurchaseOrderNumber: ").Append(PurchaseOrderNumber).Append("\n");
            sb.Append("  RemainingHours: ").Append(RemainingHours).Append("\n");
            sb.Append("  StartDateTime: ").Append(StartDateTime).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TaskCategoryID: ").Append(TaskCategoryID).Append("\n");
            sb.Append("  TaskNumber: ").Append(TaskNumber).Append("\n");
            sb.Append("  TaskType: ").Append(TaskType).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  SoapParentPropertyId: ").Append(SoapParentPropertyId).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaskModel);
        }

        /// <summary>
        /// Returns true if TaskModel instances are equal
        /// </summary>
        /// <param name="input">Instance of TaskModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.AssignedResourceID == input.AssignedResourceID ||
                    (this.AssignedResourceID != null &&
                    this.AssignedResourceID.Equals(input.AssignedResourceID))
                ) && 
                (
                    this.AssignedResourceRoleID == input.AssignedResourceRoleID ||
                    (this.AssignedResourceRoleID != null &&
                    this.AssignedResourceRoleID.Equals(input.AssignedResourceRoleID))
                ) && 
                (
                    this.BillingCodeID == input.BillingCodeID ||
                    (this.BillingCodeID != null &&
                    this.BillingCodeID.Equals(input.BillingCodeID))
                ) && 
                (
                    this.CanClientPortalUserCompleteTask == input.CanClientPortalUserCompleteTask ||
                    (this.CanClientPortalUserCompleteTask != null &&
                    this.CanClientPortalUserCompleteTask.Equals(input.CanClientPortalUserCompleteTask))
                ) && 
                (
                    this.CompanyLocationID == input.CompanyLocationID ||
                    (this.CompanyLocationID != null &&
                    this.CompanyLocationID.Equals(input.CompanyLocationID))
                ) && 
                (
                    this.CompletedByResourceID == input.CompletedByResourceID ||
                    (this.CompletedByResourceID != null &&
                    this.CompletedByResourceID.Equals(input.CompletedByResourceID))
                ) && 
                (
                    this.CompletedByType == input.CompletedByType ||
                    (this.CompletedByType != null &&
                    this.CompletedByType.Equals(input.CompletedByType))
                ) && 
                (
                    this.CompletedDateTime == input.CompletedDateTime ||
                    (this.CompletedDateTime != null &&
                    this.CompletedDateTime.Equals(input.CompletedDateTime))
                ) && 
                (
                    this.CreateDateTime == input.CreateDateTime ||
                    (this.CreateDateTime != null &&
                    this.CreateDateTime.Equals(input.CreateDateTime))
                ) && 
                (
                    this.CreatorResourceID == input.CreatorResourceID ||
                    (this.CreatorResourceID != null &&
                    this.CreatorResourceID.Equals(input.CreatorResourceID))
                ) && 
                (
                    this.CreatorType == input.CreatorType ||
                    (this.CreatorType != null &&
                    this.CreatorType.Equals(input.CreatorType))
                ) && 
                (
                    this.DepartmentID == input.DepartmentID ||
                    (this.DepartmentID != null &&
                    this.DepartmentID.Equals(input.DepartmentID))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.EndDateTime == input.EndDateTime ||
                    (this.EndDateTime != null &&
                    this.EndDateTime.Equals(input.EndDateTime))
                ) && 
                (
                    this.EstimatedHours == input.EstimatedHours ||
                    (this.EstimatedHours != null &&
                    this.EstimatedHours.Equals(input.EstimatedHours))
                ) && 
                (
                    this.ExternalID == input.ExternalID ||
                    (this.ExternalID != null &&
                    this.ExternalID.Equals(input.ExternalID))
                ) && 
                (
                    this.HoursToBeScheduled == input.HoursToBeScheduled ||
                    (this.HoursToBeScheduled != null &&
                    this.HoursToBeScheduled.Equals(input.HoursToBeScheduled))
                ) && 
                (
                    this.IsTaskBillable == input.IsTaskBillable ||
                    (this.IsTaskBillable != null &&
                    this.IsTaskBillable.Equals(input.IsTaskBillable))
                ) && 
                (
                    this.IsVisibleInClientPortal == input.IsVisibleInClientPortal ||
                    (this.IsVisibleInClientPortal != null &&
                    this.IsVisibleInClientPortal.Equals(input.IsVisibleInClientPortal))
                ) && 
                (
                    this.LastActivityDateTime == input.LastActivityDateTime ||
                    (this.LastActivityDateTime != null &&
                    this.LastActivityDateTime.Equals(input.LastActivityDateTime))
                ) && 
                (
                    this.LastActivityPersonType == input.LastActivityPersonType ||
                    (this.LastActivityPersonType != null &&
                    this.LastActivityPersonType.Equals(input.LastActivityPersonType))
                ) && 
                (
                    this.LastActivityResourceID == input.LastActivityResourceID ||
                    (this.LastActivityResourceID != null &&
                    this.LastActivityResourceID.Equals(input.LastActivityResourceID))
                ) && 
                (
                    this.PhaseID == input.PhaseID ||
                    (this.PhaseID != null &&
                    this.PhaseID.Equals(input.PhaseID))
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.PriorityLabel == input.PriorityLabel ||
                    (this.PriorityLabel != null &&
                    this.PriorityLabel.Equals(input.PriorityLabel))
                ) && 
                (
                    this.ProjectID == input.ProjectID ||
                    (this.ProjectID != null &&
                    this.ProjectID.Equals(input.ProjectID))
                ) && 
                (
                    this.PurchaseOrderNumber == input.PurchaseOrderNumber ||
                    (this.PurchaseOrderNumber != null &&
                    this.PurchaseOrderNumber.Equals(input.PurchaseOrderNumber))
                ) && 
                (
                    this.RemainingHours == input.RemainingHours ||
                    (this.RemainingHours != null &&
                    this.RemainingHours.Equals(input.RemainingHours))
                ) && 
                (
                    this.StartDateTime == input.StartDateTime ||
                    (this.StartDateTime != null &&
                    this.StartDateTime.Equals(input.StartDateTime))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.TaskCategoryID == input.TaskCategoryID ||
                    (this.TaskCategoryID != null &&
                    this.TaskCategoryID.Equals(input.TaskCategoryID))
                ) && 
                (
                    this.TaskNumber == input.TaskNumber ||
                    (this.TaskNumber != null &&
                    this.TaskNumber.Equals(input.TaskNumber))
                ) && 
                (
                    this.TaskType == input.TaskType ||
                    (this.TaskType != null &&
                    this.TaskType.Equals(input.TaskType))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.SoapParentPropertyId == input.SoapParentPropertyId ||
                    (this.SoapParentPropertyId != null &&
                    this.SoapParentPropertyId.Equals(input.SoapParentPropertyId))
                ) && 
                (
                    this.UserDefinedFields == input.UserDefinedFields ||
                    this.UserDefinedFields != null &&
                    this.UserDefinedFields.SequenceEqual(input.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.AssignedResourceID != null)
                    hashCode = hashCode * 59 + this.AssignedResourceID.GetHashCode();
                if (this.AssignedResourceRoleID != null)
                    hashCode = hashCode * 59 + this.AssignedResourceRoleID.GetHashCode();
                if (this.BillingCodeID != null)
                    hashCode = hashCode * 59 + this.BillingCodeID.GetHashCode();
                if (this.CanClientPortalUserCompleteTask != null)
                    hashCode = hashCode * 59 + this.CanClientPortalUserCompleteTask.GetHashCode();
                if (this.CompanyLocationID != null)
                    hashCode = hashCode * 59 + this.CompanyLocationID.GetHashCode();
                if (this.CompletedByResourceID != null)
                    hashCode = hashCode * 59 + this.CompletedByResourceID.GetHashCode();
                if (this.CompletedByType != null)
                    hashCode = hashCode * 59 + this.CompletedByType.GetHashCode();
                if (this.CompletedDateTime != null)
                    hashCode = hashCode * 59 + this.CompletedDateTime.GetHashCode();
                if (this.CreateDateTime != null)
                    hashCode = hashCode * 59 + this.CreateDateTime.GetHashCode();
                if (this.CreatorResourceID != null)
                    hashCode = hashCode * 59 + this.CreatorResourceID.GetHashCode();
                if (this.CreatorType != null)
                    hashCode = hashCode * 59 + this.CreatorType.GetHashCode();
                if (this.DepartmentID != null)
                    hashCode = hashCode * 59 + this.DepartmentID.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.EndDateTime != null)
                    hashCode = hashCode * 59 + this.EndDateTime.GetHashCode();
                if (this.EstimatedHours != null)
                    hashCode = hashCode * 59 + this.EstimatedHours.GetHashCode();
                if (this.ExternalID != null)
                    hashCode = hashCode * 59 + this.ExternalID.GetHashCode();
                if (this.HoursToBeScheduled != null)
                    hashCode = hashCode * 59 + this.HoursToBeScheduled.GetHashCode();
                if (this.IsTaskBillable != null)
                    hashCode = hashCode * 59 + this.IsTaskBillable.GetHashCode();
                if (this.IsVisibleInClientPortal != null)
                    hashCode = hashCode * 59 + this.IsVisibleInClientPortal.GetHashCode();
                if (this.LastActivityDateTime != null)
                    hashCode = hashCode * 59 + this.LastActivityDateTime.GetHashCode();
                if (this.LastActivityPersonType != null)
                    hashCode = hashCode * 59 + this.LastActivityPersonType.GetHashCode();
                if (this.LastActivityResourceID != null)
                    hashCode = hashCode * 59 + this.LastActivityResourceID.GetHashCode();
                if (this.PhaseID != null)
                    hashCode = hashCode * 59 + this.PhaseID.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.PriorityLabel != null)
                    hashCode = hashCode * 59 + this.PriorityLabel.GetHashCode();
                if (this.ProjectID != null)
                    hashCode = hashCode * 59 + this.ProjectID.GetHashCode();
                if (this.PurchaseOrderNumber != null)
                    hashCode = hashCode * 59 + this.PurchaseOrderNumber.GetHashCode();
                if (this.RemainingHours != null)
                    hashCode = hashCode * 59 + this.RemainingHours.GetHashCode();
                if (this.StartDateTime != null)
                    hashCode = hashCode * 59 + this.StartDateTime.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TaskCategoryID != null)
                    hashCode = hashCode * 59 + this.TaskCategoryID.GetHashCode();
                if (this.TaskNumber != null)
                    hashCode = hashCode * 59 + this.TaskNumber.GetHashCode();
                if (this.TaskType != null)
                    hashCode = hashCode * 59 + this.TaskType.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.SoapParentPropertyId != null)
                    hashCode = hashCode * 59 + this.SoapParentPropertyId.GetHashCode();
                if (this.UserDefinedFields != null)
                    hashCode = hashCode * 59 + this.UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
