/* 
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CurrencyModel
    /// </summary>
    [DataContract]
    public partial class CurrencyModel :  IEquatable<CurrencyModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrencyModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="currencyNegativeFormat">currencyNegativeFormat.</param>
        /// <param name="currencyPositiveFormat">currencyPositiveFormat.</param>
        /// <param name="description">description.</param>
        /// <param name="displaySymbol">displaySymbol.</param>
        /// <param name="exchangeRate">exchangeRate.</param>
        /// <param name="isActive">isActive.</param>
        /// <param name="isInternalCurrency">isInternalCurrency.</param>
        /// <param name="lastModifiedDateTime">lastModifiedDateTime.</param>
        /// <param name="name">name.</param>
        /// <param name="updateResourceId">updateResourceId.</param>
        /// <param name="userDefinedFields">userDefinedFields.</param>
        public CurrencyModel(long? id = default(long?), string currencyNegativeFormat = default(string), string currencyPositiveFormat = default(string), string description = default(string), int? displaySymbol = default(int?), double? exchangeRate = default(double?), bool? isActive = default(bool?), bool? isInternalCurrency = default(bool?), DateTime? lastModifiedDateTime = default(DateTime?), string name = default(string), int? updateResourceId = default(int?), List<UserDefinedField> userDefinedFields = default(List<UserDefinedField>))
        {
            this.Id = id;
            this.CurrencyNegativeFormat = currencyNegativeFormat;
            this.CurrencyPositiveFormat = currencyPositiveFormat;
            this.Description = description;
            this.DisplaySymbol = displaySymbol;
            this.ExchangeRate = exchangeRate;
            this.IsActive = isActive;
            this.IsInternalCurrency = isInternalCurrency;
            this.LastModifiedDateTime = lastModifiedDateTime;
            this.Name = name;
            this.UpdateResourceId = updateResourceId;
            this.UserDefinedFields = userDefinedFields;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyNegativeFormat
        /// </summary>
        [DataMember(Name="currencyNegativeFormat", EmitDefaultValue=false)]
        public string CurrencyNegativeFormat { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyPositiveFormat
        /// </summary>
        [DataMember(Name="currencyPositiveFormat", EmitDefaultValue=false)]
        public string CurrencyPositiveFormat { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DisplaySymbol
        /// </summary>
        [DataMember(Name="displaySymbol", EmitDefaultValue=false)]
        public int? DisplaySymbol { get; set; }

        /// <summary>
        /// Gets or Sets ExchangeRate
        /// </summary>
        [DataMember(Name="exchangeRate", EmitDefaultValue=false)]
        public double? ExchangeRate { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="isActive", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets IsInternalCurrency
        /// </summary>
        [DataMember(Name="isInternalCurrency", EmitDefaultValue=false)]
        public bool? IsInternalCurrency { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedDateTime
        /// </summary>
        [DataMember(Name="lastModifiedDateTime", EmitDefaultValue=false)]
        public DateTime? LastModifiedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets UpdateResourceId
        /// </summary>
        [DataMember(Name="updateResourceId", EmitDefaultValue=false)]
        public int? UpdateResourceId { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields", EmitDefaultValue=false)]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CurrencyModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CurrencyNegativeFormat: ").Append(CurrencyNegativeFormat).Append("\n");
            sb.Append("  CurrencyPositiveFormat: ").Append(CurrencyPositiveFormat).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplaySymbol: ").Append(DisplaySymbol).Append("\n");
            sb.Append("  ExchangeRate: ").Append(ExchangeRate).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsInternalCurrency: ").Append(IsInternalCurrency).Append("\n");
            sb.Append("  LastModifiedDateTime: ").Append(LastModifiedDateTime).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  UpdateResourceId: ").Append(UpdateResourceId).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CurrencyModel);
        }

        /// <summary>
        /// Returns true if CurrencyModel instances are equal
        /// </summary>
        /// <param name="input">Instance of CurrencyModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CurrencyModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CurrencyNegativeFormat == input.CurrencyNegativeFormat ||
                    (this.CurrencyNegativeFormat != null &&
                    this.CurrencyNegativeFormat.Equals(input.CurrencyNegativeFormat))
                ) && 
                (
                    this.CurrencyPositiveFormat == input.CurrencyPositiveFormat ||
                    (this.CurrencyPositiveFormat != null &&
                    this.CurrencyPositiveFormat.Equals(input.CurrencyPositiveFormat))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DisplaySymbol == input.DisplaySymbol ||
                    (this.DisplaySymbol != null &&
                    this.DisplaySymbol.Equals(input.DisplaySymbol))
                ) && 
                (
                    this.ExchangeRate == input.ExchangeRate ||
                    (this.ExchangeRate != null &&
                    this.ExchangeRate.Equals(input.ExchangeRate))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.IsInternalCurrency == input.IsInternalCurrency ||
                    (this.IsInternalCurrency != null &&
                    this.IsInternalCurrency.Equals(input.IsInternalCurrency))
                ) && 
                (
                    this.LastModifiedDateTime == input.LastModifiedDateTime ||
                    (this.LastModifiedDateTime != null &&
                    this.LastModifiedDateTime.Equals(input.LastModifiedDateTime))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.UpdateResourceId == input.UpdateResourceId ||
                    (this.UpdateResourceId != null &&
                    this.UpdateResourceId.Equals(input.UpdateResourceId))
                ) && 
                (
                    this.UserDefinedFields == input.UserDefinedFields ||
                    this.UserDefinedFields != null &&
                    this.UserDefinedFields.SequenceEqual(input.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CurrencyNegativeFormat != null)
                    hashCode = hashCode * 59 + this.CurrencyNegativeFormat.GetHashCode();
                if (this.CurrencyPositiveFormat != null)
                    hashCode = hashCode * 59 + this.CurrencyPositiveFormat.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DisplaySymbol != null)
                    hashCode = hashCode * 59 + this.DisplaySymbol.GetHashCode();
                if (this.ExchangeRate != null)
                    hashCode = hashCode * 59 + this.ExchangeRate.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.IsInternalCurrency != null)
                    hashCode = hashCode * 59 + this.IsInternalCurrency.GetHashCode();
                if (this.LastModifiedDateTime != null)
                    hashCode = hashCode * 59 + this.LastModifiedDateTime.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.UpdateResourceId != null)
                    hashCode = hashCode * 59 + this.UpdateResourceId.GetHashCode();
                if (this.UserDefinedFields != null)
                    hashCode = hashCode * 59 + this.UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
