/* 
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// QueryModel
    /// </summary>
    [DataContract]
    public partial class QueryModel :  IEquatable<QueryModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QueryModel" /> class.
        /// </summary>
        /// <param name="maxRecords">maxRecords.</param>
        /// <param name="includeFields">includeFields.</param>
        /// <param name="filter">filter.</param>
        public QueryModel(int? maxRecords = default(int?), List<string> includeFields = default(List<string>), List<Filter> filter = default(List<Filter>))
        {
            this.MaxRecords = maxRecords;
            this.IncludeFields = includeFields;
            this.Filter = filter;
        }
        
        /// <summary>
        /// Gets or Sets MaxRecords
        /// </summary>
        [DataMember(Name="maxRecords", EmitDefaultValue=false)]
        public int? MaxRecords { get; set; }

        /// <summary>
        /// Gets or Sets IncludeFields
        /// </summary>
        [DataMember(Name="includeFields", EmitDefaultValue=false)]
        public List<string> IncludeFields { get; set; }

        /// <summary>
        /// Gets or Sets Filter
        /// </summary>
        [DataMember(Name="filter", EmitDefaultValue=false)]
        public List<Filter> Filter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QueryModel {\n");
            sb.Append("  MaxRecords: ").Append(MaxRecords).Append("\n");
            sb.Append("  IncludeFields: ").Append(IncludeFields).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QueryModel);
        }

        /// <summary>
        /// Returns true if QueryModel instances are equal
        /// </summary>
        /// <param name="input">Instance of QueryModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueryModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MaxRecords == input.MaxRecords ||
                    (this.MaxRecords != null &&
                    this.MaxRecords.Equals(input.MaxRecords))
                ) && 
                (
                    this.IncludeFields == input.IncludeFields ||
                    this.IncludeFields != null &&
                    this.IncludeFields.SequenceEqual(input.IncludeFields)
                ) && 
                (
                    this.Filter == input.Filter ||
                    this.Filter != null &&
                    this.Filter.SequenceEqual(input.Filter)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MaxRecords != null)
                    hashCode = hashCode * 59 + this.MaxRecords.GetHashCode();
                if (this.IncludeFields != null)
                    hashCode = hashCode * 59 + this.IncludeFields.GetHashCode();
                if (this.Filter != null)
                    hashCode = hashCode * 59 + this.Filter.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
