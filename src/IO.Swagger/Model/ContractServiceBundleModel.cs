/* 
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ContractServiceBundleModel
    /// </summary>
    [DataContract]
    public partial class ContractServiceBundleModel :  IEquatable<ContractServiceBundleModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContractServiceBundleModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="adjustedPrice">adjustedPrice.</param>
        /// <param name="contractID">contractID.</param>
        /// <param name="internalCurrencyAdjustedPrice">internalCurrencyAdjustedPrice.</param>
        /// <param name="internalCurrencyUnitPrice">internalCurrencyUnitPrice.</param>
        /// <param name="internalDescription">internalDescription.</param>
        /// <param name="invoiceDescription">invoiceDescription.</param>
        /// <param name="quoteItemID">quoteItemID.</param>
        /// <param name="serviceBundleID">serviceBundleID.</param>
        /// <param name="unitPrice">unitPrice.</param>
        /// <param name="userDefinedFields">userDefinedFields.</param>
        public ContractServiceBundleModel(long? id = default(long?), double? adjustedPrice = default(double?), int? contractID = default(int?), double? internalCurrencyAdjustedPrice = default(double?), double? internalCurrencyUnitPrice = default(double?), string internalDescription = default(string), string invoiceDescription = default(string), long? quoteItemID = default(long?), int? serviceBundleID = default(int?), double? unitPrice = default(double?), List<UserDefinedField> userDefinedFields = default(List<UserDefinedField>))
        {
            this.Id = id;
            this.AdjustedPrice = adjustedPrice;
            this.ContractID = contractID;
            this.InternalCurrencyAdjustedPrice = internalCurrencyAdjustedPrice;
            this.InternalCurrencyUnitPrice = internalCurrencyUnitPrice;
            this.InternalDescription = internalDescription;
            this.InvoiceDescription = invoiceDescription;
            this.QuoteItemID = quoteItemID;
            this.ServiceBundleID = serviceBundleID;
            this.UnitPrice = unitPrice;
            this.UserDefinedFields = userDefinedFields;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets AdjustedPrice
        /// </summary>
        [DataMember(Name="adjustedPrice", EmitDefaultValue=false)]
        public double? AdjustedPrice { get; set; }

        /// <summary>
        /// Gets or Sets ContractID
        /// </summary>
        [DataMember(Name="contractID", EmitDefaultValue=false)]
        public int? ContractID { get; set; }

        /// <summary>
        /// Gets or Sets InternalCurrencyAdjustedPrice
        /// </summary>
        [DataMember(Name="internalCurrencyAdjustedPrice", EmitDefaultValue=false)]
        public double? InternalCurrencyAdjustedPrice { get; set; }

        /// <summary>
        /// Gets or Sets InternalCurrencyUnitPrice
        /// </summary>
        [DataMember(Name="internalCurrencyUnitPrice", EmitDefaultValue=false)]
        public double? InternalCurrencyUnitPrice { get; set; }

        /// <summary>
        /// Gets or Sets InternalDescription
        /// </summary>
        [DataMember(Name="internalDescription", EmitDefaultValue=false)]
        public string InternalDescription { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceDescription
        /// </summary>
        [DataMember(Name="invoiceDescription", EmitDefaultValue=false)]
        public string InvoiceDescription { get; set; }

        /// <summary>
        /// Gets or Sets QuoteItemID
        /// </summary>
        [DataMember(Name="quoteItemID", EmitDefaultValue=false)]
        public long? QuoteItemID { get; set; }

        /// <summary>
        /// Gets or Sets ServiceBundleID
        /// </summary>
        [DataMember(Name="serviceBundleID", EmitDefaultValue=false)]
        public int? ServiceBundleID { get; set; }

        /// <summary>
        /// Gets or Sets UnitPrice
        /// </summary>
        [DataMember(Name="unitPrice", EmitDefaultValue=false)]
        public double? UnitPrice { get; set; }

        /// <summary>
        /// Gets or Sets SoapParentPropertyId
        /// </summary>
        [DataMember(Name="soapParentPropertyId", EmitDefaultValue=false)]
        public ExpressionFuncContractServiceBundleInt64 SoapParentPropertyId { get; private set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields", EmitDefaultValue=false)]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContractServiceBundleModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AdjustedPrice: ").Append(AdjustedPrice).Append("\n");
            sb.Append("  ContractID: ").Append(ContractID).Append("\n");
            sb.Append("  InternalCurrencyAdjustedPrice: ").Append(InternalCurrencyAdjustedPrice).Append("\n");
            sb.Append("  InternalCurrencyUnitPrice: ").Append(InternalCurrencyUnitPrice).Append("\n");
            sb.Append("  InternalDescription: ").Append(InternalDescription).Append("\n");
            sb.Append("  InvoiceDescription: ").Append(InvoiceDescription).Append("\n");
            sb.Append("  QuoteItemID: ").Append(QuoteItemID).Append("\n");
            sb.Append("  ServiceBundleID: ").Append(ServiceBundleID).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  SoapParentPropertyId: ").Append(SoapParentPropertyId).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContractServiceBundleModel);
        }

        /// <summary>
        /// Returns true if ContractServiceBundleModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ContractServiceBundleModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContractServiceBundleModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.AdjustedPrice == input.AdjustedPrice ||
                    (this.AdjustedPrice != null &&
                    this.AdjustedPrice.Equals(input.AdjustedPrice))
                ) && 
                (
                    this.ContractID == input.ContractID ||
                    (this.ContractID != null &&
                    this.ContractID.Equals(input.ContractID))
                ) && 
                (
                    this.InternalCurrencyAdjustedPrice == input.InternalCurrencyAdjustedPrice ||
                    (this.InternalCurrencyAdjustedPrice != null &&
                    this.InternalCurrencyAdjustedPrice.Equals(input.InternalCurrencyAdjustedPrice))
                ) && 
                (
                    this.InternalCurrencyUnitPrice == input.InternalCurrencyUnitPrice ||
                    (this.InternalCurrencyUnitPrice != null &&
                    this.InternalCurrencyUnitPrice.Equals(input.InternalCurrencyUnitPrice))
                ) && 
                (
                    this.InternalDescription == input.InternalDescription ||
                    (this.InternalDescription != null &&
                    this.InternalDescription.Equals(input.InternalDescription))
                ) && 
                (
                    this.InvoiceDescription == input.InvoiceDescription ||
                    (this.InvoiceDescription != null &&
                    this.InvoiceDescription.Equals(input.InvoiceDescription))
                ) && 
                (
                    this.QuoteItemID == input.QuoteItemID ||
                    (this.QuoteItemID != null &&
                    this.QuoteItemID.Equals(input.QuoteItemID))
                ) && 
                (
                    this.ServiceBundleID == input.ServiceBundleID ||
                    (this.ServiceBundleID != null &&
                    this.ServiceBundleID.Equals(input.ServiceBundleID))
                ) && 
                (
                    this.UnitPrice == input.UnitPrice ||
                    (this.UnitPrice != null &&
                    this.UnitPrice.Equals(input.UnitPrice))
                ) && 
                (
                    this.SoapParentPropertyId == input.SoapParentPropertyId ||
                    (this.SoapParentPropertyId != null &&
                    this.SoapParentPropertyId.Equals(input.SoapParentPropertyId))
                ) && 
                (
                    this.UserDefinedFields == input.UserDefinedFields ||
                    this.UserDefinedFields != null &&
                    this.UserDefinedFields.SequenceEqual(input.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.AdjustedPrice != null)
                    hashCode = hashCode * 59 + this.AdjustedPrice.GetHashCode();
                if (this.ContractID != null)
                    hashCode = hashCode * 59 + this.ContractID.GetHashCode();
                if (this.InternalCurrencyAdjustedPrice != null)
                    hashCode = hashCode * 59 + this.InternalCurrencyAdjustedPrice.GetHashCode();
                if (this.InternalCurrencyUnitPrice != null)
                    hashCode = hashCode * 59 + this.InternalCurrencyUnitPrice.GetHashCode();
                if (this.InternalDescription != null)
                    hashCode = hashCode * 59 + this.InternalDescription.GetHashCode();
                if (this.InvoiceDescription != null)
                    hashCode = hashCode * 59 + this.InvoiceDescription.GetHashCode();
                if (this.QuoteItemID != null)
                    hashCode = hashCode * 59 + this.QuoteItemID.GetHashCode();
                if (this.ServiceBundleID != null)
                    hashCode = hashCode * 59 + this.ServiceBundleID.GetHashCode();
                if (this.UnitPrice != null)
                    hashCode = hashCode * 59 + this.UnitPrice.GetHashCode();
                if (this.SoapParentPropertyId != null)
                    hashCode = hashCode * 59 + this.SoapParentPropertyId.GetHashCode();
                if (this.UserDefinedFields != null)
                    hashCode = hashCode * 59 + this.UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
